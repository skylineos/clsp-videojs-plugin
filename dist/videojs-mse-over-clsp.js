/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/debug/src/browser.js":
/*!*******************************************!*\
  !*** ./node_modules/debug/src/browser.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\n/**\n * Colors.\n */\n\nexports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n// eslint-disable-next-line complexity\n\nfunction useColors() {\n  // NB: In an Electron preload script, document will be defined but not fully\n  // initialized. Since we know we're in Chrome, we'll just detect this case\n  // explicitly\n  if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n    return true;\n  } // Internet Explorer and Edge do not support colors.\n\n\n  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n    return false;\n  } // Is webkit? http://stackoverflow.com/a/16459606/376773\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\n\n  return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773\n  typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?\n  // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker\n  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/);\n}\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\n\nfunction formatArgs(args) {\n  args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);\n\n  if (!this.useColors) {\n    return;\n  }\n\n  var c = 'color: ' + this.color;\n  args.splice(1, 0, c, 'color: inherit'); // The final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-zA-Z%]/g, function (match) {\n    if (match === '%%') {\n      return;\n    }\n\n    index++;\n\n    if (match === '%c') {\n      // We only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n  args.splice(lastC, 0, c);\n}\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\n\nfunction log() {\n  var _console;\n\n  // This hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return typeof console === 'object' && console.log && (_console = console).log.apply(_console, arguments);\n}\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\n\nfunction save(namespaces) {\n  try {\n    if (namespaces) {\n      exports.storage.setItem('debug', namespaces);\n    } else {\n      exports.storage.removeItem('debug');\n    }\n  } catch (error) {// Swallow\n    // XXX (@Qix-) should we be logging these?\n  }\n}\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\n\nfunction load() {\n  var r;\n\n  try {\n    r = exports.storage.getItem('debug');\n  } catch (error) {} // Swallow\n  // XXX (@Qix-) should we be logging these?\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\n\n  if (!r && typeof process !== 'undefined' && 'env' in process) {\n    r = Object({\"NODE_ENV\":\"development\"}).DEBUG;\n  }\n\n  return r;\n}\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\n\nfunction localstorage() {\n  try {\n    // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n    // The Browser also has localStorage in the global context.\n    return localStorage;\n  } catch (error) {// Swallow\n    // XXX (@Qix-) should we be logging these?\n  }\n}\n\nmodule.exports = __webpack_require__(/*! ./common */ \"./node_modules/debug/src/common.js\")(exports);\nvar formatters = module.exports.formatters;\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n  try {\n    return JSON.stringify(v);\n  } catch (error) {\n    return '[UnexpectedJSONParseError]: ' + error.message;\n  }\n};\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/debug/src/browser.js\n");

/***/ }),

/***/ "./node_modules/debug/src/common.js":
/*!******************************************!*\
  !*** ./node_modules/debug/src/common.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\nfunction setup(env) {\n  createDebug.debug = createDebug;\n  createDebug[\"default\"] = createDebug;\n  createDebug.coerce = coerce;\n  createDebug.disable = disable;\n  createDebug.enable = enable;\n  createDebug.enabled = enabled;\n  createDebug.humanize = __webpack_require__(/*! ms */ \"./node_modules/ms/index.js\");\n  Object.keys(env).forEach(function (key) {\n    createDebug[key] = env[key];\n  });\n  /**\n  * Active `debug` instances.\n  */\n\n  createDebug.instances = [];\n  /**\n  * The currently active debug mode names, and names to skip.\n  */\n\n  createDebug.names = [];\n  createDebug.skips = [];\n  /**\n  * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n  *\n  * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n  */\n\n  createDebug.formatters = {};\n  /**\n  * Selects a color for a debug namespace\n  * @param {String} namespace The namespace string for the for the debug instance to be colored\n  * @return {Number|String} An ANSI color code for the given namespace\n  * @api private\n  */\n\n  function selectColor(namespace) {\n    var hash = 0;\n\n    for (var i = 0; i < namespace.length; i++) {\n      hash = (hash << 5) - hash + namespace.charCodeAt(i);\n      hash |= 0; // Convert to 32bit integer\n    }\n\n    return createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n  }\n\n  createDebug.selectColor = selectColor;\n  /**\n  * Create a debugger with the given `namespace`.\n  *\n  * @param {String} namespace\n  * @return {Function}\n  * @api public\n  */\n\n  function createDebug(namespace) {\n    var prevTime;\n\n    function debug() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      // Disabled?\n      if (!debug.enabled) {\n        return;\n      }\n\n      var self = debug; // Set `diff` timestamp\n\n      var curr = Number(new Date());\n      var ms = curr - (prevTime || curr);\n      self.diff = ms;\n      self.prev = prevTime;\n      self.curr = curr;\n      prevTime = curr;\n      args[0] = createDebug.coerce(args[0]);\n\n      if (typeof args[0] !== 'string') {\n        // Anything else let's inspect with %O\n        args.unshift('%O');\n      } // Apply any `formatters` transformations\n\n\n      var index = 0;\n      args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {\n        // If we encounter an escaped % then don't increase the array index\n        if (match === '%%') {\n          return match;\n        }\n\n        index++;\n        var formatter = createDebug.formatters[format];\n\n        if (typeof formatter === 'function') {\n          var val = args[index];\n          match = formatter.call(self, val); // Now we need to remove `args[index]` since it's inlined in the `format`\n\n          args.splice(index, 1);\n          index--;\n        }\n\n        return match;\n      }); // Apply env-specific formatting (colors, etc.)\n\n      createDebug.formatArgs.call(self, args);\n      var logFn = self.log || createDebug.log;\n      logFn.apply(self, args);\n    }\n\n    debug.namespace = namespace;\n    debug.enabled = createDebug.enabled(namespace);\n    debug.useColors = createDebug.useColors();\n    debug.color = selectColor(namespace);\n    debug.destroy = destroy;\n    debug.extend = extend; // Debug.formatArgs = formatArgs;\n    // debug.rawLog = rawLog;\n    // env-specific initialization logic for debug instances\n\n    if (typeof createDebug.init === 'function') {\n      createDebug.init(debug);\n    }\n\n    createDebug.instances.push(debug);\n    return debug;\n  }\n\n  function destroy() {\n    var index = createDebug.instances.indexOf(this);\n\n    if (index !== -1) {\n      createDebug.instances.splice(index, 1);\n      return true;\n    }\n\n    return false;\n  }\n\n  function extend(namespace, delimiter) {\n    var newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n    newDebug.log = this.log;\n    return newDebug;\n  }\n  /**\n  * Enables a debug mode by namespaces. This can include modes\n  * separated by a colon and wildcards.\n  *\n  * @param {String} namespaces\n  * @api public\n  */\n\n\n  function enable(namespaces) {\n    createDebug.save(namespaces);\n    createDebug.names = [];\n    createDebug.skips = [];\n    var i;\n    var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n    var len = split.length;\n\n    for (i = 0; i < len; i++) {\n      if (!split[i]) {\n        // ignore empty strings\n        continue;\n      }\n\n      namespaces = split[i].replace(/\\*/g, '.*?');\n\n      if (namespaces[0] === '-') {\n        createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n      } else {\n        createDebug.names.push(new RegExp('^' + namespaces + '$'));\n      }\n    }\n\n    for (i = 0; i < createDebug.instances.length; i++) {\n      var instance = createDebug.instances[i];\n      instance.enabled = createDebug.enabled(instance.namespace);\n    }\n  }\n  /**\n  * Disable debug output.\n  *\n  * @return {String} namespaces\n  * @api public\n  */\n\n\n  function disable() {\n    var namespaces = [].concat(_toConsumableArray(createDebug.names.map(toNamespace)), _toConsumableArray(createDebug.skips.map(toNamespace).map(function (namespace) {\n      return '-' + namespace;\n    }))).join(',');\n    createDebug.enable('');\n    return namespaces;\n  }\n  /**\n  * Returns true if the given mode name is enabled, false otherwise.\n  *\n  * @param {String} name\n  * @return {Boolean}\n  * @api public\n  */\n\n\n  function enabled(name) {\n    if (name[name.length - 1] === '*') {\n      return true;\n    }\n\n    var i;\n    var len;\n\n    for (i = 0, len = createDebug.skips.length; i < len; i++) {\n      if (createDebug.skips[i].test(name)) {\n        return false;\n      }\n    }\n\n    for (i = 0, len = createDebug.names.length; i < len; i++) {\n      if (createDebug.names[i].test(name)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  /**\n  * Convert regexp to namespace\n  *\n  * @param {RegExp} regxep\n  * @return {String} namespace\n  * @api private\n  */\n\n\n  function toNamespace(regexp) {\n    return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\\.\\*\\?$/, '*');\n  }\n  /**\n  * Coerce `val`.\n  *\n  * @param {Mixed} val\n  * @return {Mixed}\n  * @api private\n  */\n\n\n  function coerce(val) {\n    if (val instanceof Error) {\n      return val.stack || val.message;\n    }\n\n    return val;\n  }\n\n  createDebug.enable(createDebug.load());\n  return createDebug;\n}\n\nmodule.exports = setup;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/debug/src/common.js\n");

/***/ }),

/***/ "./node_modules/lodash/_Symbol.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/_Symbol.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var root = __webpack_require__(/*! ./_root */ \"./node_modules/lodash/_root.js\");\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19TeW1ib2wuanM/OWU2OSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxXQUFXLG1CQUFPLENBQUMsK0NBQVM7O0FBRTVCO0FBQ0E7O0FBRUEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19TeW1ib2wuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ltYm9sO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/_Symbol.js\n");

/***/ }),

/***/ "./node_modules/lodash/_apply.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/_apply.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\nmodule.exports = apply;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcHBseS5qcz84NWUzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEIsV0FBVyxFQUFFO0FBQ2IsV0FBVyxNQUFNO0FBQ2pCLGFBQWEsRUFBRTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXBwbHkuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEEgZmFzdGVyIGFsdGVybmF0aXZlIHRvIGBGdW5jdGlvbiNhcHBseWAsIHRoaXMgZnVuY3Rpb24gaW52b2tlcyBgZnVuY2BcbiAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGB0aGlzQXJnYCBhbmQgdGhlIGFyZ3VtZW50cyBvZiBgYXJnc2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAqIEBwYXJhbSB7Kn0gdGhpc0FyZyBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgYGZ1bmNgLlxuICovXG5mdW5jdGlvbiBhcHBseShmdW5jLCB0aGlzQXJnLCBhcmdzKSB7XG4gIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZyk7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0pO1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gIH1cbiAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXBwbHk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/_apply.js\n");

/***/ }),

/***/ "./node_modules/lodash/_arrayLikeKeys.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_arrayLikeKeys.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseTimes = __webpack_require__(/*! ./_baseTimes */ \"./node_modules/lodash/_baseTimes.js\"),\n    isArguments = __webpack_require__(/*! ./isArguments */ \"./node_modules/lodash/isArguments.js\"),\n    isArray = __webpack_require__(/*! ./isArray */ \"./node_modules/lodash/isArray.js\"),\n    isBuffer = __webpack_require__(/*! ./isBuffer */ \"./node_modules/lodash/isBuffer.js\"),\n    isIndex = __webpack_require__(/*! ./_isIndex */ \"./node_modules/lodash/_isIndex.js\"),\n    isTypedArray = __webpack_require__(/*! ./isTypedArray */ \"./node_modules/lodash/isTypedArray.js\");\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = arrayLikeKeys;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheUxpa2VLZXlzLmpzPzZmY2QiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZ0JBQWdCLG1CQUFPLENBQUMseURBQWM7QUFDdEMsa0JBQWtCLG1CQUFPLENBQUMsMkRBQWU7QUFDekMsY0FBYyxtQkFBTyxDQUFDLG1EQUFXO0FBQ2pDLGVBQWUsbUJBQU8sQ0FBQyxxREFBWTtBQUNuQyxjQUFjLG1CQUFPLENBQUMscURBQVk7QUFDbEMsbUJBQW1CLG1CQUFPLENBQUMsNkRBQWdCOztBQUUzQztBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYixXQUFXLFFBQVE7QUFDbkIsYUFBYSxNQUFNO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlMaWtlS2V5cy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBiYXNlVGltZXMgPSByZXF1aXJlKCcuL19iYXNlVGltZXMnKSxcbiAgICBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNCdWZmZXIgPSByZXF1aXJlKCcuL2lzQnVmZmVyJyksXG4gICAgaXNJbmRleCA9IHJlcXVpcmUoJy4vX2lzSW5kZXgnKSxcbiAgICBpc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL2lzVHlwZWRBcnJheScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgdGhlIGFycmF5LWxpa2UgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGluaGVyaXRlZCBTcGVjaWZ5IHJldHVybmluZyBpbmhlcml0ZWQgcHJvcGVydHkgbmFtZXMuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBhcnJheUxpa2VLZXlzKHZhbHVlLCBpbmhlcml0ZWQpIHtcbiAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSksXG4gICAgICBpc0FyZyA9ICFpc0FyciAmJiBpc0FyZ3VtZW50cyh2YWx1ZSksXG4gICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgIWlzQXJnICYmIGlzQnVmZmVyKHZhbHVlKSxcbiAgICAgIGlzVHlwZSA9ICFpc0FyciAmJiAhaXNBcmcgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkodmFsdWUpLFxuICAgICAgc2tpcEluZGV4ZXMgPSBpc0FyciB8fCBpc0FyZyB8fCBpc0J1ZmYgfHwgaXNUeXBlLFxuICAgICAgcmVzdWx0ID0gc2tpcEluZGV4ZXMgPyBiYXNlVGltZXModmFsdWUubGVuZ3RoLCBTdHJpbmcpIDogW10sXG4gICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgIGlmICgoaW5oZXJpdGVkIHx8IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpICYmXG4gICAgICAgICEoc2tpcEluZGV4ZXMgJiYgKFxuICAgICAgICAgICAvLyBTYWZhcmkgOSBoYXMgZW51bWVyYWJsZSBgYXJndW1lbnRzLmxlbmd0aGAgaW4gc3RyaWN0IG1vZGUuXG4gICAgICAgICAgIGtleSA9PSAnbGVuZ3RoJyB8fFxuICAgICAgICAgICAvLyBOb2RlLmpzIDAuMTAgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gYnVmZmVycy5cbiAgICAgICAgICAgKGlzQnVmZiAmJiAoa2V5ID09ICdvZmZzZXQnIHx8IGtleSA9PSAncGFyZW50JykpIHx8XG4gICAgICAgICAgIC8vIFBoYW50b21KUyAyIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIHR5cGVkIGFycmF5cy5cbiAgICAgICAgICAgKGlzVHlwZSAmJiAoa2V5ID09ICdidWZmZXInIHx8IGtleSA9PSAnYnl0ZUxlbmd0aCcgfHwga2V5ID09ICdieXRlT2Zmc2V0JykpIHx8XG4gICAgICAgICAgIC8vIFNraXAgaW5kZXggcHJvcGVydGllcy5cbiAgICAgICAgICAgaXNJbmRleChrZXksIGxlbmd0aClcbiAgICAgICAgKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlMaWtlS2V5cztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/_arrayLikeKeys.js\n");

/***/ }),

/***/ "./node_modules/lodash/_baseGetTag.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseGetTag.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var Symbol = __webpack_require__(/*! ./_Symbol */ \"./node_modules/lodash/_Symbol.js\"),\n    getRawTag = __webpack_require__(/*! ./_getRawTag */ \"./node_modules/lodash/_getRawTag.js\"),\n    objectToString = __webpack_require__(/*! ./_objectToString */ \"./node_modules/lodash/_objectToString.js\");\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlR2V0VGFnLmpzPzM3MjkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsYUFBYSxtQkFBTyxDQUFDLG1EQUFXO0FBQ2hDLGdCQUFnQixtQkFBTyxDQUFDLHlEQUFjO0FBQ3RDLHFCQUFxQixtQkFBTyxDQUFDLG1FQUFtQjs7QUFFaEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUdldFRhZy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKSxcbiAgICBnZXRSYXdUYWcgPSByZXF1aXJlKCcuL19nZXRSYXdUYWcnKSxcbiAgICBvYmplY3RUb1N0cmluZyA9IHJlcXVpcmUoJy4vX29iamVjdFRvU3RyaW5nJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBudWxsVGFnID0gJ1tvYmplY3QgTnVsbF0nLFxuICAgIHVuZGVmaW5lZFRhZyA9ICdbb2JqZWN0IFVuZGVmaW5lZF0nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZFRhZyA6IG51bGxUYWc7XG4gIH1cbiAgcmV0dXJuIChzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpKVxuICAgID8gZ2V0UmF3VGFnKHZhbHVlKVxuICAgIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VHZXRUYWc7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/_baseGetTag.js\n");

/***/ }),

/***/ "./node_modules/lodash/_baseIsArguments.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_baseIsArguments.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ \"./node_modules/lodash/_baseGetTag.js\"),\n    isObjectLike = __webpack_require__(/*! ./isObjectLike */ \"./node_modules/lodash/isObjectLike.js\");\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\nmodule.exports = baseIsArguments;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNBcmd1bWVudHMuanM/MjUzYyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUIsbUJBQU8sQ0FBQywyREFBZTtBQUN4QyxtQkFBbUIsbUJBQU8sQ0FBQyw2REFBZ0I7O0FBRTNDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNBcmd1bWVudHMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzQXJndW1lbnRzYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0FyZ3VtZW50cyh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBhcmdzVGFnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc0FyZ3VtZW50cztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/_baseIsArguments.js\n");

/***/ }),

/***/ "./node_modules/lodash/_baseIsNative.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_baseIsNative.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var isFunction = __webpack_require__(/*! ./isFunction */ \"./node_modules/lodash/isFunction.js\"),\n    isMasked = __webpack_require__(/*! ./_isMasked */ \"./node_modules/lodash/_isMasked.js\"),\n    isObject = __webpack_require__(/*! ./isObject */ \"./node_modules/lodash/isObject.js\"),\n    toSource = __webpack_require__(/*! ./_toSource */ \"./node_modules/lodash/_toSource.js\");\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\nmodule.exports = baseIsNative;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNOYXRpdmUuanM/MzRhYyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUIsbUJBQU8sQ0FBQyx5REFBYztBQUN2QyxlQUFlLG1CQUFPLENBQUMsdURBQWE7QUFDcEMsZUFBZSxtQkFBTyxDQUFDLHFEQUFZO0FBQ25DLGVBQWUsbUJBQU8sQ0FBQyx1REFBYTs7QUFFcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0M7O0FBRXBDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxFQUFFO0FBQ2IsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc05hdGl2ZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBpc0Z1bmN0aW9uID0gcmVxdWlyZSgnLi9pc0Z1bmN0aW9uJyksXG4gICAgaXNNYXNrZWQgPSByZXF1aXJlKCcuL19pc01hc2tlZCcpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIHRvU291cmNlID0gcmVxdWlyZSgnLi9fdG9Tb3VyY2UnKTtcblxuLyoqXG4gKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgXG4gKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXBhdHRlcm5zKS5cbiAqL1xudmFyIHJlUmVnRXhwQ2hhciA9IC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGhvc3QgY29uc3RydWN0b3JzIChTYWZhcmkpLiAqL1xudmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaWYgYSBtZXRob2QgaXMgbmF0aXZlLiAqL1xudmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgZnVuY1RvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csICckMS4qPycpICsgJyQnXG4pO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmF0aXZlYCB3aXRob3V0IGJhZCBzaGltIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc05hdGl2ZSh2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCBpc01hc2tlZCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHBhdHRlcm4gPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHJlSXNOYXRpdmUgOiByZUlzSG9zdEN0b3I7XG4gIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNOYXRpdmU7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/_baseIsNative.js\n");

/***/ }),

/***/ "./node_modules/lodash/_baseIsTypedArray.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash/_baseIsTypedArray.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ \"./node_modules/lodash/_baseGetTag.js\"),\n    isLength = __webpack_require__(/*! ./isLength */ \"./node_modules/lodash/isLength.js\"),\n    isObjectLike = __webpack_require__(/*! ./isObjectLike */ \"./node_modules/lodash/isObjectLike.js\");\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\nmodule.exports = baseIsTypedArray;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNUeXBlZEFycmF5LmpzPzc0M2YiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCLG1CQUFPLENBQUMsMkRBQWU7QUFDeEMsZUFBZSxtQkFBTyxDQUFDLHFEQUFZO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLDZEQUFnQjs7QUFFM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsRUFBRTtBQUNiLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzVHlwZWRBcnJheS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzTGVuZ3RoID0gcmVxdWlyZSgnLi9pc0xlbmd0aCcpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuICAgIGJvb2xUYWcgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJztcblxudmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XScsXG4gICAgZmxvYXQzMlRhZyA9ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgIGZsb2F0NjRUYWcgPSAnW29iamVjdCBGbG9hdDY0QXJyYXldJyxcbiAgICBpbnQ4VGFnID0gJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgaW50MTZUYWcgPSAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgaW50MzJUYWcgPSAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgdWludDhUYWcgPSAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgdWludDhDbGFtcGVkVGFnID0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICB1aW50MTZUYWcgPSAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgIHVpbnQzMlRhZyA9ICdbb2JqZWN0IFVpbnQzMkFycmF5XSc7XG5cbi8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIG9mIHR5cGVkIGFycmF5cy4gKi9cbnZhciB0eXBlZEFycmF5VGFncyA9IHt9O1xudHlwZWRBcnJheVRhZ3NbZmxvYXQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1tmbG9hdDY0VGFnXSA9XG50eXBlZEFycmF5VGFnc1tpbnQ4VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2ludDE2VGFnXSA9XG50eXBlZEFycmF5VGFnc1tpbnQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50OFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbdWludDhDbGFtcGVkVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQxNlRhZ10gPVxudHlwZWRBcnJheVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG50eXBlZEFycmF5VGFnc1thcmdzVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2FycmF5VGFnXSA9XG50eXBlZEFycmF5VGFnc1thcnJheUJ1ZmZlclRhZ10gPSB0eXBlZEFycmF5VGFnc1tib29sVGFnXSA9XG50eXBlZEFycmF5VGFnc1tkYXRhVmlld1RhZ10gPSB0eXBlZEFycmF5VGFnc1tkYXRlVGFnXSA9XG50eXBlZEFycmF5VGFnc1tlcnJvclRhZ10gPSB0eXBlZEFycmF5VGFnc1tmdW5jVGFnXSA9XG50eXBlZEFycmF5VGFnc1ttYXBUYWddID0gdHlwZWRBcnJheVRhZ3NbbnVtYmVyVGFnXSA9XG50eXBlZEFycmF5VGFnc1tvYmplY3RUYWddID0gdHlwZWRBcnJheVRhZ3NbcmVnZXhwVGFnXSA9XG50eXBlZEFycmF5VGFnc1tzZXRUYWddID0gdHlwZWRBcnJheVRhZ3Nbc3RyaW5nVGFnXSA9XG50eXBlZEFycmF5VGFnc1t3ZWFrTWFwVGFnXSA9IGZhbHNlO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzVHlwZWRBcnJheWAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNUeXBlZEFycmF5KHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmXG4gICAgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhIXR5cGVkQXJyYXlUYWdzW2Jhc2VHZXRUYWcodmFsdWUpXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNUeXBlZEFycmF5O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/_baseIsTypedArray.js\n");

/***/ }),

/***/ "./node_modules/lodash/_baseKeysIn.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseKeysIn.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var isObject = __webpack_require__(/*! ./isObject */ \"./node_modules/lodash/isObject.js\"),\n    isPrototype = __webpack_require__(/*! ./_isPrototype */ \"./node_modules/lodash/_isPrototype.js\"),\n    nativeKeysIn = __webpack_require__(/*! ./_nativeKeysIn */ \"./node_modules/lodash/_nativeKeysIn.js\");\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeysIn(object) {\n  if (!isObject(object)) {\n    return nativeKeysIn(object);\n  }\n  var isProto = isPrototype(object),\n      result = [];\n\n  for (var key in object) {\n    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseKeysIn;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlS2V5c0luLmpzPzQxYzMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZUFBZSxtQkFBTyxDQUFDLHFEQUFZO0FBQ25DLGtCQUFrQixtQkFBTyxDQUFDLDZEQUFnQjtBQUMxQyxtQkFBbUIsbUJBQU8sQ0FBQywrREFBaUI7O0FBRTVDO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixhQUFhLE1BQU07QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlS2V5c0luLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIGlzUHJvdG90eXBlID0gcmVxdWlyZSgnLi9faXNQcm90b3R5cGUnKSxcbiAgICBuYXRpdmVLZXlzSW4gPSByZXF1aXJlKCcuL19uYXRpdmVLZXlzSW4nKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzSW5gIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYmFzZUtleXNJbihvYmplY3QpIHtcbiAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgcmV0dXJuIG5hdGl2ZUtleXNJbihvYmplY3QpO1xuICB9XG4gIHZhciBpc1Byb3RvID0gaXNQcm90b3R5cGUob2JqZWN0KSxcbiAgICAgIHJlc3VsdCA9IFtdO1xuXG4gIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICBpZiAoIShrZXkgPT0gJ2NvbnN0cnVjdG9yJyAmJiAoaXNQcm90byB8fCAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSkge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlS2V5c0luO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/_baseKeysIn.js\n");

/***/ }),

/***/ "./node_modules/lodash/_baseRest.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_baseRest.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var identity = __webpack_require__(/*! ./identity */ \"./node_modules/lodash/identity.js\"),\n    overRest = __webpack_require__(/*! ./_overRest */ \"./node_modules/lodash/_overRest.js\"),\n    setToString = __webpack_require__(/*! ./_setToString */ \"./node_modules/lodash/_setToString.js\");\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  return setToString(overRest(func, start, identity), func + '');\n}\n\nmodule.exports = baseRest;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlUmVzdC5qcz8xMDBlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGVBQWUsbUJBQU8sQ0FBQyxxREFBWTtBQUNuQyxlQUFlLG1CQUFPLENBQUMsdURBQWE7QUFDcEMsa0JBQWtCLG1CQUFPLENBQUMsNkRBQWdCOztBQUUxQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQixXQUFXLE9BQU87QUFDbEIsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVJlc3QuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaWRlbnRpdHkgPSByZXF1aXJlKCcuL2lkZW50aXR5JyksXG4gICAgb3ZlclJlc3QgPSByZXF1aXJlKCcuL19vdmVyUmVzdCcpLFxuICAgIHNldFRvU3RyaW5nID0gcmVxdWlyZSgnLi9fc2V0VG9TdHJpbmcnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yZXN0YCB3aGljaCBkb2Vzbid0IHZhbGlkYXRlIG9yIGNvZXJjZSBhcmd1bWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVJlc3QoZnVuYywgc3RhcnQpIHtcbiAgcmV0dXJuIHNldFRvU3RyaW5nKG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCBpZGVudGl0eSksIGZ1bmMgKyAnJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVJlc3Q7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/_baseRest.js\n");

/***/ }),

/***/ "./node_modules/lodash/_baseSetToString.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_baseSetToString.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var constant = __webpack_require__(/*! ./constant */ \"./node_modules/lodash/constant.js\"),\n    defineProperty = __webpack_require__(/*! ./_defineProperty */ \"./node_modules/lodash/_defineProperty.js\"),\n    identity = __webpack_require__(/*! ./identity */ \"./node_modules/lodash/identity.js\");\n\n/**\n * The base implementation of `setToString` without support for hot loop shorting.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar baseSetToString = !defineProperty ? identity : function(func, string) {\n  return defineProperty(func, 'toString', {\n    'configurable': true,\n    'enumerable': false,\n    'value': constant(string),\n    'writable': true\n  });\n};\n\nmodule.exports = baseSetToString;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlU2V0VG9TdHJpbmcuanM/YTQ1NCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxlQUFlLG1CQUFPLENBQUMscURBQVk7QUFDbkMscUJBQXFCLG1CQUFPLENBQUMsbUVBQW1CO0FBQ2hELGVBQWUsbUJBQU8sQ0FBQyxxREFBWTs7QUFFbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEIsV0FBVyxTQUFTO0FBQ3BCLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VTZXRUb1N0cmluZy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBjb25zdGFudCA9IHJlcXVpcmUoJy4vY29uc3RhbnQnKSxcbiAgICBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2RlZmluZVByb3BlcnR5JyksXG4gICAgaWRlbnRpdHkgPSByZXF1aXJlKCcuL2lkZW50aXR5Jyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYHNldFRvU3RyaW5nYCB3aXRob3V0IHN1cHBvcnQgZm9yIGhvdCBsb29wIHNob3J0aW5nLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdHJpbmcgVGhlIGB0b1N0cmluZ2AgcmVzdWx0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAqL1xudmFyIGJhc2VTZXRUb1N0cmluZyA9ICFkZWZpbmVQcm9wZXJ0eSA/IGlkZW50aXR5IDogZnVuY3Rpb24oZnVuYywgc3RyaW5nKSB7XG4gIHJldHVybiBkZWZpbmVQcm9wZXJ0eShmdW5jLCAndG9TdHJpbmcnLCB7XG4gICAgJ2NvbmZpZ3VyYWJsZSc6IHRydWUsXG4gICAgJ2VudW1lcmFibGUnOiBmYWxzZSxcbiAgICAndmFsdWUnOiBjb25zdGFudChzdHJpbmcpLFxuICAgICd3cml0YWJsZSc6IHRydWVcbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VTZXRUb1N0cmluZztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/_baseSetToString.js\n");

/***/ }),

/***/ "./node_modules/lodash/_baseTimes.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseTimes.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\nmodule.exports = baseTimes;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlVGltZXMuanM/NTBkOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsU0FBUztBQUNwQixhQUFhLE1BQU07QUFDbkI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VUaW1lcy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udGltZXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kc1xuICogb3IgbWF4IGFycmF5IGxlbmd0aCBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICovXG5mdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShuKTtcblxuICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoaW5kZXgpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVRpbWVzO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/_baseTimes.js\n");

/***/ }),

/***/ "./node_modules/lodash/_baseUnary.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseUnary.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\nmodule.exports = baseUnary;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlVW5hcnkuanM/YjA0NyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQixhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVVuYXJ5LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmFyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBzdG9yaW5nIG1ldGFkYXRhLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVVuYXJ5KGZ1bmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmModmFsdWUpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VVbmFyeTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/_baseUnary.js\n");

/***/ }),

/***/ "./node_modules/lodash/_coreJsData.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_coreJsData.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var root = __webpack_require__(/*! ./_root */ \"./node_modules/lodash/_root.js\");\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\nmodule.exports = coreJsData;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jb3JlSnNEYXRhLmpzP2RhMDMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxtQkFBTyxDQUFDLCtDQUFTOztBQUU1QjtBQUNBOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY29yZUpzRGF0YS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb3ZlcnJlYWNoaW5nIGNvcmUtanMgc2hpbXMuICovXG52YXIgY29yZUpzRGF0YSA9IHJvb3RbJ19fY29yZS1qc19zaGFyZWRfXyddO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvcmVKc0RhdGE7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/_coreJsData.js\n");

/***/ }),

/***/ "./node_modules/lodash/_defineProperty.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_defineProperty.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var getNative = __webpack_require__(/*! ./_getNative */ \"./node_modules/lodash/_getNative.js\");\n\nvar defineProperty = (function() {\n  try {\n    var func = getNative(Object, 'defineProperty');\n    func({}, '', {});\n    return func;\n  } catch (e) {}\n}());\n\nmodule.exports = defineProperty;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19kZWZpbmVQcm9wZXJ0eS5qcz8zYjRhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGdCQUFnQixtQkFBTyxDQUFDLHlEQUFjOztBQUV0QztBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQSxHQUFHO0FBQ0gsQ0FBQzs7QUFFRCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2RlZmluZVByb3BlcnR5LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpO1xuXG52YXIgZGVmaW5lUHJvcGVydHkgPSAoZnVuY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgdmFyIGZ1bmMgPSBnZXROYXRpdmUoT2JqZWN0LCAnZGVmaW5lUHJvcGVydHknKTtcbiAgICBmdW5jKHt9LCAnJywge30pO1xuICAgIHJldHVybiBmdW5jO1xuICB9IGNhdGNoIChlKSB7fVxufSgpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZpbmVQcm9wZXJ0eTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/_defineProperty.js\n");

/***/ }),

/***/ "./node_modules/lodash/_freeGlobal.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_freeGlobal.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19mcmVlR2xvYmFsLmpzPzU4NWEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFFQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2ZyZWVHbG9iYWwuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZyZWVHbG9iYWw7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/_freeGlobal.js\n");

/***/ }),

/***/ "./node_modules/lodash/_getNative.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_getNative.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseIsNative = __webpack_require__(/*! ./_baseIsNative */ \"./node_modules/lodash/_baseIsNative.js\"),\n    getValue = __webpack_require__(/*! ./_getValue */ \"./node_modules/lodash/_getValue.js\");\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\nmodule.exports = getNative;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXROYXRpdmUuanM/MGIwNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxtQkFBbUIsbUJBQU8sQ0FBQywrREFBaUI7QUFDNUMsZUFBZSxtQkFBTyxDQUFDLHVEQUFhOztBQUVwQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsYUFBYSxFQUFFO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldE5hdGl2ZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBiYXNlSXNOYXRpdmUgPSByZXF1aXJlKCcuL19iYXNlSXNOYXRpdmUnKSxcbiAgICBnZXRWYWx1ZSA9IHJlcXVpcmUoJy4vX2dldFZhbHVlJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZCB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuXG4gKi9cbmZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkge1xuICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShvYmplY3QsIGtleSk7XG4gIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0TmF0aXZlO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/_getNative.js\n");

/***/ }),

/***/ "./node_modules/lodash/_getRawTag.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_getRawTag.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var Symbol = __webpack_require__(/*! ./_Symbol */ \"./node_modules/lodash/_Symbol.js\");\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRSYXdUYWcuanM/MDBmZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxhQUFhLG1CQUFPLENBQUMsbURBQVc7O0FBRWhDO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsRUFBRTtBQUNiLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRSYXdUYWcuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gIHRyeSB7XG4gICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICBpZiAodW5tYXNrZWQpIHtcbiAgICBpZiAoaXNPd24pIHtcbiAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRSYXdUYWc7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/_getRawTag.js\n");

/***/ }),

/***/ "./node_modules/lodash/_getValue.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_getValue.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\nmodule.exports = getValue;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRWYWx1ZS5qcz8zNjk4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixhQUFhLEVBQUU7QUFDZjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFZhbHVlLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZ2V0VmFsdWUob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0VmFsdWU7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/_getValue.js\n");

/***/ }),

/***/ "./node_modules/lodash/_isIndex.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_isIndex.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\nmodule.exports = isIndex;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc0luZGV4LmpzP2MwOTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxFQUFFO0FBQ2IsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNJbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgdW5zaWduZWQgaW50ZWdlciB2YWx1ZXMuICovXG52YXIgcmVJc1VpbnQgPSAvXig/OjB8WzEtOV1cXGQqKSQvO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBpbmRleC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD1NQVhfU0FGRV9JTlRFR0VSXSBUaGUgdXBwZXIgYm91bmRzIG9mIGEgdmFsaWQgaW5kZXguXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGluZGV4LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsIGxlbmd0aCkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgbGVuZ3RoID0gbGVuZ3RoID09IG51bGwgPyBNQVhfU0FGRV9JTlRFR0VSIDogbGVuZ3RoO1xuXG4gIHJldHVybiAhIWxlbmd0aCAmJlxuICAgICh0eXBlID09ICdudW1iZXInIHx8XG4gICAgICAodHlwZSAhPSAnc3ltYm9sJyAmJiByZUlzVWludC50ZXN0KHZhbHVlKSkpICYmXG4gICAgICAgICh2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDwgbGVuZ3RoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0luZGV4O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/_isIndex.js\n");

/***/ }),

/***/ "./node_modules/lodash/_isIterateeCall.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_isIterateeCall.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var eq = __webpack_require__(/*! ./eq */ \"./node_modules/lodash/eq.js\"),\n    isArrayLike = __webpack_require__(/*! ./isArrayLike */ \"./node_modules/lodash/isArrayLike.js\"),\n    isIndex = __webpack_require__(/*! ./_isIndex */ \"./node_modules/lodash/_isIndex.js\"),\n    isObject = __webpack_require__(/*! ./isObject */ \"./node_modules/lodash/isObject.js\");\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq(object[index], value);\n  }\n  return false;\n}\n\nmodule.exports = isIterateeCall;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc0l0ZXJhdGVlQ2FsbC5qcz85YWZmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFNBQVMsbUJBQU8sQ0FBQyx5Q0FBTTtBQUN2QixrQkFBa0IsbUJBQU8sQ0FBQywyREFBZTtBQUN6QyxjQUFjLG1CQUFPLENBQUMscURBQVk7QUFDbEMsZUFBZSxtQkFBTyxDQUFDLHFEQUFZOztBQUVuQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsRUFBRTtBQUNiLFdBQVcsRUFBRTtBQUNiLFdBQVcsRUFBRTtBQUNiLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc0l0ZXJhdGVlQ2FsbC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBlcSA9IHJlcXVpcmUoJy4vZXEnKSxcbiAgICBpc0FycmF5TGlrZSA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2UnKSxcbiAgICBpc0luZGV4ID0gcmVxdWlyZSgnLi9faXNJbmRleCcpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpO1xuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSB2YWx1ZSBhcmd1bWVudC5cbiAqIEBwYXJhbSB7Kn0gaW5kZXggVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBpbmRleCBvciBrZXkgYXJndW1lbnQuXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIG9iamVjdCBhcmd1bWVudC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0l0ZXJhdGVlQ2FsbCh2YWx1ZSwgaW5kZXgsIG9iamVjdCkge1xuICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHR5cGUgPSB0eXBlb2YgaW5kZXg7XG4gIGlmICh0eXBlID09ICdudW1iZXInXG4gICAgICAgID8gKGlzQXJyYXlMaWtlKG9iamVjdCkgJiYgaXNJbmRleChpbmRleCwgb2JqZWN0Lmxlbmd0aCkpXG4gICAgICAgIDogKHR5cGUgPT0gJ3N0cmluZycgJiYgaW5kZXggaW4gb2JqZWN0KVxuICAgICAgKSB7XG4gICAgcmV0dXJuIGVxKG9iamVjdFtpbmRleF0sIHZhbHVlKTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNJdGVyYXRlZUNhbGw7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/_isIterateeCall.js\n");

/***/ }),

/***/ "./node_modules/lodash/_isMasked.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_isMasked.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var coreJsData = __webpack_require__(/*! ./_coreJsData */ \"./node_modules/lodash/_coreJsData.js\");\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\nmodule.exports = isMasked;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc01hc2tlZC5qcz8xMzY4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlCQUFpQixtQkFBTyxDQUFDLDJEQUFlOztBQUV4QztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNNYXNrZWQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY29yZUpzRGF0YSA9IHJlcXVpcmUoJy4vX2NvcmVKc0RhdGEnKTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1ldGhvZHMgbWFzcXVlcmFkaW5nIGFzIG5hdGl2ZS4gKi9cbnZhciBtYXNrU3JjS2V5ID0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdWlkID0gL1teLl0rJC8uZXhlYyhjb3JlSnNEYXRhICYmIGNvcmVKc0RhdGEua2V5cyAmJiBjb3JlSnNEYXRhLmtleXMuSUVfUFJPVE8gfHwgJycpO1xuICByZXR1cm4gdWlkID8gKCdTeW1ib2woc3JjKV8xLicgKyB1aWQpIDogJyc7XG59KCkpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGl0cyBzb3VyY2UgbWFza2VkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2VkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzTWFza2VkKGZ1bmMpIHtcbiAgcmV0dXJuICEhbWFza1NyY0tleSAmJiAobWFza1NyY0tleSBpbiBmdW5jKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc01hc2tlZDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/_isMasked.js\n");

/***/ }),

/***/ "./node_modules/lodash/_isPrototype.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_isPrototype.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\nmodule.exports = isPrototype;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc1Byb3RvdHlwZS5qcz9lYWM1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzUHJvdG90eXBlLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBwcm90b3R5cGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7XG4gIHZhciBDdG9yID0gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IsXG4gICAgICBwcm90byA9ICh0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IucHJvdG90eXBlKSB8fCBvYmplY3RQcm90bztcblxuICByZXR1cm4gdmFsdWUgPT09IHByb3RvO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzUHJvdG90eXBlO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/_isPrototype.js\n");

/***/ }),

/***/ "./node_modules/lodash/_nativeKeysIn.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_nativeKeysIn.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * This function is like\n * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * except that it includes inherited enumerable properties.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction nativeKeysIn(object) {\n  var result = [];\n  if (object != null) {\n    for (var key in Object(object)) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = nativeKeysIn;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19uYXRpdmVLZXlzSW4uanM/ZWM4YyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsYUFBYSxNQUFNO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbmF0aXZlS2V5c0luLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2VcbiAqIFtgT2JqZWN0LmtleXNgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAqIGV4Y2VwdCB0aGF0IGl0IGluY2x1ZGVzIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIG5hdGl2ZUtleXNJbihvYmplY3QpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBpZiAob2JqZWN0ICE9IG51bGwpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmF0aXZlS2V5c0luO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/_nativeKeysIn.js\n");

/***/ }),

/***/ "./node_modules/lodash/_nodeUtil.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_nodeUtil.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {var freeGlobal = __webpack_require__(/*! ./_freeGlobal */ \"./node_modules/lodash/_freeGlobal.js\");\n\n/** Detect free variable `exports`. */\nvar freeExports =  true && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    // Use `util.types` for Node.js 10+.\n    var types = freeModule && freeModule.require && freeModule.require('util').types;\n\n    if (types) {\n      return types;\n    }\n\n    // Legacy `process.binding('util')` for Node.js < 10.\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\nmodule.exports = nodeUtil;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19ub2RlVXRpbC5qcz85OWQzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLCtEQUFpQixtQkFBTyxDQUFDLDJEQUFlOztBQUV4QztBQUNBLGtCQUFrQixLQUEwQjs7QUFFNUM7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDOztBQUVEIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbm9kZVV0aWwuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZnJlZUdsb2JhbCA9IHJlcXVpcmUoJy4vX2ZyZWVHbG9iYWwnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHByb2Nlc3NgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlUHJvY2VzcyA9IG1vZHVsZUV4cG9ydHMgJiYgZnJlZUdsb2JhbC5wcm9jZXNzO1xuXG4vKiogVXNlZCB0byBhY2Nlc3MgZmFzdGVyIE5vZGUuanMgaGVscGVycy4gKi9cbnZhciBub2RlVXRpbCA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICAvLyBVc2UgYHV0aWwudHlwZXNgIGZvciBOb2RlLmpzIDEwKy5cbiAgICB2YXIgdHlwZXMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUucmVxdWlyZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUoJ3V0aWwnKS50eXBlcztcblxuICAgIGlmICh0eXBlcykge1xuICAgICAgcmV0dXJuIHR5cGVzO1xuICAgIH1cblxuICAgIC8vIExlZ2FjeSBgcHJvY2Vzcy5iaW5kaW5nKCd1dGlsJylgIGZvciBOb2RlLmpzIDwgMTAuXG4gICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpO1xuICB9IGNhdGNoIChlKSB7fVxufSgpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBub2RlVXRpbDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/_nodeUtil.js\n");

/***/ }),

/***/ "./node_modules/lodash/_objectToString.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_objectToString.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19vYmplY3RUb1N0cmluZy5qcz8yOWYzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxFQUFFO0FBQ2IsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fb2JqZWN0VG9TdHJpbmcuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvYmplY3RUb1N0cmluZztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/_objectToString.js\n");

/***/ }),

/***/ "./node_modules/lodash/_overRest.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_overRest.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var apply = __webpack_require__(/*! ./_apply */ \"./node_modules/lodash/_apply.js\");\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\nmodule.exports = overRest;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19vdmVyUmVzdC5qcz8yMjg2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksbUJBQU8sQ0FBQyxpREFBVTs7QUFFOUI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQixXQUFXLE9BQU87QUFDbEIsV0FBVyxTQUFTO0FBQ3BCLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9sb2Rhc2gvX292ZXJSZXN0LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwcGx5ID0gcmVxdWlyZSgnLi9fYXBwbHknKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZU1heCA9IE1hdGgubWF4O1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVJlc3RgIHdoaWNoIHRyYW5zZm9ybXMgdGhlIHJlc3QgYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIHJlc3QgYXJyYXkgdHJhbnNmb3JtLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCB0cmFuc2Zvcm0pIHtcbiAgc3RhcnQgPSBuYXRpdmVNYXgoc3RhcnQgPT09IHVuZGVmaW5lZCA/IChmdW5jLmxlbmd0aCAtIDEpIDogc3RhcnQsIDApO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChhcmdzLmxlbmd0aCAtIHN0YXJ0LCAwKSxcbiAgICAgICAgYXJyYXkgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGFycmF5W2luZGV4XSA9IGFyZ3Nbc3RhcnQgKyBpbmRleF07XG4gICAgfVxuICAgIGluZGV4ID0gLTE7XG4gICAgdmFyIG90aGVyQXJncyA9IEFycmF5KHN0YXJ0ICsgMSk7XG4gICAgd2hpbGUgKCsraW5kZXggPCBzdGFydCkge1xuICAgICAgb3RoZXJBcmdzW2luZGV4XSA9IGFyZ3NbaW5kZXhdO1xuICAgIH1cbiAgICBvdGhlckFyZ3Nbc3RhcnRdID0gdHJhbnNmb3JtKGFycmF5KTtcbiAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgb3RoZXJBcmdzKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvdmVyUmVzdDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/_overRest.js\n");

/***/ }),

/***/ "./node_modules/lodash/_root.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/_root.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var freeGlobal = __webpack_require__(/*! ./_freeGlobal */ \"./node_modules/lodash/_freeGlobal.js\");\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19yb290LmpzPzJiM2UiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCLG1CQUFPLENBQUMsMkRBQWU7O0FBRXhDO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3Jvb3QuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZnJlZUdsb2JhbCA9IHJlcXVpcmUoJy4vX2ZyZWVHbG9iYWwnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJvb3Q7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/_root.js\n");

/***/ }),

/***/ "./node_modules/lodash/_setToString.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_setToString.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseSetToString = __webpack_require__(/*! ./_baseSetToString */ \"./node_modules/lodash/_baseSetToString.js\"),\n    shortOut = __webpack_require__(/*! ./_shortOut */ \"./node_modules/lodash/_shortOut.js\");\n\n/**\n * Sets the `toString` method of `func` to return `string`.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar setToString = shortOut(baseSetToString);\n\nmodule.exports = setToString;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zZXRUb1N0cmluZy5qcz9jMWM5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHNCQUFzQixtQkFBTyxDQUFDLHFFQUFvQjtBQUNsRCxlQUFlLG1CQUFPLENBQUMsdURBQWE7O0FBRXBDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsU0FBUztBQUNwQixhQUFhLFNBQVM7QUFDdEI7QUFDQTs7QUFFQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3NldFRvU3RyaW5nLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGJhc2VTZXRUb1N0cmluZyA9IHJlcXVpcmUoJy4vX2Jhc2VTZXRUb1N0cmluZycpLFxuICAgIHNob3J0T3V0ID0gcmVxdWlyZSgnLi9fc2hvcnRPdXQnKTtcblxuLyoqXG4gKiBTZXRzIHRoZSBgdG9TdHJpbmdgIG1ldGhvZCBvZiBgZnVuY2AgdG8gcmV0dXJuIGBzdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdHJpbmcgVGhlIGB0b1N0cmluZ2AgcmVzdWx0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAqL1xudmFyIHNldFRvU3RyaW5nID0gc2hvcnRPdXQoYmFzZVNldFRvU3RyaW5nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBzZXRUb1N0cmluZztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/_setToString.js\n");

/***/ }),

/***/ "./node_modules/lodash/_shortOut.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_shortOut.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/** Used to detect hot functions by number of calls within a span of milliseconds. */\nvar HOT_COUNT = 800,\n    HOT_SPAN = 16;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeNow = Date.now;\n\n/**\n * Creates a function that'll short out and invoke `identity` instead\n * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n * milliseconds.\n *\n * @private\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new shortable function.\n */\nfunction shortOut(func) {\n  var count = 0,\n      lastCalled = 0;\n\n  return function() {\n    var stamp = nativeNow(),\n        remaining = HOT_SPAN - (stamp - lastCalled);\n\n    lastCalled = stamp;\n    if (remaining > 0) {\n      if (++count >= HOT_COUNT) {\n        return arguments[0];\n      }\n    } else {\n      count = 0;\n    }\n    return func.apply(undefined, arguments);\n  };\n}\n\nmodule.exports = shortOut;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zaG9ydE91dC5qcz9mM2MxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQixhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3Nob3J0T3V0LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIFVzZWQgdG8gZGV0ZWN0IGhvdCBmdW5jdGlvbnMgYnkgbnVtYmVyIG9mIGNhbGxzIHdpdGhpbiBhIHNwYW4gb2YgbWlsbGlzZWNvbmRzLiAqL1xudmFyIEhPVF9DT1VOVCA9IDgwMCxcbiAgICBIT1RfU1BBTiA9IDE2O1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlTm93ID0gRGF0ZS5ub3c7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQnbGwgc2hvcnQgb3V0IGFuZCBpbnZva2UgYGlkZW50aXR5YCBpbnN0ZWFkXG4gKiBvZiBgZnVuY2Agd2hlbiBpdCdzIGNhbGxlZCBgSE9UX0NPVU5UYCBvciBtb3JlIHRpbWVzIGluIGBIT1RfU1BBTmBcbiAqIG1pbGxpc2Vjb25kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzaG9ydGFibGUgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHNob3J0T3V0KGZ1bmMpIHtcbiAgdmFyIGNvdW50ID0gMCxcbiAgICAgIGxhc3RDYWxsZWQgPSAwO1xuXG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RhbXAgPSBuYXRpdmVOb3coKSxcbiAgICAgICAgcmVtYWluaW5nID0gSE9UX1NQQU4gLSAoc3RhbXAgLSBsYXN0Q2FsbGVkKTtcblxuICAgIGxhc3RDYWxsZWQgPSBzdGFtcDtcbiAgICBpZiAocmVtYWluaW5nID4gMCkge1xuICAgICAgaWYgKCsrY291bnQgPj0gSE9UX0NPVU5UKSB7XG4gICAgICAgIHJldHVybiBhcmd1bWVudHNbMF07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvdW50ID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmMuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3J0T3V0O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/_shortOut.js\n");

/***/ }),

/***/ "./node_modules/lodash/_toSource.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_toSource.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/** Used for built-in method references. */\nvar funcProto = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\nmodule.exports = toSource;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL190b1NvdXJjZS5qcz9kYzU3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3RvU291cmNlLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgZnVuY2AgdG8gaXRzIHNvdXJjZSBjb2RlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuXG4gKi9cbmZ1bmN0aW9uIHRvU291cmNlKGZ1bmMpIHtcbiAgaWYgKGZ1bmMgIT0gbnVsbCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZnVuY1RvU3RyaW5nLmNhbGwoZnVuYyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIChmdW5jICsgJycpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvU291cmNlO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/_toSource.js\n");

/***/ }),

/***/ "./node_modules/lodash/constant.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/constant.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true\n */\nfunction constant(value) {\n  return function() {\n    return value;\n  };\n}\n\nmodule.exports = constant;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2NvbnN0YW50LmpzPzcyZjAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYixhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBLHdDQUF3QyxTQUFTO0FBQ2pEO0FBQ0E7QUFDQSxXQUFXLFNBQVMsR0FBRyxTQUFTO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9sb2Rhc2gvY29uc3RhbnQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYHZhbHVlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDIuNC4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmV0dXJuIGZyb20gdGhlIG5ldyBmdW5jdGlvbi5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbnN0YW50IGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0cyA9IF8udGltZXMoMiwgXy5jb25zdGFudCh7ICdhJzogMSB9KSk7XG4gKlxuICogY29uc29sZS5sb2cob2JqZWN0cyk7XG4gKiAvLyA9PiBbeyAnYSc6IDEgfSwgeyAnYSc6IDEgfV1cbiAqXG4gKiBjb25zb2xlLmxvZyhvYmplY3RzWzBdID09PSBvYmplY3RzWzFdKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gY29uc3RhbnQodmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb25zdGFudDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/constant.js\n");

/***/ }),

/***/ "./node_modules/lodash/defaults.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/defaults.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseRest = __webpack_require__(/*! ./_baseRest */ \"./node_modules/lodash/_baseRest.js\"),\n    eq = __webpack_require__(/*! ./eq */ \"./node_modules/lodash/eq.js\"),\n    isIterateeCall = __webpack_require__(/*! ./_isIterateeCall */ \"./node_modules/lodash/_isIterateeCall.js\"),\n    keysIn = __webpack_require__(/*! ./keysIn */ \"./node_modules/lodash/keysIn.js\");\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns own and inherited enumerable string keyed properties of source\n * objects to the destination object for all destination properties that\n * resolve to `undefined`. Source objects are applied from left to right.\n * Once a property is set, additional values of the same property are ignored.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.defaultsDeep\n * @example\n *\n * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n * // => { 'a': 1, 'b': 2 }\n */\nvar defaults = baseRest(function(object, sources) {\n  object = Object(object);\n\n  var index = -1;\n  var length = sources.length;\n  var guard = length > 2 ? sources[2] : undefined;\n\n  if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n    length = 1;\n  }\n\n  while (++index < length) {\n    var source = sources[index];\n    var props = keysIn(source);\n    var propsIndex = -1;\n    var propsLength = props.length;\n\n    while (++propsIndex < propsLength) {\n      var key = props[propsIndex];\n      var value = object[key];\n\n      if (value === undefined ||\n          (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n        object[key] = source[key];\n      }\n    }\n  }\n\n  return object;\n});\n\nmodule.exports = defaults;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2RlZmF1bHRzLmpzPzk1YWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZUFBZSxtQkFBTyxDQUFDLHVEQUFhO0FBQ3BDLFNBQVMsbUJBQU8sQ0FBQyx5Q0FBTTtBQUN2QixxQkFBcUIsbUJBQU8sQ0FBQyxtRUFBbUI7QUFDaEQsYUFBYSxtQkFBTyxDQUFDLGlEQUFVOztBQUUvQjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsVUFBVTtBQUNyQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0EsZUFBZSxTQUFTLEdBQUcsU0FBUyxHQUFHLFNBQVM7QUFDaEQsVUFBVTtBQUNWO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLENBQUM7O0FBRUQiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL2RlZmF1bHRzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGJhc2VSZXN0ID0gcmVxdWlyZSgnLi9fYmFzZVJlc3QnKSxcbiAgICBlcSA9IHJlcXVpcmUoJy4vZXEnKSxcbiAgICBpc0l0ZXJhdGVlQ2FsbCA9IHJlcXVpcmUoJy4vX2lzSXRlcmF0ZWVDYWxsJyksXG4gICAga2V5c0luID0gcmVxdWlyZSgnLi9rZXlzSW4nKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBBc3NpZ25zIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2Ygc291cmNlXG4gKiBvYmplY3RzIHRvIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QgZm9yIGFsbCBkZXN0aW5hdGlvbiBwcm9wZXJ0aWVzIHRoYXRcbiAqIHJlc29sdmUgdG8gYHVuZGVmaW5lZGAuIFNvdXJjZSBvYmplY3RzIGFyZSBhcHBsaWVkIGZyb20gbGVmdCB0byByaWdodC5cbiAqIE9uY2UgYSBwcm9wZXJ0eSBpcyBzZXQsIGFkZGl0aW9uYWwgdmFsdWVzIG9mIHRoZSBzYW1lIHByb3BlcnR5IGFyZSBpZ25vcmVkLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqIEBzZWUgXy5kZWZhdWx0c0RlZXBcbiAqIEBleGFtcGxlXG4gKlxuICogXy5kZWZhdWx0cyh7ICdhJzogMSB9LCB7ICdiJzogMiB9LCB7ICdhJzogMyB9KTtcbiAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICovXG52YXIgZGVmYXVsdHMgPSBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIHNvdXJjZXMpIHtcbiAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG5cbiAgdmFyIGluZGV4ID0gLTE7XG4gIHZhciBsZW5ndGggPSBzb3VyY2VzLmxlbmd0aDtcbiAgdmFyIGd1YXJkID0gbGVuZ3RoID4gMiA/IHNvdXJjZXNbMl0gOiB1bmRlZmluZWQ7XG5cbiAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHNvdXJjZXNbMF0sIHNvdXJjZXNbMV0sIGd1YXJkKSkge1xuICAgIGxlbmd0aCA9IDE7XG4gIH1cblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBzb3VyY2UgPSBzb3VyY2VzW2luZGV4XTtcbiAgICB2YXIgcHJvcHMgPSBrZXlzSW4oc291cmNlKTtcbiAgICB2YXIgcHJvcHNJbmRleCA9IC0xO1xuICAgIHZhciBwcm9wc0xlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgIHdoaWxlICgrK3Byb3BzSW5kZXggPCBwcm9wc0xlbmd0aCkge1xuICAgICAgdmFyIGtleSA9IHByb3BzW3Byb3BzSW5kZXhdO1xuICAgICAgdmFyIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgKGVxKHZhbHVlLCBvYmplY3RQcm90b1trZXldKSAmJiAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSB7XG4gICAgICAgIG9iamVjdFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9iamVjdDtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmF1bHRzO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/defaults.js\n");

/***/ }),

/***/ "./node_modules/lodash/eq.js":
/*!***********************************!*\
  !*** ./node_modules/lodash/eq.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\nmodule.exports = eq;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2VxLmpzPzk2MzgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxFQUFFO0FBQ2IsV0FBVyxFQUFFO0FBQ2IsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2xvZGFzaC9lcS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUGVyZm9ybXMgYVxuICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAqXG4gKiBfLmVxKG9iamVjdCwgb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKCdhJywgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKE5hTiwgTmFOKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gZXEodmFsdWUsIG90aGVyKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gb3RoZXIgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVxO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/eq.js\n");

/***/ }),

/***/ "./node_modules/lodash/identity.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/identity.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lkZW50aXR5LmpzP2NkOWQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYixhQUFhLEVBQUU7QUFDZjtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pZGVudGl0eS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZmlyc3QgYXJndW1lbnQgaXQgcmVjZWl2ZXMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgQW55IHZhbHVlLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gKlxuICogY29uc29sZS5sb2coXy5pZGVudGl0eShvYmplY3QpID09PSBvYmplY3QpO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBpZGVudGl0eSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaWRlbnRpdHk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/identity.js\n");

/***/ }),

/***/ "./node_modules/lodash/isArguments.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/isArguments.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseIsArguments = __webpack_require__(/*! ./_baseIsArguments */ \"./node_modules/lodash/_baseIsArguments.js\"),\n    isObjectLike = __webpack_require__(/*! ./isObjectLike */ \"./node_modules/lodash/isObjectLike.js\");\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\nmodule.exports = isArguments;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQXJndW1lbnRzLmpzP2QzNzAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCLG1CQUFPLENBQUMscUVBQW9CO0FBQ2xELG1CQUFtQixtQkFBTyxDQUFDLDZEQUFnQjs7QUFFM0M7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLGtCQUFrQixFQUFFO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsa0JBQWtCLEVBQUU7QUFDbEU7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FyZ3VtZW50cy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBiYXNlSXNBcmd1bWVudHMgPSByZXF1aXJlKCcuL19iYXNlSXNBcmd1bWVudHMnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhbiBgYXJndW1lbnRzYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICogIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcmd1bWVudHMgPSBiYXNlSXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPyBiYXNlSXNBcmd1bWVudHMgOiBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnY2FsbGVlJykgJiZcbiAgICAhcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0FyZ3VtZW50cztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/isArguments.js\n");

/***/ }),

/***/ "./node_modules/lodash/isArray.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/isArray.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQXJyYXkuanM/Njc0NyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsRUFBRTtBQUNiLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQXJyYXkuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0FycmF5O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/isArray.js\n");

/***/ }),

/***/ "./node_modules/lodash/isArrayLike.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/isArrayLike.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var isFunction = __webpack_require__(/*! ./isFunction */ \"./node_modules/lodash/isFunction.js\"),\n    isLength = __webpack_require__(/*! ./isLength */ \"./node_modules/lodash/isLength.js\");\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\nmodule.exports = isArrayLike;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQXJyYXlMaWtlLmpzPzMwYzkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCLG1CQUFPLENBQUMseURBQWM7QUFDdkMsZUFBZSxtQkFBTyxDQUFDLHFEQUFZOztBQUVuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcnJheUxpa2UuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaXNGdW5jdGlvbiA9IHJlcXVpcmUoJy4vaXNGdW5jdGlvbicpLFxuICAgIGlzTGVuZ3RoID0gcmVxdWlyZSgnLi9pc0xlbmd0aCcpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UuIEEgdmFsdWUgaXMgY29uc2lkZXJlZCBhcnJheS1saWtlIGlmIGl0J3NcbiAqIG5vdCBhIGZ1bmN0aW9uIGFuZCBoYXMgYSBgdmFsdWUubGVuZ3RoYCB0aGF0J3MgYW4gaW50ZWdlciBncmVhdGVyIHRoYW4gb3JcbiAqIGVxdWFsIHRvIGAwYCBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKCdhYmMnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICFpc0Z1bmN0aW9uKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0FycmF5TGlrZTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/isArrayLike.js\n");

/***/ }),

/***/ "./node_modules/lodash/isBuffer.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isBuffer.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {var root = __webpack_require__(/*! ./_root */ \"./node_modules/lodash/_root.js\"),\n    stubFalse = __webpack_require__(/*! ./stubFalse */ \"./node_modules/lodash/stubFalse.js\");\n\n/** Detect free variable `exports`. */\nvar freeExports =  true && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\nmodule.exports = isBuffer;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQnVmZmVyLmpzPzBkMjQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEseURBQVcsbUJBQU8sQ0FBQywrQ0FBUztBQUM1QixnQkFBZ0IsbUJBQU8sQ0FBQyx1REFBYTs7QUFFckM7QUFDQSxrQkFBa0IsS0FBMEI7O0FBRTVDO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0J1ZmZlci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpLFxuICAgIHN0dWJGYWxzZSA9IHJlcXVpcmUoJy4vc3R1YkZhbHNlJyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgQnVmZmVyID0gbW9kdWxlRXhwb3J0cyA/IHJvb3QuQnVmZmVyIDogdW5kZWZpbmVkO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlSXNCdWZmZXIgPSBCdWZmZXIgPyBCdWZmZXIuaXNCdWZmZXIgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjMuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0J1ZmZlcihuZXcgQnVmZmVyKDIpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQnVmZmVyKG5ldyBVaW50OEFycmF5KDIpKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0J1ZmZlciA9IG5hdGl2ZUlzQnVmZmVyIHx8IHN0dWJGYWxzZTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0J1ZmZlcjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/isBuffer.js\n");

/***/ }),

/***/ "./node_modules/lodash/isFunction.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/isFunction.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ \"./node_modules/lodash/_baseGetTag.js\"),\n    isObject = __webpack_require__(/*! ./isObject */ \"./node_modules/lodash/isObject.js\");\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nmodule.exports = isFunction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzRnVuY3Rpb24uanM/OTUyMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUIsbUJBQU8sQ0FBQywyREFBZTtBQUN4QyxlQUFlLG1CQUFPLENBQUMscURBQVk7O0FBRW5DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNGdW5jdGlvbi5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXN5bmNUYWcgPSAnW29iamVjdCBBc3luY0Z1bmN0aW9uXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICBwcm94eVRhZyA9ICdbb2JqZWN0IFByb3h5XSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0Z1bmN0aW9uKF8pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAvLyBpbiBTYWZhcmkgOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheXMgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy5cbiAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZyB8fCB0YWcgPT0gYXN5bmNUYWcgfHwgdGFnID09IHByb3h5VGFnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRnVuY3Rpb247XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/isFunction.js\n");

/***/ }),

/***/ "./node_modules/lodash/isLength.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isLength.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nmodule.exports = isLength;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzTGVuZ3RoLmpzP2IyMTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsRUFBRTtBQUNiLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzTGVuZ3RoLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTE7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGxlbmd0aC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGxlbmd0aCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzTGVuZ3RoKDMpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNMZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoSW5maW5pdHkpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKCczJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0xlbmd0aCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmXG4gICAgdmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTGVuZ3RoO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/isLength.js\n");

/***/ }),

/***/ "./node_modules/lodash/isObject.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isObject.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0LmpzPzFhOGMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxFQUFFO0FBQ2IsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc09iamVjdC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/lodash/isObject.js\n");

/***/ }),

/***/ "./node_modules/lodash/isObjectLike.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/isObjectLike.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0TGlrZS5qcz8xMzEwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc09iamVjdExpa2UuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc09iamVjdExpa2U7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/isObjectLike.js\n");

/***/ }),

/***/ "./node_modules/lodash/isTypedArray.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/isTypedArray.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseIsTypedArray = __webpack_require__(/*! ./_baseIsTypedArray */ \"./node_modules/lodash/_baseIsTypedArray.js\"),\n    baseUnary = __webpack_require__(/*! ./_baseUnary */ \"./node_modules/lodash/_baseUnary.js\"),\n    nodeUtil = __webpack_require__(/*! ./_nodeUtil */ \"./node_modules/lodash/_nodeUtil.js\");\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\nmodule.exports = isTypedArray;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzVHlwZWRBcnJheS5qcz83M2FjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHVCQUF1QixtQkFBTyxDQUFDLHVFQUFxQjtBQUNwRCxnQkFBZ0IsbUJBQU8sQ0FBQyx5REFBYztBQUN0QyxlQUFlLG1CQUFPLENBQUMsdURBQWE7O0FBRXBDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc1R5cGVkQXJyYXkuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYmFzZUlzVHlwZWRBcnJheSA9IHJlcXVpcmUoJy4vX2Jhc2VJc1R5cGVkQXJyYXknKSxcbiAgICBiYXNlVW5hcnkgPSByZXF1aXJlKCcuL19iYXNlVW5hcnknKSxcbiAgICBub2RlVXRpbCA9IHJlcXVpcmUoJy4vX25vZGVVdGlsJyk7XG5cbi8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG52YXIgbm9kZUlzVHlwZWRBcnJheSA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzVHlwZWRBcnJheTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgdHlwZWQgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzVHlwZWRBcnJheShuZXcgVWludDhBcnJheSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkoW10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzVHlwZWRBcnJheSA9IG5vZGVJc1R5cGVkQXJyYXkgPyBiYXNlVW5hcnkobm9kZUlzVHlwZWRBcnJheSkgOiBiYXNlSXNUeXBlZEFycmF5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzVHlwZWRBcnJheTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/isTypedArray.js\n");

/***/ }),

/***/ "./node_modules/lodash/keysIn.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/keysIn.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var arrayLikeKeys = __webpack_require__(/*! ./_arrayLikeKeys */ \"./node_modules/lodash/_arrayLikeKeys.js\"),\n    baseKeysIn = __webpack_require__(/*! ./_baseKeysIn */ \"./node_modules/lodash/_baseKeysIn.js\"),\n    isArrayLike = __webpack_require__(/*! ./isArrayLike */ \"./node_modules/lodash/isArrayLike.js\");\n\n/**\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n */\nfunction keysIn(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n}\n\nmodule.exports = keysIn;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL2tleXNJbi5qcz85OTM0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLG9CQUFvQixtQkFBTyxDQUFDLGlFQUFrQjtBQUM5QyxpQkFBaUIsbUJBQU8sQ0FBQywyREFBZTtBQUN4QyxrQkFBa0IsbUJBQU8sQ0FBQywyREFBZTs7QUFFekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsTUFBTTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL2tleXNJbi5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBhcnJheUxpa2VLZXlzID0gcmVxdWlyZSgnLi9fYXJyYXlMaWtlS2V5cycpLFxuICAgIGJhc2VLZXlzSW4gPSByZXF1aXJlKCcuL19iYXNlS2V5c0luJyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAqXG4gKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmtleXNJbihuZXcgRm9vKTtcbiAqIC8vID0+IFsnYScsICdiJywgJ2MnXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICovXG5mdW5jdGlvbiBrZXlzSW4ob2JqZWN0KSB7XG4gIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QsIHRydWUpIDogYmFzZUtleXNJbihvYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGtleXNJbjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/lodash/keysIn.js\n");

/***/ }),

/***/ "./node_modules/lodash/noop.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/noop.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * This method returns `undefined`.\n *\n * @static\n * @memberOf _\n * @since 2.3.0\n * @category Util\n * @example\n *\n * _.times(2, _.noop);\n * // => [undefined, undefined]\n */\nfunction noop() {\n  // No operation performed.\n}\n\nmodule.exports = noop;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL25vb3AuanM/YmNkZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL25vb3AuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYHVuZGVmaW5lZGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAyLjMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBleGFtcGxlXG4gKlxuICogXy50aW1lcygyLCBfLm5vb3ApO1xuICogLy8gPT4gW3VuZGVmaW5lZCwgdW5kZWZpbmVkXVxuICovXG5mdW5jdGlvbiBub29wKCkge1xuICAvLyBObyBvcGVyYXRpb24gcGVyZm9ybWVkLlxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5vb3A7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/noop.js\n");

/***/ }),

/***/ "./node_modules/lodash/stubFalse.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/stubFalse.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3N0dWJGYWxzZS5qcz8wN2M3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbG9kYXNoL3N0dWJGYWxzZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBgZmFsc2VgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50aW1lcygyLCBfLnN0dWJGYWxzZSk7XG4gKiAvLyA9PiBbZmFsc2UsIGZhbHNlXVxuICovXG5mdW5jdGlvbiBzdHViRmFsc2UoKSB7XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHViRmFsc2U7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/lodash/stubFalse.js\n");

/***/ }),

/***/ "./node_modules/ms/index.js":
/*!**********************************!*\
  !*** ./node_modules/ms/index.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isNaN(val) === false) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^((?:\\d+)?\\-?\\d?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbXMvaW5kZXguanM/MTQ2OCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxjQUFjO0FBQ3pCLFdBQVcsT0FBTztBQUNsQixZQUFZLE1BQU07QUFDbEIsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9tcy9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogSGVscGVycy5cbiAqL1xuXG52YXIgcyA9IDEwMDA7XG52YXIgbSA9IHMgKiA2MDtcbnZhciBoID0gbSAqIDYwO1xudmFyIGQgPSBoICogMjQ7XG52YXIgdyA9IGQgKiA3O1xudmFyIHkgPSBkICogMzY1LjI1O1xuXG4vKipcbiAqIFBhcnNlIG9yIGZvcm1hdCB0aGUgZ2l2ZW4gYHZhbGAuXG4gKlxuICogT3B0aW9uczpcbiAqXG4gKiAgLSBgbG9uZ2AgdmVyYm9zZSBmb3JtYXR0aW5nIFtmYWxzZV1cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IHZhbFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHRocm93cyB7RXJyb3J9IHRocm93IGFuIGVycm9yIGlmIHZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgbnVtYmVyXG4gKiBAcmV0dXJuIHtTdHJpbmd8TnVtYmVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsO1xuICBpZiAodHlwZSA9PT0gJ3N0cmluZycgJiYgdmFsLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gcGFyc2UodmFsKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnbnVtYmVyJyAmJiBpc05hTih2YWwpID09PSBmYWxzZSkge1xuICAgIHJldHVybiBvcHRpb25zLmxvbmcgPyBmbXRMb25nKHZhbCkgOiBmbXRTaG9ydCh2YWwpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcbiAgICAndmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSB2YWxpZCBudW1iZXIuIHZhbD0nICtcbiAgICAgIEpTT04uc3RyaW5naWZ5KHZhbClcbiAgKTtcbn07XG5cbi8qKlxuICogUGFyc2UgdGhlIGdpdmVuIGBzdHJgIGFuZCByZXR1cm4gbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlKHN0cikge1xuICBzdHIgPSBTdHJpbmcoc3RyKTtcbiAgaWYgKHN0ci5sZW5ndGggPiAxMDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG1hdGNoID0gL14oKD86XFxkKyk/XFwtP1xcZD9cXC4/XFxkKykgKihtaWxsaXNlY29uZHM/fG1zZWNzP3xtc3xzZWNvbmRzP3xzZWNzP3xzfG1pbnV0ZXM/fG1pbnM/fG18aG91cnM/fGhycz98aHxkYXlzP3xkfHdlZWtzP3x3fHllYXJzP3x5cnM/fHkpPyQvaS5leGVjKFxuICAgIHN0clxuICApO1xuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBuID0gcGFyc2VGbG9hdChtYXRjaFsxXSk7XG4gIHZhciB0eXBlID0gKG1hdGNoWzJdIHx8ICdtcycpLnRvTG93ZXJDYXNlKCk7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ3llYXJzJzpcbiAgICBjYXNlICd5ZWFyJzpcbiAgICBjYXNlICd5cnMnOlxuICAgIGNhc2UgJ3lyJzpcbiAgICBjYXNlICd5JzpcbiAgICAgIHJldHVybiBuICogeTtcbiAgICBjYXNlICd3ZWVrcyc6XG4gICAgY2FzZSAnd2Vlayc6XG4gICAgY2FzZSAndyc6XG4gICAgICByZXR1cm4gbiAqIHc7XG4gICAgY2FzZSAnZGF5cyc6XG4gICAgY2FzZSAnZGF5JzpcbiAgICBjYXNlICdkJzpcbiAgICAgIHJldHVybiBuICogZDtcbiAgICBjYXNlICdob3Vycyc6XG4gICAgY2FzZSAnaG91cic6XG4gICAgY2FzZSAnaHJzJzpcbiAgICBjYXNlICdocic6XG4gICAgY2FzZSAnaCc6XG4gICAgICByZXR1cm4gbiAqIGg7XG4gICAgY2FzZSAnbWludXRlcyc6XG4gICAgY2FzZSAnbWludXRlJzpcbiAgICBjYXNlICdtaW5zJzpcbiAgICBjYXNlICdtaW4nOlxuICAgIGNhc2UgJ20nOlxuICAgICAgcmV0dXJuIG4gKiBtO1xuICAgIGNhc2UgJ3NlY29uZHMnOlxuICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgY2FzZSAnc2Vjcyc6XG4gICAgY2FzZSAnc2VjJzpcbiAgICBjYXNlICdzJzpcbiAgICAgIHJldHVybiBuICogcztcbiAgICBjYXNlICdtaWxsaXNlY29uZHMnOlxuICAgIGNhc2UgJ21pbGxpc2Vjb25kJzpcbiAgICBjYXNlICdtc2Vjcyc6XG4gICAgY2FzZSAnbXNlYyc6XG4gICAgY2FzZSAnbXMnOlxuICAgICAgcmV0dXJuIG47XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBTaG9ydCBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRTaG9ydChtcykge1xuICB2YXIgbXNBYnMgPSBNYXRoLmFicyhtcyk7XG4gIGlmIChtc0FicyA+PSBkKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBkKSArICdkJztcbiAgfVxuICBpZiAobXNBYnMgPj0gaCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gaCkgKyAnaCc7XG4gIH1cbiAgaWYgKG1zQWJzID49IG0pIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG0pICsgJ20nO1xuICB9XG4gIGlmIChtc0FicyA+PSBzKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBzKSArICdzJztcbiAgfVxuICByZXR1cm4gbXMgKyAnbXMnO1xufVxuXG4vKipcbiAqIExvbmcgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10TG9uZyhtcykge1xuICB2YXIgbXNBYnMgPSBNYXRoLmFicyhtcyk7XG4gIGlmIChtc0FicyA+PSBkKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIGQsICdkYXknKTtcbiAgfVxuICBpZiAobXNBYnMgPj0gaCkge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBoLCAnaG91cicpO1xuICB9XG4gIGlmIChtc0FicyA+PSBtKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIG0sICdtaW51dGUnKTtcbiAgfVxuICBpZiAobXNBYnMgPj0gcykge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBzLCAnc2Vjb25kJyk7XG4gIH1cbiAgcmV0dXJuIG1zICsgJyBtcyc7XG59XG5cbi8qKlxuICogUGx1cmFsaXphdGlvbiBoZWxwZXIuXG4gKi9cblxuZnVuY3Rpb24gcGx1cmFsKG1zLCBtc0FicywgbiwgbmFtZSkge1xuICB2YXIgaXNQbHVyYWwgPSBtc0FicyA+PSBuICogMS41O1xuICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG4pICsgJyAnICsgbmFtZSArIChpc1BsdXJhbCA/ICdzJyA6ICcnKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/ms/index.js\n");

/***/ }),

/***/ "./node_modules/paho-mqtt/paho-mqtt.js":
/*!*********************************************!*\
  !*** ./node_modules/paho-mqtt/paho-mqtt.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {/*******************************************************************************\n * Copyright (c) 2013 IBM Corp.\n *\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * and Eclipse Distribution License v1.0 which accompany this distribution.\n *\n * The Eclipse Public License is available at\n *    http://www.eclipse.org/legal/epl-v10.html\n * and the Eclipse Distribution License is available at\n *   http://www.eclipse.org/org/documents/edl-v10.php.\n *\n * Contributors:\n *    Andrew Banks - initial API and implementation and initial documentation\n *******************************************************************************/\n\n\n// Only expose a single object name in the global namespace.\n// Everything must go through this module. Global Paho module\n// only has a single public function, client, which returns\n// a Paho client object given connection details.\n\n/**\n * Send and receive messages using web browsers.\n * <p>\n * This programming interface lets a JavaScript client application use the MQTT V3.1 or\n * V3.1.1 protocol to connect to an MQTT-supporting messaging server.\n *\n * The function supported includes:\n * <ol>\n * <li>Connecting to and disconnecting from a server. The server is identified by its host name and port number.\n * <li>Specifying options that relate to the communications link with the server,\n * for example the frequency of keep-alive heartbeats, and whether SSL/TLS is required.\n * <li>Subscribing to and receiving messages from MQTT Topics.\n * <li>Publishing messages to MQTT Topics.\n * </ol>\n * <p>\n * The API consists of two main objects:\n * <dl>\n * <dt><b>{@link Paho.Client}</b></dt>\n * <dd>This contains methods that provide the functionality of the API,\n * including provision of callbacks that notify the application when a message\n * arrives from or is delivered to the messaging server,\n * or when the status of its connection to the messaging server changes.</dd>\n * <dt><b>{@link Paho.Message}</b></dt>\n * <dd>This encapsulates the payload of the message along with various attributes\n * associated with its delivery, in particular the destination to which it has\n * been (or is about to be) sent.</dd>\n * </dl>\n * <p>\n * The programming interface validates parameters passed to it, and will throw\n * an Error containing an error message intended for developer use, if it detects\n * an error with any parameter.\n * <p>\n * Example:\n *\n * <code><pre>\nvar client = new Paho.MQTT.Client(location.hostname, Number(location.port), \"clientId\");\nclient.onConnectionLost = onConnectionLost;\nclient.onMessageArrived = onMessageArrived;\nclient.connect({onSuccess:onConnect});\n\nfunction onConnect() {\n  // Once a connection has been made, make a subscription and send a message.\n  console.log(\"onConnect\");\n  client.subscribe(\"/World\");\n  var message = new Paho.MQTT.Message(\"Hello\");\n  message.destinationName = \"/World\";\n  client.send(message);\n};\nfunction onConnectionLost(responseObject) {\n  if (responseObject.errorCode !== 0)\n\tconsole.log(\"onConnectionLost:\"+responseObject.errorMessage);\n};\nfunction onMessageArrived(message) {\n  console.log(\"onMessageArrived:\"+message.payloadString);\n  client.disconnect();\n};\n * </pre></code>\n * @namespace Paho\n */\n\n/* jshint shadow:true */\n(function ExportLibrary(root, factory) {\n\tif(true){\n\t\tmodule.exports = factory();\n\t} else {}\n})(this, function LibraryFactory(){\n\n\n\tvar PahoMQTT = (function (global) {\n\n\t// Private variables below, these are only visible inside the function closure\n\t// which is used to define the module.\n\tvar version = \"@VERSION@-@BUILDLEVEL@\";\n\n\t/**\n\t * @private\n\t */\n\tvar localStorage = global.localStorage || (function () {\n\t\tvar data = {};\n\n\t\treturn {\n\t\t\tsetItem: function (key, item) { data[key] = item; },\n\t\t\tgetItem: function (key) { return data[key]; },\n\t\t\tremoveItem: function (key) { delete data[key]; },\n\t\t};\n\t})();\n\n\t\t/**\n\t * Unique message type identifiers, with associated\n\t * associated integer values.\n\t * @private\n\t */\n\t\tvar MESSAGE_TYPE = {\n\t\t\tCONNECT: 1,\n\t\t\tCONNACK: 2,\n\t\t\tPUBLISH: 3,\n\t\t\tPUBACK: 4,\n\t\t\tPUBREC: 5,\n\t\t\tPUBREL: 6,\n\t\t\tPUBCOMP: 7,\n\t\t\tSUBSCRIBE: 8,\n\t\t\tSUBACK: 9,\n\t\t\tUNSUBSCRIBE: 10,\n\t\t\tUNSUBACK: 11,\n\t\t\tPINGREQ: 12,\n\t\t\tPINGRESP: 13,\n\t\t\tDISCONNECT: 14\n\t\t};\n\n\t\t// Collection of utility methods used to simplify module code\n\t\t// and promote the DRY pattern.\n\n\t\t/**\n\t * Validate an object's parameter names to ensure they\n\t * match a list of expected variables name for this option\n\t * type. Used to ensure option object passed into the API don't\n\t * contain erroneous parameters.\n\t * @param {Object} obj - User options object\n\t * @param {Object} keys - valid keys and types that may exist in obj.\n\t * @throws {Error} Invalid option parameter found.\n\t * @private\n\t */\n\t\tvar validate = function(obj, keys) {\n\t\t\tfor (var key in obj) {\n\t\t\t\tif (obj.hasOwnProperty(key)) {\n\t\t\t\t\tif (keys.hasOwnProperty(key)) {\n\t\t\t\t\t\tif (typeof obj[key] !== keys[key])\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof obj[key], key]));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar errorStr = \"Unknown property, \" + key + \". Valid properties are:\";\n\t\t\t\t\t\tfor (var validKey in keys)\n\t\t\t\t\t\t\tif (keys.hasOwnProperty(validKey))\n\t\t\t\t\t\t\t\terrorStr = errorStr+\" \"+validKey;\n\t\t\t\t\t\tthrow new Error(errorStr);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t * Return a new function which runs the user function bound\n\t * to a fixed scope.\n\t * @param {function} User function\n\t * @param {object} Function scope\n\t * @return {function} User function bound to another scope\n\t * @private\n\t */\n\t\tvar scope = function (f, scope) {\n\t\t\treturn function () {\n\t\t\t\treturn f.apply(scope, arguments);\n\t\t\t};\n\t\t};\n\n\t\t/**\n\t * Unique message type identifiers, with associated\n\t * associated integer values.\n\t * @private\n\t */\n\t\tvar ERROR = {\n\t\t\tOK: {code:0, text:\"AMQJSC0000I OK.\"},\n\t\t\tCONNECT_TIMEOUT: {code:1, text:\"AMQJSC0001E Connect timed out.\"},\n\t\t\tSUBSCRIBE_TIMEOUT: {code:2, text:\"AMQJS0002E Subscribe timed out.\"},\n\t\t\tUNSUBSCRIBE_TIMEOUT: {code:3, text:\"AMQJS0003E Unsubscribe timed out.\"},\n\t\t\tPING_TIMEOUT: {code:4, text:\"AMQJS0004E Ping timed out.\"},\n\t\t\tINTERNAL_ERROR: {code:5, text:\"AMQJS0005E Internal error. Error Message: {0}, Stack trace: {1}\"},\n\t\t\tCONNACK_RETURNCODE: {code:6, text:\"AMQJS0006E Bad Connack return code:{0} {1}.\"},\n\t\t\tSOCKET_ERROR: {code:7, text:\"AMQJS0007E Socket error:{0}.\"},\n\t\t\tSOCKET_CLOSE: {code:8, text:\"AMQJS0008I Socket closed.\"},\n\t\t\tMALFORMED_UTF: {code:9, text:\"AMQJS0009E Malformed UTF data:{0} {1} {2}.\"},\n\t\t\tUNSUPPORTED: {code:10, text:\"AMQJS0010E {0} is not supported by this browser.\"},\n\t\t\tINVALID_STATE: {code:11, text:\"AMQJS0011E Invalid state {0}.\"},\n\t\t\tINVALID_TYPE: {code:12, text:\"AMQJS0012E Invalid type {0} for {1}.\"},\n\t\t\tINVALID_ARGUMENT: {code:13, text:\"AMQJS0013E Invalid argument {0} for {1}.\"},\n\t\t\tUNSUPPORTED_OPERATION: {code:14, text:\"AMQJS0014E Unsupported operation.\"},\n\t\t\tINVALID_STORED_DATA: {code:15, text:\"AMQJS0015E Invalid data in local storage key={0} value={1}.\"},\n\t\t\tINVALID_MQTT_MESSAGE_TYPE: {code:16, text:\"AMQJS0016E Invalid MQTT message type {0}.\"},\n\t\t\tMALFORMED_UNICODE: {code:17, text:\"AMQJS0017E Malformed Unicode string:{0} {1}.\"},\n\t\t\tBUFFER_FULL: {code:18, text:\"AMQJS0018E Message buffer is full, maximum buffer size: {0}.\"},\n\t\t};\n\n\t\t/** CONNACK RC Meaning. */\n\t\tvar CONNACK_RC = {\n\t\t\t0:\"Connection Accepted\",\n\t\t\t1:\"Connection Refused: unacceptable protocol version\",\n\t\t\t2:\"Connection Refused: identifier rejected\",\n\t\t\t3:\"Connection Refused: server unavailable\",\n\t\t\t4:\"Connection Refused: bad user name or password\",\n\t\t\t5:\"Connection Refused: not authorized\"\n\t\t};\n\n\t/**\n\t * Format an error message text.\n\t * @private\n\t * @param {error} ERROR value above.\n\t * @param {substitutions} [array] substituted into the text.\n\t * @return the text with the substitutions made.\n\t */\n\t\tvar format = function(error, substitutions) {\n\t\t\tvar text = error.text;\n\t\t\tif (substitutions) {\n\t\t\t\tvar field,start;\n\t\t\t\tfor (var i=0; i<substitutions.length; i++) {\n\t\t\t\t\tfield = \"{\"+i+\"}\";\n\t\t\t\t\tstart = text.indexOf(field);\n\t\t\t\t\tif(start > 0) {\n\t\t\t\t\t\tvar part1 = text.substring(0,start);\n\t\t\t\t\t\tvar part2 = text.substring(start+field.length);\n\t\t\t\t\t\ttext = part1+substitutions[i]+part2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn text;\n\t\t};\n\n\t\t//MQTT protocol and version          6    M    Q    I    s    d    p    3\n\t\tvar MqttProtoIdentifierv3 = [0x00,0x06,0x4d,0x51,0x49,0x73,0x64,0x70,0x03];\n\t\t//MQTT proto/version for 311         4    M    Q    T    T    4\n\t\tvar MqttProtoIdentifierv4 = [0x00,0x04,0x4d,0x51,0x54,0x54,0x04];\n\n\t\t/**\n\t * Construct an MQTT wire protocol message.\n\t * @param type MQTT packet type.\n\t * @param options optional wire message attributes.\n\t *\n\t * Optional properties\n\t *\n\t * messageIdentifier: message ID in the range [0..65535]\n\t * payloadMessage:\tApplication Message - PUBLISH only\n\t * connectStrings:\tarray of 0 or more Strings to be put into the CONNECT payload\n\t * topics:\t\t\tarray of strings (SUBSCRIBE, UNSUBSCRIBE)\n\t * requestQoS:\t\tarray of QoS values [0..2]\n\t *\n\t * \"Flag\" properties\n\t * cleanSession:\ttrue if present / false if absent (CONNECT)\n\t * willMessage:  \ttrue if present / false if absent (CONNECT)\n\t * isRetained:\t\ttrue if present / false if absent (CONNECT)\n\t * userName:\t\ttrue if present / false if absent (CONNECT)\n\t * password:\t\ttrue if present / false if absent (CONNECT)\n\t * keepAliveInterval:\tinteger [0..65535]  (CONNECT)\n\t *\n\t * @private\n\t * @ignore\n\t */\n\t\tvar WireMessage = function (type, options) {\n\t\t\tthis.type = type;\n\t\t\tfor (var name in options) {\n\t\t\t\tif (options.hasOwnProperty(name)) {\n\t\t\t\t\tthis[name] = options[name];\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tWireMessage.prototype.encode = function() {\n\t\t// Compute the first byte of the fixed header\n\t\t\tvar first = ((this.type & 0x0f) << 4);\n\n\t\t\t/*\n\t\t * Now calculate the length of the variable header + payload by adding up the lengths\n\t\t * of all the component parts\n\t\t */\n\n\t\t\tvar remLength = 0;\n\t\t\tvar topicStrLength = [];\n\t\t\tvar destinationNameLength = 0;\n\t\t\tvar willMessagePayloadBytes;\n\n\t\t\t// if the message contains a messageIdentifier then we need two bytes for that\n\t\t\tif (this.messageIdentifier !== undefined)\n\t\t\t\tremLength += 2;\n\n\t\t\tswitch(this.type) {\n\t\t\t// If this a Connect then we need to include 12 bytes for its header\n\t\t\tcase MESSAGE_TYPE.CONNECT:\n\t\t\t\tswitch(this.mqttVersion) {\n\t\t\t\tcase 3:\n\t\t\t\t\tremLength += MqttProtoIdentifierv3.length + 3;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tremLength += MqttProtoIdentifierv4.length + 3;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tremLength += UTF8Length(this.clientId) + 2;\n\t\t\t\tif (this.willMessage !== undefined) {\n\t\t\t\t\tremLength += UTF8Length(this.willMessage.destinationName) + 2;\n\t\t\t\t\t// Will message is always a string, sent as UTF-8 characters with a preceding length.\n\t\t\t\t\twillMessagePayloadBytes = this.willMessage.payloadBytes;\n\t\t\t\t\tif (!(willMessagePayloadBytes instanceof Uint8Array))\n\t\t\t\t\t\twillMessagePayloadBytes = new Uint8Array(payloadBytes);\n\t\t\t\t\tremLength += willMessagePayloadBytes.byteLength +2;\n\t\t\t\t}\n\t\t\t\tif (this.userName !== undefined)\n\t\t\t\t\tremLength += UTF8Length(this.userName) + 2;\n\t\t\t\tif (this.password !== undefined)\n\t\t\t\t\tremLength += UTF8Length(this.password) + 2;\n\t\t\t\tbreak;\n\n\t\t\t// Subscribe, Unsubscribe can both contain topic strings\n\t\t\tcase MESSAGE_TYPE.SUBSCRIBE:\n\t\t\t\tfirst |= 0x02; // Qos = 1;\n\t\t\t\tfor ( var i = 0; i < this.topics.length; i++) {\n\t\t\t\t\ttopicStrLength[i] = UTF8Length(this.topics[i]);\n\t\t\t\t\tremLength += topicStrLength[i] + 2;\n\t\t\t\t}\n\t\t\t\tremLength += this.requestedQos.length; // 1 byte for each topic's Qos\n\t\t\t\t// QoS on Subscribe only\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.UNSUBSCRIBE:\n\t\t\t\tfirst |= 0x02; // Qos = 1;\n\t\t\t\tfor ( var i = 0; i < this.topics.length; i++) {\n\t\t\t\t\ttopicStrLength[i] = UTF8Length(this.topics[i]);\n\t\t\t\t\tremLength += topicStrLength[i] + 2;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBREL:\n\t\t\t\tfirst |= 0x02; // Qos = 1;\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\tif (this.payloadMessage.duplicate) first |= 0x08;\n\t\t\t\tfirst  = first |= (this.payloadMessage.qos << 1);\n\t\t\t\tif (this.payloadMessage.retained) first |= 0x01;\n\t\t\t\tdestinationNameLength = UTF8Length(this.payloadMessage.destinationName);\n\t\t\t\tremLength += destinationNameLength + 2;\n\t\t\t\tvar payloadBytes = this.payloadMessage.payloadBytes;\n\t\t\t\tremLength += payloadBytes.byteLength;\n\t\t\t\tif (payloadBytes instanceof ArrayBuffer)\n\t\t\t\t\tpayloadBytes = new Uint8Array(payloadBytes);\n\t\t\t\telse if (!(payloadBytes instanceof Uint8Array))\n\t\t\t\t\tpayloadBytes = new Uint8Array(payloadBytes.buffer);\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.DISCONNECT:\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Now we can allocate a buffer for the message\n\n\t\t\tvar mbi = encodeMBI(remLength);  // Convert the length to MQTT MBI format\n\t\t\tvar pos = mbi.length + 1;        // Offset of start of variable header\n\t\t\tvar buffer = new ArrayBuffer(remLength + pos);\n\t\t\tvar byteStream = new Uint8Array(buffer);    // view it as a sequence of bytes\n\n\t\t\t//Write the fixed header into the buffer\n\t\t\tbyteStream[0] = first;\n\t\t\tbyteStream.set(mbi,1);\n\n\t\t\t// If this is a PUBLISH then the variable header starts with a topic\n\t\t\tif (this.type == MESSAGE_TYPE.PUBLISH)\n\t\t\t\tpos = writeString(this.payloadMessage.destinationName, destinationNameLength, byteStream, pos);\n\t\t\t// If this is a CONNECT then the variable header contains the protocol name/version, flags and keepalive time\n\n\t\t\telse if (this.type == MESSAGE_TYPE.CONNECT) {\n\t\t\t\tswitch (this.mqttVersion) {\n\t\t\t\tcase 3:\n\t\t\t\t\tbyteStream.set(MqttProtoIdentifierv3, pos);\n\t\t\t\t\tpos += MqttProtoIdentifierv3.length;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tbyteStream.set(MqttProtoIdentifierv4, pos);\n\t\t\t\t\tpos += MqttProtoIdentifierv4.length;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tvar connectFlags = 0;\n\t\t\t\tif (this.cleanSession)\n\t\t\t\t\tconnectFlags = 0x02;\n\t\t\t\tif (this.willMessage !== undefined ) {\n\t\t\t\t\tconnectFlags |= 0x04;\n\t\t\t\t\tconnectFlags |= (this.willMessage.qos<<3);\n\t\t\t\t\tif (this.willMessage.retained) {\n\t\t\t\t\t\tconnectFlags |= 0x20;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this.userName !== undefined)\n\t\t\t\t\tconnectFlags |= 0x80;\n\t\t\t\tif (this.password !== undefined)\n\t\t\t\t\tconnectFlags |= 0x40;\n\t\t\t\tbyteStream[pos++] = connectFlags;\n\t\t\t\tpos = writeUint16 (this.keepAliveInterval, byteStream, pos);\n\t\t\t}\n\n\t\t\t// Output the messageIdentifier - if there is one\n\t\t\tif (this.messageIdentifier !== undefined)\n\t\t\t\tpos = writeUint16 (this.messageIdentifier, byteStream, pos);\n\n\t\t\tswitch(this.type) {\n\t\t\tcase MESSAGE_TYPE.CONNECT:\n\t\t\t\tpos = writeString(this.clientId, UTF8Length(this.clientId), byteStream, pos);\n\t\t\t\tif (this.willMessage !== undefined) {\n\t\t\t\t\tpos = writeString(this.willMessage.destinationName, UTF8Length(this.willMessage.destinationName), byteStream, pos);\n\t\t\t\t\tpos = writeUint16(willMessagePayloadBytes.byteLength, byteStream, pos);\n\t\t\t\t\tbyteStream.set(willMessagePayloadBytes, pos);\n\t\t\t\t\tpos += willMessagePayloadBytes.byteLength;\n\n\t\t\t\t}\n\t\t\t\tif (this.userName !== undefined)\n\t\t\t\t\tpos = writeString(this.userName, UTF8Length(this.userName), byteStream, pos);\n\t\t\t\tif (this.password !== undefined)\n\t\t\t\t\tpos = writeString(this.password, UTF8Length(this.password), byteStream, pos);\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\t// PUBLISH has a text or binary payload, if text do not add a 2 byte length field, just the UTF characters.\n\t\t\t\tbyteStream.set(payloadBytes, pos);\n\n\t\t\t\tbreak;\n\n\t\t\t\t//    \t    case MESSAGE_TYPE.PUBREC:\n\t\t\t\t//    \t    case MESSAGE_TYPE.PUBREL:\n\t\t\t\t//    \t    case MESSAGE_TYPE.PUBCOMP:\n\t\t\t\t//    \t    \tbreak;\n\n\t\t\tcase MESSAGE_TYPE.SUBSCRIBE:\n\t\t\t\t// SUBSCRIBE has a list of topic strings and request QoS\n\t\t\t\tfor (var i=0; i<this.topics.length; i++) {\n\t\t\t\t\tpos = writeString(this.topics[i], topicStrLength[i], byteStream, pos);\n\t\t\t\t\tbyteStream[pos++] = this.requestedQos[i];\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.UNSUBSCRIBE:\n\t\t\t\t// UNSUBSCRIBE has a list of topic strings\n\t\t\t\tfor (var i=0; i<this.topics.length; i++)\n\t\t\t\t\tpos = writeString(this.topics[i], topicStrLength[i], byteStream, pos);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\t// Do nothing.\n\t\t\t}\n\n\t\t\treturn buffer;\n\t\t};\n\n\t\tfunction decodeMessage(input,pos) {\n\t\t\tvar startingPos = pos;\n\t\t\tvar first = input[pos];\n\t\t\tvar type = first >> 4;\n\t\t\tvar messageInfo = first &= 0x0f;\n\t\t\tpos += 1;\n\n\n\t\t\t// Decode the remaining length (MBI format)\n\n\t\t\tvar digit;\n\t\t\tvar remLength = 0;\n\t\t\tvar multiplier = 1;\n\t\t\tdo {\n\t\t\t\tif (pos == input.length) {\n\t\t\t\t\treturn [null,startingPos];\n\t\t\t\t}\n\t\t\t\tdigit = input[pos++];\n\t\t\t\tremLength += ((digit & 0x7F) * multiplier);\n\t\t\t\tmultiplier *= 128;\n\t\t\t} while ((digit & 0x80) !== 0);\n\n\t\t\tvar endPos = pos+remLength;\n\t\t\tif (endPos > input.length) {\n\t\t\t\treturn [null,startingPos];\n\t\t\t}\n\n\t\t\tvar wireMessage = new WireMessage(type);\n\t\t\tswitch(type) {\n\t\t\tcase MESSAGE_TYPE.CONNACK:\n\t\t\t\tvar connectAcknowledgeFlags = input[pos++];\n\t\t\t\tif (connectAcknowledgeFlags & 0x01)\n\t\t\t\t\twireMessage.sessionPresent = true;\n\t\t\t\twireMessage.returnCode = input[pos++];\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\tvar qos = (messageInfo >> 1) & 0x03;\n\n\t\t\t\tvar len = readUint16(input, pos);\n\t\t\t\tpos += 2;\n\t\t\t\tvar topicName = parseUTF8(input, pos, len);\n\t\t\t\tpos += len;\n\t\t\t\t// If QoS 1 or 2 there will be a messageIdentifier\n\t\t\t\tif (qos > 0) {\n\t\t\t\t\twireMessage.messageIdentifier = readUint16(input, pos);\n\t\t\t\t\tpos += 2;\n\t\t\t\t}\n\n\t\t\t\tvar message = new Message(input.subarray(pos, endPos));\n\t\t\t\tif ((messageInfo & 0x01) == 0x01)\n\t\t\t\t\tmessage.retained = true;\n\t\t\t\tif ((messageInfo & 0x08) == 0x08)\n\t\t\t\t\tmessage.duplicate =  true;\n\t\t\t\tmessage.qos = qos;\n\t\t\t\tmessage.destinationName = topicName;\n\t\t\t\twireMessage.payloadMessage = message;\n\t\t\t\tbreak;\n\n\t\t\tcase  MESSAGE_TYPE.PUBACK:\n\t\t\tcase  MESSAGE_TYPE.PUBREC:\n\t\t\tcase  MESSAGE_TYPE.PUBREL:\n\t\t\tcase  MESSAGE_TYPE.PUBCOMP:\n\t\t\tcase  MESSAGE_TYPE.UNSUBACK:\n\t\t\t\twireMessage.messageIdentifier = readUint16(input, pos);\n\t\t\t\tbreak;\n\n\t\t\tcase  MESSAGE_TYPE.SUBACK:\n\t\t\t\twireMessage.messageIdentifier = readUint16(input, pos);\n\t\t\t\tpos += 2;\n\t\t\t\twireMessage.returnCode = input.subarray(pos, endPos);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\treturn [wireMessage,endPos];\n\t\t}\n\n\t\tfunction writeUint16(input, buffer, offset) {\n\t\t\tbuffer[offset++] = input >> 8;      //MSB\n\t\t\tbuffer[offset++] = input % 256;     //LSB\n\t\t\treturn offset;\n\t\t}\n\n\t\tfunction writeString(input, utf8Length, buffer, offset) {\n\t\t\toffset = writeUint16(utf8Length, buffer, offset);\n\t\t\tstringToUTF8(input, buffer, offset);\n\t\t\treturn offset + utf8Length;\n\t\t}\n\n\t\tfunction readUint16(buffer, offset) {\n\t\t\treturn 256*buffer[offset] + buffer[offset+1];\n\t\t}\n\n\t\t/**\n\t * Encodes an MQTT Multi-Byte Integer\n\t * @private\n\t */\n\t\tfunction encodeMBI(number) {\n\t\t\tvar output = new Array(1);\n\t\t\tvar numBytes = 0;\n\n\t\t\tdo {\n\t\t\t\tvar digit = number % 128;\n\t\t\t\tnumber = number >> 7;\n\t\t\t\tif (number > 0) {\n\t\t\t\t\tdigit |= 0x80;\n\t\t\t\t}\n\t\t\t\toutput[numBytes++] = digit;\n\t\t\t} while ( (number > 0) && (numBytes<4) );\n\n\t\t\treturn output;\n\t\t}\n\n\t\t/**\n\t * Takes a String and calculates its length in bytes when encoded in UTF8.\n\t * @private\n\t */\n\t\tfunction UTF8Length(input) {\n\t\t\tvar output = 0;\n\t\t\tfor (var i = 0; i<input.length; i++)\n\t\t\t{\n\t\t\t\tvar charCode = input.charCodeAt(i);\n\t\t\t\tif (charCode > 0x7FF)\n\t\t\t\t{\n\t\t\t\t\t// Surrogate pair means its a 4 byte character\n\t\t\t\t\tif (0xD800 <= charCode && charCode <= 0xDBFF)\n\t\t\t\t\t{\n\t\t\t\t\t\ti++;\n\t\t\t\t\t\toutput++;\n\t\t\t\t\t}\n\t\t\t\t\toutput +=3;\n\t\t\t\t}\n\t\t\t\telse if (charCode > 0x7F)\n\t\t\t\t\toutput +=2;\n\t\t\t\telse\n\t\t\t\t\toutput++;\n\t\t\t}\n\t\t\treturn output;\n\t\t}\n\n\t\t/**\n\t * Takes a String and writes it into an array as UTF8 encoded bytes.\n\t * @private\n\t */\n\t\tfunction stringToUTF8(input, output, start) {\n\t\t\tvar pos = start;\n\t\t\tfor (var i = 0; i<input.length; i++) {\n\t\t\t\tvar charCode = input.charCodeAt(i);\n\n\t\t\t\t// Check for a surrogate pair.\n\t\t\t\tif (0xD800 <= charCode && charCode <= 0xDBFF) {\n\t\t\t\t\tvar lowCharCode = input.charCodeAt(++i);\n\t\t\t\t\tif (isNaN(lowCharCode)) {\n\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UNICODE, [charCode, lowCharCode]));\n\t\t\t\t\t}\n\t\t\t\t\tcharCode = ((charCode - 0xD800)<<10) + (lowCharCode - 0xDC00) + 0x10000;\n\n\t\t\t\t}\n\n\t\t\t\tif (charCode <= 0x7F) {\n\t\t\t\t\toutput[pos++] = charCode;\n\t\t\t\t} else if (charCode <= 0x7FF) {\n\t\t\t\t\toutput[pos++] = charCode>>6  & 0x1F | 0xC0;\n\t\t\t\t\toutput[pos++] = charCode     & 0x3F | 0x80;\n\t\t\t\t} else if (charCode <= 0xFFFF) {\n\t\t\t\t\toutput[pos++] = charCode>>12 & 0x0F | 0xE0;\n\t\t\t\t\toutput[pos++] = charCode>>6  & 0x3F | 0x80;\n\t\t\t\t\toutput[pos++] = charCode     & 0x3F | 0x80;\n\t\t\t\t} else {\n\t\t\t\t\toutput[pos++] = charCode>>18 & 0x07 | 0xF0;\n\t\t\t\t\toutput[pos++] = charCode>>12 & 0x3F | 0x80;\n\t\t\t\t\toutput[pos++] = charCode>>6  & 0x3F | 0x80;\n\t\t\t\t\toutput[pos++] = charCode     & 0x3F | 0x80;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn output;\n\t\t}\n\n\t\tfunction parseUTF8(input, offset, length) {\n\t\t\tvar output = \"\";\n\t\t\tvar utf16;\n\t\t\tvar pos = offset;\n\n\t\t\twhile (pos < offset+length)\n\t\t\t{\n\t\t\t\tvar byte1 = input[pos++];\n\t\t\t\tif (byte1 < 128)\n\t\t\t\t\tutf16 = byte1;\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar byte2 = input[pos++]-128;\n\t\t\t\t\tif (byte2 < 0)\n\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16),\"\"]));\n\t\t\t\t\tif (byte1 < 0xE0)             // 2 byte character\n\t\t\t\t\t\tutf16 = 64*(byte1-0xC0) + byte2;\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar byte3 = input[pos++]-128;\n\t\t\t\t\t\tif (byte3 < 0)\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16)]));\n\t\t\t\t\t\tif (byte1 < 0xF0)        // 3 byte character\n\t\t\t\t\t\t\tutf16 = 4096*(byte1-0xE0) + 64*byte2 + byte3;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar byte4 = input[pos++]-128;\n\t\t\t\t\t\t\tif (byte4 < 0)\n\t\t\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16), byte4.toString(16)]));\n\t\t\t\t\t\t\tif (byte1 < 0xF8)        // 4 byte character\n\t\t\t\t\t\t\t\tutf16 = 262144*(byte1-0xF0) + 4096*byte2 + 64*byte3 + byte4;\n\t\t\t\t\t\t\telse                     // longer encodings are not supported\n\t\t\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16), byte4.toString(16)]));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (utf16 > 0xFFFF)   // 4 byte character - express as a surrogate pair\n\t\t\t\t{\n\t\t\t\t\tutf16 -= 0x10000;\n\t\t\t\t\toutput += String.fromCharCode(0xD800 + (utf16 >> 10)); // lead character\n\t\t\t\t\tutf16 = 0xDC00 + (utf16 & 0x3FF);  // trail character\n\t\t\t\t}\n\t\t\t\toutput += String.fromCharCode(utf16);\n\t\t\t}\n\t\t\treturn output;\n\t\t}\n\n\t\t/**\n\t * Repeat keepalive requests, monitor responses.\n\t * @ignore\n\t */\n\t\tvar Pinger = function(client, keepAliveInterval) {\n\t\t\tthis._client = client;\n\t\t\tthis._keepAliveInterval = keepAliveInterval*1000;\n\t\t\tthis.isReset = false;\n\n\t\t\tvar pingReq = new WireMessage(MESSAGE_TYPE.PINGREQ).encode();\n\n\t\t\tvar doTimeout = function (pinger) {\n\t\t\t\treturn function () {\n\t\t\t\t\treturn doPing.apply(pinger);\n\t\t\t\t};\n\t\t\t};\n\n\t\t\t/** @ignore */\n\t\t\tvar doPing = function() {\n\t\t\t\tif (!this.isReset) {\n\t\t\t\t\tthis._client._trace(\"Pinger.doPing\", \"Timed out\");\n\t\t\t\t\tthis._client._disconnected( ERROR.PING_TIMEOUT.code , format(ERROR.PING_TIMEOUT));\n\t\t\t\t} else {\n\t\t\t\t\tthis.isReset = false;\n\t\t\t\t\tthis._client._trace(\"Pinger.doPing\", \"send PINGREQ\");\n\t\t\t\t\tthis._client.socket.send(pingReq);\n\t\t\t\t\tthis.timeout = setTimeout(doTimeout(this), this._keepAliveInterval);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.reset = function() {\n\t\t\t\tthis.isReset = true;\n\t\t\t\tclearTimeout(this.timeout);\n\t\t\t\tif (this._keepAliveInterval > 0)\n\t\t\t\t\tthis.timeout = setTimeout(doTimeout(this), this._keepAliveInterval);\n\t\t\t};\n\n\t\t\tthis.cancel = function() {\n\t\t\t\tclearTimeout(this.timeout);\n\t\t\t};\n\t\t};\n\n\t\t/**\n\t * Monitor request completion.\n\t * @ignore\n\t */\n\t\tvar Timeout = function(client, timeoutSeconds, action, args) {\n\t\t\tif (!timeoutSeconds)\n\t\t\t\ttimeoutSeconds = 30;\n\n\t\t\tvar doTimeout = function (action, client, args) {\n\t\t\t\treturn function () {\n\t\t\t\t\treturn action.apply(client, args);\n\t\t\t\t};\n\t\t\t};\n\t\t\tthis.timeout = setTimeout(doTimeout(action, client, args), timeoutSeconds * 1000);\n\n\t\t\tthis.cancel = function() {\n\t\t\t\tclearTimeout(this.timeout);\n\t\t\t};\n\t\t};\n\n\t/**\n\t * Internal implementation of the Websockets MQTT V3.1 client.\n\t *\n\t * @name Paho.ClientImpl @constructor\n\t * @param {String} host the DNS nameof the webSocket host.\n\t * @param {Number} port the port number for that host.\n\t * @param {String} clientId the MQ client identifier.\n\t */\n\t\tvar ClientImpl = function (uri, host, port, path, clientId) {\n\t\t// Check dependencies are satisfied in this browser.\n\t\t\tif (!(\"WebSocket\" in global && global.WebSocket !== null)) {\n\t\t\t\tthrow new Error(format(ERROR.UNSUPPORTED, [\"WebSocket\"]));\n\t\t\t}\n\t\t\tif (!(\"ArrayBuffer\" in global && global.ArrayBuffer !== null)) {\n\t\t\t\tthrow new Error(format(ERROR.UNSUPPORTED, [\"ArrayBuffer\"]));\n\t\t\t}\n\t\t\tthis._trace(\"Paho.Client\", uri, host, port, path, clientId);\n\n\t\t\tthis.host = host;\n\t\t\tthis.port = port;\n\t\t\tthis.path = path;\n\t\t\tthis.uri = uri;\n\t\t\tthis.clientId = clientId;\n\t\t\tthis._wsuri = null;\n\n\t\t\t// Local storagekeys are qualified with the following string.\n\t\t\t// The conditional inclusion of path in the key is for backward\n\t\t\t// compatibility to when the path was not configurable and assumed to\n\t\t\t// be /mqtt\n\t\t\tthis._localKey=host+\":\"+port+(path!=\"/mqtt\"?\":\"+path:\"\")+\":\"+clientId+\":\";\n\n\t\t\t// Create private instance-only message queue\n\t\t\t// Internal queue of messages to be sent, in sending order.\n\t\t\tthis._msg_queue = [];\n\t\t\tthis._buffered_msg_queue = [];\n\n\t\t\t// Messages we have sent and are expecting a response for, indexed by their respective message ids.\n\t\t\tthis._sentMessages = {};\n\n\t\t\t// Messages we have received and acknowleged and are expecting a confirm message for\n\t\t\t// indexed by their respective message ids.\n\t\t\tthis._receivedMessages = {};\n\n\t\t\t// Internal list of callbacks to be executed when messages\n\t\t\t// have been successfully sent over web socket, e.g. disconnect\n\t\t\t// when it doesn't have to wait for ACK, just message is dispatched.\n\t\t\tthis._notify_msg_sent = {};\n\n\t\t\t// Unique identifier for SEND messages, incrementing\n\t\t\t// counter as messages are sent.\n\t\t\tthis._message_identifier = 1;\n\n\t\t\t// Used to determine the transmission sequence of stored sent messages.\n\t\t\tthis._sequence = 0;\n\n\n\t\t\t// Load the local state, if any, from the saved version, only restore state relevant to this client.\n\t\t\tfor (var key in localStorage)\n\t\t\t\tif (   key.indexOf(\"Sent:\"+this._localKey) === 0 || key.indexOf(\"Received:\"+this._localKey) === 0)\n\t\t\t\t\tthis.restore(key);\n\t\t};\n\n\t\t// Messaging Client public instance members.\n\t\tClientImpl.prototype.host = null;\n\t\tClientImpl.prototype.port = null;\n\t\tClientImpl.prototype.path = null;\n\t\tClientImpl.prototype.uri = null;\n\t\tClientImpl.prototype.clientId = null;\n\n\t\t// Messaging Client private instance members.\n\t\tClientImpl.prototype.socket = null;\n\t\t/* true once we have received an acknowledgement to a CONNECT packet. */\n\t\tClientImpl.prototype.connected = false;\n\t\t/* The largest message identifier allowed, may not be larger than 2**16 but\n\t\t * if set smaller reduces the maximum number of outbound messages allowed.\n\t\t */\n\t\tClientImpl.prototype.maxMessageIdentifier = 65536;\n\t\tClientImpl.prototype.connectOptions = null;\n\t\tClientImpl.prototype.hostIndex = null;\n\t\tClientImpl.prototype.onConnected = null;\n\t\tClientImpl.prototype.onConnectionLost = null;\n\t\tClientImpl.prototype.onMessageDelivered = null;\n\t\tClientImpl.prototype.onMessageArrived = null;\n\t\tClientImpl.prototype.traceFunction = null;\n\t\tClientImpl.prototype._msg_queue = null;\n\t\tClientImpl.prototype._buffered_msg_queue = null;\n\t\tClientImpl.prototype._connectTimeout = null;\n\t\t/* The sendPinger monitors how long we allow before we send data to prove to the server that we are alive. */\n\t\tClientImpl.prototype.sendPinger = null;\n\t\t/* The receivePinger monitors how long we allow before we require evidence that the server is alive. */\n\t\tClientImpl.prototype.receivePinger = null;\n\t\tClientImpl.prototype._reconnectInterval = 1; // Reconnect Delay, starts at 1 second\n\t\tClientImpl.prototype._reconnecting = false;\n\t\tClientImpl.prototype._reconnectTimeout = null;\n\t\tClientImpl.prototype.disconnectedPublishing = false;\n\t\tClientImpl.prototype.disconnectedBufferSize = 5000;\n\n\t\tClientImpl.prototype.receiveBuffer = null;\n\n\t\tClientImpl.prototype._traceBuffer = null;\n\t\tClientImpl.prototype._MAX_TRACE_ENTRIES = 100;\n\n\t\tClientImpl.prototype.connect = function (connectOptions) {\n\t\t\tvar connectOptionsMasked = this._traceMask(connectOptions, \"password\");\n\t\t\tthis._trace(\"Client.connect\", connectOptionsMasked, this.socket, this.connected);\n\n\t\t\tif (this.connected)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"already connected\"]));\n\t\t\tif (this.socket)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"already connected\"]));\n\n\t\t\tif (this._reconnecting) {\n\t\t\t// connect() function is called while reconnect is in progress.\n\t\t\t// Terminate the auto reconnect process to use new connect options.\n\t\t\t\tthis._reconnectTimeout.cancel();\n\t\t\t\tthis._reconnectTimeout = null;\n\t\t\t\tthis._reconnecting = false;\n\t\t\t}\n\n\t\t\tthis.connectOptions = connectOptions;\n\t\t\tthis._reconnectInterval = 1;\n\t\t\tthis._reconnecting = false;\n\t\t\tif (connectOptions.uris) {\n\t\t\t\tthis.hostIndex = 0;\n\t\t\t\tthis._doConnect(connectOptions.uris[0]);\n\t\t\t} else {\n\t\t\t\tthis._doConnect(this.uri);\n\t\t\t}\n\n\t\t};\n\n\t\tClientImpl.prototype.subscribe = function (filter, subscribeOptions) {\n\t\t\tthis._trace(\"Client.subscribe\", filter, subscribeOptions);\n\n\t\t\tif (!this.connected)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"not connected\"]));\n\n            var wireMessage = new WireMessage(MESSAGE_TYPE.SUBSCRIBE);\n            wireMessage.topics = filter.constructor === Array ? filter : [filter];\n            if (subscribeOptions.qos === undefined)\n                subscribeOptions.qos = 0;\n            wireMessage.requestedQos = [];\n            for (var i = 0; i < wireMessage.topics.length; i++)\n                wireMessage.requestedQos[i] = subscribeOptions.qos;\n\n\t\t\tif (subscribeOptions.onSuccess) {\n\t\t\t\twireMessage.onSuccess = function(grantedQos) {subscribeOptions.onSuccess({invocationContext:subscribeOptions.invocationContext,grantedQos:grantedQos});};\n\t\t\t}\n\n\t\t\tif (subscribeOptions.onFailure) {\n\t\t\t\twireMessage.onFailure = function(errorCode) {subscribeOptions.onFailure({invocationContext:subscribeOptions.invocationContext,errorCode:errorCode, errorMessage:format(errorCode)});};\n\t\t\t}\n\n\t\t\tif (subscribeOptions.timeout) {\n\t\t\t\twireMessage.timeOut = new Timeout(this, subscribeOptions.timeout, subscribeOptions.onFailure,\n\t\t\t\t\t[{invocationContext:subscribeOptions.invocationContext,\n\t\t\t\t\t\terrorCode:ERROR.SUBSCRIBE_TIMEOUT.code,\n\t\t\t\t\t\terrorMessage:format(ERROR.SUBSCRIBE_TIMEOUT)}]);\n\t\t\t}\n\n\t\t\t// All subscriptions return a SUBACK.\n\t\t\tthis._requires_ack(wireMessage);\n\t\t\tthis._schedule_message(wireMessage);\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype.unsubscribe = function(filter, unsubscribeOptions) {\n\t\t\tthis._trace(\"Client.unsubscribe\", filter, unsubscribeOptions);\n\n\t\t\tif (!this.connected)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"not connected\"]));\n\n            var wireMessage = new WireMessage(MESSAGE_TYPE.UNSUBSCRIBE);\n            wireMessage.topics = filter.constructor === Array ? filter : [filter];\n\n\t\t\tif (unsubscribeOptions.onSuccess) {\n\t\t\t\twireMessage.callback = function() {unsubscribeOptions.onSuccess({invocationContext:unsubscribeOptions.invocationContext});};\n\t\t\t}\n\t\t\tif (unsubscribeOptions.timeout) {\n\t\t\t\twireMessage.timeOut = new Timeout(this, unsubscribeOptions.timeout, unsubscribeOptions.onFailure,\n\t\t\t\t\t[{invocationContext:unsubscribeOptions.invocationContext,\n\t\t\t\t\t\terrorCode:ERROR.UNSUBSCRIBE_TIMEOUT.code,\n\t\t\t\t\t\terrorMessage:format(ERROR.UNSUBSCRIBE_TIMEOUT)}]);\n\t\t\t}\n\n\t\t\t// All unsubscribes return a SUBACK.\n\t\t\tthis._requires_ack(wireMessage);\n\t\t\tthis._schedule_message(wireMessage);\n\t\t};\n\n\t\tClientImpl.prototype.send = function (message) {\n\t\t\tthis._trace(\"Client.send\", message);\n\n\t\t\tvar wireMessage = new WireMessage(MESSAGE_TYPE.PUBLISH);\n\t\t\twireMessage.payloadMessage = message;\n\n\t\t\tif (this.connected) {\n\t\t\t// Mark qos 1 & 2 message as \"ACK required\"\n\t\t\t// For qos 0 message, invoke onMessageDelivered callback if there is one.\n\t\t\t// Then schedule the message.\n\t\t\t\tif (message.qos > 0) {\n\t\t\t\t\tthis._requires_ack(wireMessage);\n\t\t\t\t} else if (this.onMessageDelivered) {\n\t\t\t\t\tthis._notify_msg_sent[wireMessage] = this.onMessageDelivered(wireMessage.payloadMessage);\n\t\t\t\t}\n\t\t\t\tthis._schedule_message(wireMessage);\n\t\t\t} else {\n\t\t\t// Currently disconnected, will not schedule this message\n\t\t\t// Check if reconnecting is in progress and disconnected publish is enabled.\n\t\t\t\tif (this._reconnecting && this.disconnectedPublishing) {\n\t\t\t\t// Check the limit which include the \"required ACK\" messages\n\t\t\t\t\tvar messageCount = Object.keys(this._sentMessages).length + this._buffered_msg_queue.length;\n\t\t\t\t\tif (messageCount > this.disconnectedBufferSize) {\n\t\t\t\t\t\tthrow new Error(format(ERROR.BUFFER_FULL, [this.disconnectedBufferSize]));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (message.qos > 0) {\n\t\t\t\t\t\t// Mark this message as \"ACK required\"\n\t\t\t\t\t\t\tthis._requires_ack(wireMessage);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\twireMessage.sequence = ++this._sequence;\n\t\t\t\t\t\t\t// Add messages in fifo order to array, by adding to start\n\t\t\t\t\t\t\tthis._buffered_msg_queue.unshift(wireMessage);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"not connected\"]));\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tClientImpl.prototype.disconnect = function () {\n\t\t\tthis._trace(\"Client.disconnect\");\n\n\t\t\tif (this._reconnecting) {\n\t\t\t// disconnect() function is called while reconnect is in progress.\n\t\t\t// Terminate the auto reconnect process.\n\t\t\t\tthis._reconnectTimeout.cancel();\n\t\t\t\tthis._reconnectTimeout = null;\n\t\t\t\tthis._reconnecting = false;\n\t\t\t}\n\n\t\t\tif (!this.socket)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"not connecting or connected\"]));\n\n\t\t\tvar wireMessage = new WireMessage(MESSAGE_TYPE.DISCONNECT);\n\n\t\t\t// Run the disconnected call back as soon as the message has been sent,\n\t\t\t// in case of a failure later on in the disconnect processing.\n\t\t\t// as a consequence, the _disconected call back may be run several times.\n\t\t\tthis._notify_msg_sent[wireMessage] = scope(this._disconnected, this);\n\n\t\t\tthis._schedule_message(wireMessage);\n\t\t};\n\n\t\tClientImpl.prototype.getTraceLog = function () {\n\t\t\tif ( this._traceBuffer !== null ) {\n\t\t\t\tthis._trace(\"Client.getTraceLog\", new Date());\n\t\t\t\tthis._trace(\"Client.getTraceLog in flight messages\", this._sentMessages.length);\n\t\t\t\tfor (var key in this._sentMessages)\n\t\t\t\t\tthis._trace(\"_sentMessages \",key, this._sentMessages[key]);\n\t\t\t\tfor (var key in this._receivedMessages)\n\t\t\t\t\tthis._trace(\"_receivedMessages \",key, this._receivedMessages[key]);\n\n\t\t\t\treturn this._traceBuffer;\n\t\t\t}\n\t\t};\n\n\t\tClientImpl.prototype.startTrace = function () {\n\t\t\tif ( this._traceBuffer === null ) {\n\t\t\t\tthis._traceBuffer = [];\n\t\t\t}\n\t\t\tthis._trace(\"Client.startTrace\", new Date(), version);\n\t\t};\n\n\t\tClientImpl.prototype.stopTrace = function () {\n\t\t\tdelete this._traceBuffer;\n\t\t};\n\n\t\tClientImpl.prototype._doConnect = function (wsurl) {\n\t\t// When the socket is open, this client will send the CONNECT WireMessage using the saved parameters.\n\t\t\tif (this.connectOptions.useSSL) {\n\t\t\t\tvar uriParts = wsurl.split(\":\");\n\t\t\t\turiParts[0] = \"wss\";\n\t\t\t\twsurl = uriParts.join(\":\");\n\t\t\t}\n\t\t\tthis._wsuri = wsurl;\n\t\t\tthis.connected = false;\n\n\n\n\t\t\tif (this.connectOptions.mqttVersion < 4) {\n\t\t\t\tthis.socket = new WebSocket(wsurl, [\"mqttv3.1\"]);\n\t\t\t} else {\n\t\t\t\tthis.socket = new WebSocket(wsurl, [\"mqtt\"]);\n\t\t\t}\n\t\t\tthis.socket.binaryType = \"arraybuffer\";\n\t\t\tthis.socket.onopen = scope(this._on_socket_open, this);\n\t\t\tthis.socket.onmessage = scope(this._on_socket_message, this);\n\t\t\tthis.socket.onerror = scope(this._on_socket_error, this);\n\t\t\tthis.socket.onclose = scope(this._on_socket_close, this);\n\n\t\t\tthis.sendPinger = new Pinger(this, this.connectOptions.keepAliveInterval);\n\t\t\tthis.receivePinger = new Pinger(this, this.connectOptions.keepAliveInterval);\n\t\t\tif (this._connectTimeout) {\n\t\t\t\tthis._connectTimeout.cancel();\n\t\t\t\tthis._connectTimeout = null;\n\t\t\t}\n\t\t\tthis._connectTimeout = new Timeout(this, this.connectOptions.timeout, this._disconnected,  [ERROR.CONNECT_TIMEOUT.code, format(ERROR.CONNECT_TIMEOUT)]);\n\t\t};\n\n\n\t\t// Schedule a new message to be sent over the WebSockets\n\t\t// connection. CONNECT messages cause WebSocket connection\n\t\t// to be started. All other messages are queued internally\n\t\t// until this has happened. When WS connection starts, process\n\t\t// all outstanding messages.\n\t\tClientImpl.prototype._schedule_message = function (message) {\n\t\t\t// Add messages in fifo order to array, by adding to start\n\t\t\tthis._msg_queue.unshift(message);\n\t\t\t// Process outstanding messages in the queue if we have an  open socket, and have received CONNACK.\n\t\t\tif (this.connected) {\n\t\t\t\tthis._process_queue();\n\t\t\t}\n\t\t};\n\n\t\tClientImpl.prototype.store = function(prefix, wireMessage) {\n\t\t\tvar storedMessage = {type:wireMessage.type, messageIdentifier:wireMessage.messageIdentifier, version:1};\n\n\t\t\tswitch(wireMessage.type) {\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\tif(wireMessage.pubRecReceived)\n\t\t\t\t\tstoredMessage.pubRecReceived = true;\n\n\t\t\t\t// Convert the payload to a hex string.\n\t\t\t\tstoredMessage.payloadMessage = {};\n\t\t\t\tvar hex = \"\";\n\t\t\t\tvar messageBytes = wireMessage.payloadMessage.payloadBytes;\n\t\t\t\tfor (var i=0; i<messageBytes.length; i++) {\n\t\t\t\t\tif (messageBytes[i] <= 0xF)\n\t\t\t\t\t\thex = hex+\"0\"+messageBytes[i].toString(16);\n\t\t\t\t\telse\n\t\t\t\t\t\thex = hex+messageBytes[i].toString(16);\n\t\t\t\t}\n\t\t\t\tstoredMessage.payloadMessage.payloadHex = hex;\n\n\t\t\t\tstoredMessage.payloadMessage.qos = wireMessage.payloadMessage.qos;\n\t\t\t\tstoredMessage.payloadMessage.destinationName = wireMessage.payloadMessage.destinationName;\n\t\t\t\tif (wireMessage.payloadMessage.duplicate)\n\t\t\t\t\tstoredMessage.payloadMessage.duplicate = true;\n\t\t\t\tif (wireMessage.payloadMessage.retained)\n\t\t\t\t\tstoredMessage.payloadMessage.retained = true;\n\n\t\t\t\t// Add a sequence number to sent messages.\n\t\t\t\tif ( prefix.indexOf(\"Sent:\") === 0 ) {\n\t\t\t\t\tif ( wireMessage.sequence === undefined )\n\t\t\t\t\t\twireMessage.sequence = ++this._sequence;\n\t\t\t\t\tstoredMessage.sequence = wireMessage.sequence;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow Error(format(ERROR.INVALID_STORED_DATA, [prefix+this._localKey+wireMessage.messageIdentifier, storedMessage]));\n\t\t\t}\n\t\t\tlocalStorage.setItem(prefix+this._localKey+wireMessage.messageIdentifier, JSON.stringify(storedMessage));\n\t\t};\n\n\t\tClientImpl.prototype.restore = function(key) {\n\t\t\tvar value = localStorage.getItem(key);\n\t\t\tvar storedMessage = JSON.parse(value);\n\n\t\t\tvar wireMessage = new WireMessage(storedMessage.type, storedMessage);\n\n\t\t\tswitch(storedMessage.type) {\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\t// Replace the payload message with a Message object.\n\t\t\t\tvar hex = storedMessage.payloadMessage.payloadHex;\n\t\t\t\tvar buffer = new ArrayBuffer((hex.length)/2);\n\t\t\t\tvar byteStream = new Uint8Array(buffer);\n\t\t\t\tvar i = 0;\n\t\t\t\twhile (hex.length >= 2) {\n\t\t\t\t\tvar x = parseInt(hex.substring(0, 2), 16);\n\t\t\t\t\thex = hex.substring(2, hex.length);\n\t\t\t\t\tbyteStream[i++] = x;\n\t\t\t\t}\n\t\t\t\tvar payloadMessage = new Message(byteStream);\n\n\t\t\t\tpayloadMessage.qos = storedMessage.payloadMessage.qos;\n\t\t\t\tpayloadMessage.destinationName = storedMessage.payloadMessage.destinationName;\n\t\t\t\tif (storedMessage.payloadMessage.duplicate)\n\t\t\t\t\tpayloadMessage.duplicate = true;\n\t\t\t\tif (storedMessage.payloadMessage.retained)\n\t\t\t\t\tpayloadMessage.retained = true;\n\t\t\t\twireMessage.payloadMessage = payloadMessage;\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow Error(format(ERROR.INVALID_STORED_DATA, [key, value]));\n\t\t\t}\n\n\t\t\tif (key.indexOf(\"Sent:\"+this._localKey) === 0) {\n\t\t\t\twireMessage.payloadMessage.duplicate = true;\n\t\t\t\tthis._sentMessages[wireMessage.messageIdentifier] = wireMessage;\n\t\t\t} else if (key.indexOf(\"Received:\"+this._localKey) === 0) {\n\t\t\t\tthis._receivedMessages[wireMessage.messageIdentifier] = wireMessage;\n\t\t\t}\n\t\t};\n\n\t\tClientImpl.prototype._process_queue = function () {\n\t\t\tvar message = null;\n\n\t\t\t// Send all queued messages down socket connection\n\t\t\twhile ((message = this._msg_queue.pop())) {\n\t\t\t\tthis._socket_send(message);\n\t\t\t\t// Notify listeners that message was successfully sent\n\t\t\t\tif (this._notify_msg_sent[message]) {\n\t\t\t\t\tthis._notify_msg_sent[message]();\n\t\t\t\t\tdelete this._notify_msg_sent[message];\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t * Expect an ACK response for this message. Add message to the set of in progress\n\t * messages and set an unused identifier in this message.\n\t * @ignore\n\t */\n\t\tClientImpl.prototype._requires_ack = function (wireMessage) {\n\t\t\tvar messageCount = Object.keys(this._sentMessages).length;\n\t\t\tif (messageCount > this.maxMessageIdentifier)\n\t\t\t\tthrow Error (\"Too many messages:\"+messageCount);\n\n\t\t\twhile(this._sentMessages[this._message_identifier] !== undefined) {\n\t\t\t\tthis._message_identifier++;\n\t\t\t}\n\t\t\twireMessage.messageIdentifier = this._message_identifier;\n\t\t\tthis._sentMessages[wireMessage.messageIdentifier] = wireMessage;\n\t\t\tif (wireMessage.type === MESSAGE_TYPE.PUBLISH) {\n\t\t\t\tthis.store(\"Sent:\", wireMessage);\n\t\t\t}\n\t\t\tif (this._message_identifier === this.maxMessageIdentifier) {\n\t\t\t\tthis._message_identifier = 1;\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t * Called when the underlying websocket has been opened.\n\t * @ignore\n\t */\n\t\tClientImpl.prototype._on_socket_open = function () {\n\t\t// Create the CONNECT message object.\n\t\t\tvar wireMessage = new WireMessage(MESSAGE_TYPE.CONNECT, this.connectOptions);\n\t\t\twireMessage.clientId = this.clientId;\n\t\t\tthis._socket_send(wireMessage);\n\t\t};\n\n\t\t/**\n\t * Called when the underlying websocket has received a complete packet.\n\t * @ignore\n\t */\n\t\tClientImpl.prototype._on_socket_message = function (event) {\n\t\t\tthis._trace(\"Client._on_socket_message\", event.data);\n\t\t\tvar messages = this._deframeMessages(event.data);\n\t\t\tfor (var i = 0; i < messages.length; i+=1) {\n\t\t\t\tthis._handleMessage(messages[i]);\n\t\t\t}\n\t\t};\n\n\t\tClientImpl.prototype._deframeMessages = function(data) {\n\t\t\tvar byteArray = new Uint8Array(data);\n\t\t\tvar messages = [];\n\t\t\tif (this.receiveBuffer) {\n\t\t\t\tvar newData = new Uint8Array(this.receiveBuffer.length+byteArray.length);\n\t\t\t\tnewData.set(this.receiveBuffer);\n\t\t\t\tnewData.set(byteArray,this.receiveBuffer.length);\n\t\t\t\tbyteArray = newData;\n\t\t\t\tdelete this.receiveBuffer;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tvar offset = 0;\n\t\t\t\twhile(offset < byteArray.length) {\n\t\t\t\t\tvar result = decodeMessage(byteArray,offset);\n\t\t\t\t\tvar wireMessage = result[0];\n\t\t\t\t\toffset = result[1];\n\t\t\t\t\tif (wireMessage !== null) {\n\t\t\t\t\t\tmessages.push(wireMessage);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (offset < byteArray.length) {\n\t\t\t\t\tthis.receiveBuffer = byteArray.subarray(offset);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tvar errorStack = ((error.hasOwnProperty(\"stack\") == \"undefined\") ? error.stack.toString() : \"No Error Stack Available\");\n\t\t\t\tthis._disconnected(ERROR.INTERNAL_ERROR.code , format(ERROR.INTERNAL_ERROR, [error.message,errorStack]));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn messages;\n\t\t};\n\n\t\tClientImpl.prototype._handleMessage = function(wireMessage) {\n\n\t\t\tthis._trace(\"Client._handleMessage\", wireMessage);\n\n\t\t\ttry {\n\t\t\t\tswitch(wireMessage.type) {\n\t\t\t\tcase MESSAGE_TYPE.CONNACK:\n\t\t\t\t\tthis._connectTimeout.cancel();\n\t\t\t\t\tif (this._reconnectTimeout)\n\t\t\t\t\t\tthis._reconnectTimeout.cancel();\n\n\t\t\t\t\t// If we have started using clean session then clear up the local state.\n\t\t\t\t\tif (this.connectOptions.cleanSession) {\n\t\t\t\t\t\tfor (var key in this._sentMessages) {\n\t\t\t\t\t\t\tvar sentMessage = this._sentMessages[key];\n\t\t\t\t\t\t\tlocalStorage.removeItem(\"Sent:\"+this._localKey+sentMessage.messageIdentifier);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._sentMessages = {};\n\n\t\t\t\t\t\tfor (var key in this._receivedMessages) {\n\t\t\t\t\t\t\tvar receivedMessage = this._receivedMessages[key];\n\t\t\t\t\t\t\tlocalStorage.removeItem(\"Received:\"+this._localKey+receivedMessage.messageIdentifier);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._receivedMessages = {};\n\t\t\t\t\t}\n\t\t\t\t\t// Client connected and ready for business.\n\t\t\t\t\tif (wireMessage.returnCode === 0) {\n\n\t\t\t\t\t\tthis.connected = true;\n\t\t\t\t\t\t// Jump to the end of the list of uris and stop looking for a good host.\n\n\t\t\t\t\t\tif (this.connectOptions.uris)\n\t\t\t\t\t\t\tthis.hostIndex = this.connectOptions.uris.length;\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._disconnected(ERROR.CONNACK_RETURNCODE.code , format(ERROR.CONNACK_RETURNCODE, [wireMessage.returnCode, CONNACK_RC[wireMessage.returnCode]]));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Resend messages.\n\t\t\t\t\tvar sequencedMessages = [];\n\t\t\t\t\tfor (var msgId in this._sentMessages) {\n\t\t\t\t\t\tif (this._sentMessages.hasOwnProperty(msgId))\n\t\t\t\t\t\t\tsequencedMessages.push(this._sentMessages[msgId]);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Also schedule qos 0 buffered messages if any\n\t\t\t\t\tif (this._buffered_msg_queue.length > 0) {\n\t\t\t\t\t\tvar msg = null;\n\t\t\t\t\t\twhile ((msg = this._buffered_msg_queue.pop())) {\n\t\t\t\t\t\t\tsequencedMessages.push(msg);\n\t\t\t\t\t\t\tif (this.onMessageDelivered)\n\t\t\t\t\t\t\t\tthis._notify_msg_sent[msg] = this.onMessageDelivered(msg.payloadMessage);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Sort sentMessages into the original sent order.\n\t\t\t\t\tvar sequencedMessages = sequencedMessages.sort(function(a,b) {return a.sequence - b.sequence;} );\n\t\t\t\t\tfor (var i=0, len=sequencedMessages.length; i<len; i++) {\n\t\t\t\t\t\tvar sentMessage = sequencedMessages[i];\n\t\t\t\t\t\tif (sentMessage.type == MESSAGE_TYPE.PUBLISH && sentMessage.pubRecReceived) {\n\t\t\t\t\t\t\tvar pubRelMessage = new WireMessage(MESSAGE_TYPE.PUBREL, {messageIdentifier:sentMessage.messageIdentifier});\n\t\t\t\t\t\t\tthis._schedule_message(pubRelMessage);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._schedule_message(sentMessage);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Execute the connectOptions.onSuccess callback if there is one.\n\t\t\t\t\t// Will also now return if this connection was the result of an automatic\n\t\t\t\t\t// reconnect and which URI was successfully connected to.\n\t\t\t\t\tif (this.connectOptions.onSuccess) {\n\t\t\t\t\t\tthis.connectOptions.onSuccess({invocationContext:this.connectOptions.invocationContext});\n\t\t\t\t\t}\n\n\t\t\t\t\tvar reconnected = false;\n\t\t\t\t\tif (this._reconnecting) {\n\t\t\t\t\t\treconnected = true;\n\t\t\t\t\t\tthis._reconnectInterval = 1;\n\t\t\t\t\t\tthis._reconnecting = false;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Execute the onConnected callback if there is one.\n\t\t\t\t\tthis._connected(reconnected, this._wsuri);\n\n\t\t\t\t\t// Process all queued messages now that the connection is established.\n\t\t\t\t\tthis._process_queue();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\t\tthis._receivePublish(wireMessage);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.PUBACK:\n\t\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\t// If this is a re flow of a PUBACK after we have restarted receivedMessage will not exist.\n\t\t\t\t\tif (sentMessage) {\n\t\t\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\t\tlocalStorage.removeItem(\"Sent:\"+this._localKey+wireMessage.messageIdentifier);\n\t\t\t\t\t\tif (this.onMessageDelivered)\n\t\t\t\t\t\t\tthis.onMessageDelivered(sentMessage.payloadMessage);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.PUBREC:\n\t\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\t// If this is a re flow of a PUBREC after we have restarted receivedMessage will not exist.\n\t\t\t\t\tif (sentMessage) {\n\t\t\t\t\t\tsentMessage.pubRecReceived = true;\n\t\t\t\t\t\tvar pubRelMessage = new WireMessage(MESSAGE_TYPE.PUBREL, {messageIdentifier:wireMessage.messageIdentifier});\n\t\t\t\t\t\tthis.store(\"Sent:\", sentMessage);\n\t\t\t\t\t\tthis._schedule_message(pubRelMessage);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.PUBREL:\n\t\t\t\t\tvar receivedMessage = this._receivedMessages[wireMessage.messageIdentifier];\n\t\t\t\t\tlocalStorage.removeItem(\"Received:\"+this._localKey+wireMessage.messageIdentifier);\n\t\t\t\t\t// If this is a re flow of a PUBREL after we have restarted receivedMessage will not exist.\n\t\t\t\t\tif (receivedMessage) {\n\t\t\t\t\t\tthis._receiveMessage(receivedMessage);\n\t\t\t\t\t\tdelete this._receivedMessages[wireMessage.messageIdentifier];\n\t\t\t\t\t}\n\t\t\t\t\t// Always flow PubComp, we may have previously flowed PubComp but the server lost it and restarted.\n\t\t\t\t\tvar pubCompMessage = new WireMessage(MESSAGE_TYPE.PUBCOMP, {messageIdentifier:wireMessage.messageIdentifier});\n\t\t\t\t\tthis._schedule_message(pubCompMessage);\n\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.PUBCOMP:\n\t\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\tlocalStorage.removeItem(\"Sent:\"+this._localKey+wireMessage.messageIdentifier);\n\t\t\t\t\tif (this.onMessageDelivered)\n\t\t\t\t\t\tthis.onMessageDelivered(sentMessage.payloadMessage);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.SUBACK:\n\t\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\tif (sentMessage) {\n\t\t\t\t\t\tif(sentMessage.timeOut)\n\t\t\t\t\t\t\tsentMessage.timeOut.cancel();\n\t\t\t\t\t\t// This will need to be fixed when we add multiple topic support\n\t\t\t\t\t\tif (wireMessage.returnCode[0] === 0x80) {\n\t\t\t\t\t\t\tif (sentMessage.onFailure) {\n\t\t\t\t\t\t\t\tsentMessage.onFailure(wireMessage.returnCode);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (sentMessage.onSuccess) {\n\t\t\t\t\t\t\tsentMessage.onSuccess(wireMessage.returnCode);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.UNSUBACK:\n\t\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\tif (sentMessage) {\n\t\t\t\t\t\tif (sentMessage.timeOut)\n\t\t\t\t\t\t\tsentMessage.timeOut.cancel();\n\t\t\t\t\t\tif (sentMessage.callback) {\n\t\t\t\t\t\t\tsentMessage.callback();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.PINGRESP:\n\t\t\t\t/* The sendPinger or receivePinger may have sent a ping, the receivePinger has already been reset. */\n\t\t\t\t\tthis.sendPinger.reset();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.DISCONNECT:\n\t\t\t\t// Clients do not expect to receive disconnect packets.\n\t\t\t\t\tthis._disconnected(ERROR.INVALID_MQTT_MESSAGE_TYPE.code , format(ERROR.INVALID_MQTT_MESSAGE_TYPE, [wireMessage.type]));\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthis._disconnected(ERROR.INVALID_MQTT_MESSAGE_TYPE.code , format(ERROR.INVALID_MQTT_MESSAGE_TYPE, [wireMessage.type]));\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tvar errorStack = ((error.hasOwnProperty(\"stack\") == \"undefined\") ? error.stack.toString() : \"No Error Stack Available\");\n\t\t\t\tthis._disconnected(ERROR.INTERNAL_ERROR.code , format(ERROR.INTERNAL_ERROR, [error.message,errorStack]));\n\t\t\t\treturn;\n\t\t\t}\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._on_socket_error = function (error) {\n\t\t\tif (!this._reconnecting) {\n\t\t\t\tthis._disconnected(ERROR.SOCKET_ERROR.code , format(ERROR.SOCKET_ERROR, [error.data]));\n\t\t\t}\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._on_socket_close = function () {\n\t\t\tif (!this._reconnecting) {\n\t\t\t\tthis._disconnected(ERROR.SOCKET_CLOSE.code , format(ERROR.SOCKET_CLOSE));\n\t\t\t}\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._socket_send = function (wireMessage) {\n\n\t\t\tif (wireMessage.type == 1) {\n\t\t\t\tvar wireMessageMasked = this._traceMask(wireMessage, \"password\");\n\t\t\t\tthis._trace(\"Client._socket_send\", wireMessageMasked);\n\t\t\t}\n\t\t\telse this._trace(\"Client._socket_send\", wireMessage);\n\n\t\t\tthis.socket.send(wireMessage.encode());\n\t\t\t/* We have proved to the server we are alive. */\n\t\t\tthis.sendPinger.reset();\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._receivePublish = function (wireMessage) {\n\t\t\tswitch(wireMessage.payloadMessage.qos) {\n\t\t\tcase \"undefined\":\n\t\t\tcase 0:\n\t\t\t\tthis._receiveMessage(wireMessage);\n\t\t\t\tbreak;\n\n\t\t\tcase 1:\n\t\t\t\tvar pubAckMessage = new WireMessage(MESSAGE_TYPE.PUBACK, {messageIdentifier:wireMessage.messageIdentifier});\n\t\t\t\tthis._schedule_message(pubAckMessage);\n\t\t\t\tthis._receiveMessage(wireMessage);\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\t\t\t\tthis._receivedMessages[wireMessage.messageIdentifier] = wireMessage;\n\t\t\t\tthis.store(\"Received:\", wireMessage);\n\t\t\t\tvar pubRecMessage = new WireMessage(MESSAGE_TYPE.PUBREC, {messageIdentifier:wireMessage.messageIdentifier});\n\t\t\t\tthis._schedule_message(pubRecMessage);\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow Error(\"Invaild qos=\" + wireMessage.payloadMessage.qos);\n\t\t\t}\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._receiveMessage = function (wireMessage) {\n\t\t\tif (this.onMessageArrived) {\n\t\t\t\tthis.onMessageArrived(wireMessage.payloadMessage);\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t * Client has connected.\n\t * @param {reconnect} [boolean] indicate if this was a result of reconnect operation.\n\t * @param {uri} [string] fully qualified WebSocket URI of the server.\n\t */\n\t\tClientImpl.prototype._connected = function (reconnect, uri) {\n\t\t// Execute the onConnected callback if there is one.\n\t\t\tif (this.onConnected)\n\t\t\t\tthis.onConnected(reconnect, uri);\n\t\t};\n\n\t\t/**\n\t * Attempts to reconnect the client to the server.\n   * For each reconnect attempt, will double the reconnect interval\n   * up to 128 seconds.\n\t */\n\t\tClientImpl.prototype._reconnect = function () {\n\t\t\tthis._trace(\"Client._reconnect\");\n\t\t\tif (!this.connected) {\n\t\t\t\tthis._reconnecting = true;\n\t\t\t\tthis.sendPinger.cancel();\n\t\t\t\tthis.receivePinger.cancel();\n\t\t\t\tif (this._reconnectInterval < 128)\n\t\t\t\t\tthis._reconnectInterval = this._reconnectInterval * 2;\n\t\t\t\tif (this.connectOptions.uris) {\n\t\t\t\t\tthis.hostIndex = 0;\n\t\t\t\t\tthis._doConnect(this.connectOptions.uris[0]);\n\t\t\t\t} else {\n\t\t\t\t\tthis._doConnect(this.uri);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t * Client has disconnected either at its own request or because the server\n\t * or network disconnected it. Remove all non-durable state.\n\t * @param {errorCode} [number] the error number.\n\t * @param {errorText} [string] the error text.\n\t * @ignore\n\t */\n\t\tClientImpl.prototype._disconnected = function (errorCode, errorText) {\n\t\t\tthis._trace(\"Client._disconnected\", errorCode, errorText);\n\n\t\t\tif (errorCode !== undefined && this._reconnecting) {\n\t\t\t\t//Continue automatic reconnect process\n\t\t\t\tthis._reconnectTimeout = new Timeout(this, this._reconnectInterval, this._reconnect);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.sendPinger.cancel();\n\t\t\tthis.receivePinger.cancel();\n\t\t\tif (this._connectTimeout) {\n\t\t\t\tthis._connectTimeout.cancel();\n\t\t\t\tthis._connectTimeout = null;\n\t\t\t}\n\n\t\t\t// Clear message buffers.\n\t\t\tthis._msg_queue = [];\n\t\t\tthis._buffered_msg_queue = [];\n\t\t\tthis._notify_msg_sent = {};\n\n\t\t\tif (this.socket) {\n\t\t\t// Cancel all socket callbacks so that they cannot be driven again by this socket.\n\t\t\t\tthis.socket.onopen = null;\n\t\t\t\tthis.socket.onmessage = null;\n\t\t\t\tthis.socket.onerror = null;\n\t\t\t\tthis.socket.onclose = null;\n\t\t\t\tif (this.socket.readyState === 1)\n\t\t\t\t\tthis.socket.close();\n\t\t\t\tdelete this.socket;\n\t\t\t}\n\n\t\t\tif (this.connectOptions.uris && this.hostIndex < this.connectOptions.uris.length-1) {\n\t\t\t// Try the next host.\n\t\t\t\tthis.hostIndex++;\n\t\t\t\tthis._doConnect(this.connectOptions.uris[this.hostIndex]);\n\t\t\t} else {\n\n\t\t\t\tif (errorCode === undefined) {\n\t\t\t\t\terrorCode = ERROR.OK.code;\n\t\t\t\t\terrorText = format(ERROR.OK);\n\t\t\t\t}\n\n\t\t\t\t// Run any application callbacks last as they may attempt to reconnect and hence create a new socket.\n\t\t\t\tif (this.connected) {\n\t\t\t\t\tthis.connected = false;\n\t\t\t\t\t// Execute the connectionLostCallback if there is one, and we were connected.\n\t\t\t\t\tif (this.onConnectionLost) {\n\t\t\t\t\t\tthis.onConnectionLost({errorCode:errorCode, errorMessage:errorText, reconnect:this.connectOptions.reconnect, uri:this._wsuri});\n\t\t\t\t\t}\n\t\t\t\t\tif (errorCode !== ERROR.OK.code && this.connectOptions.reconnect) {\n\t\t\t\t\t// Start automatic reconnect process for the very first time since last successful connect.\n\t\t\t\t\t\tthis._reconnectInterval = 1;\n\t\t\t\t\t\tthis._reconnect();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t// Otherwise we never had a connection, so indicate that the connect has failed.\n\t\t\t\t\tif (this.connectOptions.mqttVersion === 4 && this.connectOptions.mqttVersionExplicit === false) {\n\t\t\t\t\t\tthis._trace(\"Failed to connect V4, dropping back to V3\");\n\t\t\t\t\t\tthis.connectOptions.mqttVersion = 3;\n\t\t\t\t\t\tif (this.connectOptions.uris) {\n\t\t\t\t\t\t\tthis.hostIndex = 0;\n\t\t\t\t\t\t\tthis._doConnect(this.connectOptions.uris[0]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._doConnect(this.uri);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if(this.connectOptions.onFailure) {\n\t\t\t\t\t\tthis.connectOptions.onFailure({invocationContext:this.connectOptions.invocationContext, errorCode:errorCode, errorMessage:errorText});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._trace = function () {\n\t\t// Pass trace message back to client's callback function\n\t\t\tif (this.traceFunction) {\n\t\t\t\tvar args = Array.prototype.slice.call(arguments);\n\t\t\t\tfor (var i in args)\n\t\t\t\t{\n\t\t\t\t\tif (typeof args[i] !== \"undefined\")\n\t\t\t\t\t\targs.splice(i, 1, JSON.stringify(args[i]));\n\t\t\t\t}\n\t\t\t\tvar record = args.join(\"\");\n\t\t\t\tthis.traceFunction ({severity: \"Debug\", message: record\t});\n\t\t\t}\n\n\t\t\t//buffer style trace\n\t\t\tif ( this._traceBuffer !== null ) {\n\t\t\t\tfor (var i = 0, max = arguments.length; i < max; i++) {\n\t\t\t\t\tif ( this._traceBuffer.length == this._MAX_TRACE_ENTRIES ) {\n\t\t\t\t\t\tthis._traceBuffer.shift();\n\t\t\t\t\t}\n\t\t\t\t\tif (i === 0) this._traceBuffer.push(arguments[i]);\n\t\t\t\t\telse if (typeof arguments[i] === \"undefined\" ) this._traceBuffer.push(arguments[i]);\n\t\t\t\t\telse this._traceBuffer.push(\"  \"+JSON.stringify(arguments[i]));\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._traceMask = function (traceObject, masked) {\n\t\t\tvar traceObjectMasked = {};\n\t\t\tfor (var attr in traceObject) {\n\t\t\t\tif (traceObject.hasOwnProperty(attr)) {\n\t\t\t\t\tif (attr == masked)\n\t\t\t\t\t\ttraceObjectMasked[attr] = \"******\";\n\t\t\t\t\telse\n\t\t\t\t\t\ttraceObjectMasked[attr] = traceObject[attr];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn traceObjectMasked;\n\t\t};\n\n\t\t// ------------------------------------------------------------------------\n\t\t// Public Programming interface.\n\t\t// ------------------------------------------------------------------------\n\n\t\t/**\n\t * The JavaScript application communicates to the server using a {@link Paho.Client} object.\n\t * <p>\n\t * Most applications will create just one Client object and then call its connect() method,\n\t * however applications can create more than one Client object if they wish.\n\t * In this case the combination of host, port and clientId attributes must be different for each Client object.\n\t * <p>\n\t * The send, subscribe and unsubscribe methods are implemented as asynchronous JavaScript methods\n\t * (even though the underlying protocol exchange might be synchronous in nature).\n\t * This means they signal their completion by calling back to the application,\n\t * via Success or Failure callback functions provided by the application on the method in question.\n\t * Such callbacks are called at most once per method invocation and do not persist beyond the lifetime\n\t * of the script that made the invocation.\n\t * <p>\n\t * In contrast there are some callback functions, most notably <i>onMessageArrived</i>,\n\t * that are defined on the {@link Paho.Client} object.\n\t * These may get called multiple times, and aren't directly related to specific method invocations made by the client.\n\t *\n\t * @name Paho.Client\n\t *\n\t * @constructor\n\t *\n\t * @param {string} host - the address of the messaging server, as a fully qualified WebSocket URI, as a DNS name or dotted decimal IP address.\n\t * @param {number} port - the port number to connect to - only required if host is not a URI\n\t * @param {string} path - the path on the host to connect to - only used if host is not a URI. Default: '/mqtt'.\n\t * @param {string} clientId - the Messaging client identifier, between 1 and 23 characters in length.\n\t *\n\t * @property {string} host - <i>read only</i> the server's DNS hostname or dotted decimal IP address.\n\t * @property {number} port - <i>read only</i> the server's port.\n\t * @property {string} path - <i>read only</i> the server's path.\n\t * @property {string} clientId - <i>read only</i> used when connecting to the server.\n\t * @property {function} onConnectionLost - called when a connection has been lost.\n\t *                            after a connect() method has succeeded.\n\t *                            Establish the call back used when a connection has been lost. The connection may be\n\t *                            lost because the client initiates a disconnect or because the server or network\n\t *                            cause the client to be disconnected. The disconnect call back may be called without\n\t *                            the connectionComplete call back being invoked if, for example the client fails to\n\t *                            connect.\n\t *                            A single response object parameter is passed to the onConnectionLost callback containing the following fields:\n\t *                            <ol>\n\t *                            <li>errorCode\n\t *                            <li>errorMessage\n\t *                            </ol>\n\t * @property {function} onMessageDelivered - called when a message has been delivered.\n\t *                            All processing that this Client will ever do has been completed. So, for example,\n\t *                            in the case of a Qos=2 message sent by this client, the PubComp flow has been received from the server\n\t *                            and the message has been removed from persistent storage before this callback is invoked.\n\t *                            Parameters passed to the onMessageDelivered callback are:\n\t *                            <ol>\n\t *                            <li>{@link Paho.Message} that was delivered.\n\t *                            </ol>\n\t * @property {function} onMessageArrived - called when a message has arrived in this Paho.client.\n\t *                            Parameters passed to the onMessageArrived callback are:\n\t *                            <ol>\n\t *                            <li>{@link Paho.Message} that has arrived.\n\t *                            </ol>\n\t * @property {function} onConnected - called when a connection is successfully made to the server.\n\t *                                  after a connect() method.\n\t *                                  Parameters passed to the onConnected callback are:\n\t *                                  <ol>\n\t *                                  <li>reconnect (boolean) - If true, the connection was the result of a reconnect.</li>\n\t *                                  <li>URI (string) - The URI used to connect to the server.</li>\n\t *                                  </ol>\n\t * @property {boolean} disconnectedPublishing - if set, will enable disconnected publishing in\n\t *                                            in the event that the connection to the server is lost.\n\t * @property {number} disconnectedBufferSize - Used to set the maximum number of messages that the disconnected\n\t *                                             buffer will hold before rejecting new messages. Default size: 5000 messages\n\t * @property {function} trace - called whenever trace is called. TODO\n\t */\n\t\tvar Client = function (host, port, path, clientId) {\n\n\t\t\tvar uri;\n\n\t\t\tif (typeof host !== \"string\")\n\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof host, \"host\"]));\n\n\t\t\tif (arguments.length == 2) {\n\t\t\t// host: must be full ws:// uri\n\t\t\t// port: clientId\n\t\t\t\tclientId = port;\n\t\t\t\turi = host;\n\t\t\t\tvar match = uri.match(/^(wss?):\\/\\/((\\[(.+)\\])|([^\\/]+?))(:(\\d+))?(\\/.*)$/);\n\t\t\t\tif (match) {\n\t\t\t\t\thost = match[4]||match[2];\n\t\t\t\t\tport = parseInt(match[7]);\n\t\t\t\t\tpath = match[8];\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT,[host,\"host\"]));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (arguments.length == 3) {\n\t\t\t\t\tclientId = path;\n\t\t\t\t\tpath = \"/mqtt\";\n\t\t\t\t}\n\t\t\t\tif (typeof port !== \"number\" || port < 0)\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof port, \"port\"]));\n\t\t\t\tif (typeof path !== \"string\")\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof path, \"path\"]));\n\n\t\t\t\tvar ipv6AddSBracket = (host.indexOf(\":\") !== -1 && host.slice(0,1) !== \"[\" && host.slice(-1) !== \"]\");\n\t\t\t\turi = \"ws://\"+(ipv6AddSBracket?\"[\"+host+\"]\":host)+\":\"+port+path;\n\t\t\t}\n\n\t\t\tvar clientIdLength = 0;\n\t\t\tfor (var i = 0; i<clientId.length; i++) {\n\t\t\t\tvar charCode = clientId.charCodeAt(i);\n\t\t\t\tif (0xD800 <= charCode && charCode <= 0xDBFF)  {\n\t\t\t\t\ti++; // Surrogate pair.\n\t\t\t\t}\n\t\t\t\tclientIdLength++;\n\t\t\t}\n\t\t\tif (typeof clientId !== \"string\" || clientIdLength > 65535)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [clientId, \"clientId\"]));\n\n\t\t\tvar client = new ClientImpl(uri, host, port, path, clientId);\n\n\t\t\t//Public Properties\n\t\t\tObject.defineProperties(this,{\n\t\t\t\t\"host\":{\n\t\t\t\t\tget: function() { return host; },\n\t\t\t\t\tset: function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); }\n\t\t\t\t},\n\t\t\t\t\"port\":{\n\t\t\t\t\tget: function() { return port; },\n\t\t\t\t\tset: function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); }\n\t\t\t\t},\n\t\t\t\t\"path\":{\n\t\t\t\t\tget: function() { return path; },\n\t\t\t\t\tset: function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); }\n\t\t\t\t},\n\t\t\t\t\"uri\":{\n\t\t\t\t\tget: function() { return uri; },\n\t\t\t\t\tset: function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); }\n\t\t\t\t},\n\t\t\t\t\"clientId\":{\n\t\t\t\t\tget: function() { return client.clientId; },\n\t\t\t\t\tset: function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); }\n\t\t\t\t},\n\t\t\t\t\"onConnected\":{\n\t\t\t\t\tget: function() { return client.onConnected; },\n\t\t\t\t\tset: function(newOnConnected) {\n\t\t\t\t\t\tif (typeof newOnConnected === \"function\")\n\t\t\t\t\t\t\tclient.onConnected = newOnConnected;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof newOnConnected, \"onConnected\"]));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"disconnectedPublishing\":{\n\t\t\t\t\tget: function() { return client.disconnectedPublishing; },\n\t\t\t\t\tset: function(newDisconnectedPublishing) {\n\t\t\t\t\t\tclient.disconnectedPublishing = newDisconnectedPublishing;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"disconnectedBufferSize\":{\n\t\t\t\t\tget: function() { return client.disconnectedBufferSize; },\n\t\t\t\t\tset: function(newDisconnectedBufferSize) {\n\t\t\t\t\t\tclient.disconnectedBufferSize = newDisconnectedBufferSize;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"onConnectionLost\":{\n\t\t\t\t\tget: function() { return client.onConnectionLost; },\n\t\t\t\t\tset: function(newOnConnectionLost) {\n\t\t\t\t\t\tif (typeof newOnConnectionLost === \"function\")\n\t\t\t\t\t\t\tclient.onConnectionLost = newOnConnectionLost;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof newOnConnectionLost, \"onConnectionLost\"]));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"onMessageDelivered\":{\n\t\t\t\t\tget: function() { return client.onMessageDelivered; },\n\t\t\t\t\tset: function(newOnMessageDelivered) {\n\t\t\t\t\t\tif (typeof newOnMessageDelivered === \"function\")\n\t\t\t\t\t\t\tclient.onMessageDelivered = newOnMessageDelivered;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof newOnMessageDelivered, \"onMessageDelivered\"]));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"onMessageArrived\":{\n\t\t\t\t\tget: function() { return client.onMessageArrived; },\n\t\t\t\t\tset: function(newOnMessageArrived) {\n\t\t\t\t\t\tif (typeof newOnMessageArrived === \"function\")\n\t\t\t\t\t\t\tclient.onMessageArrived = newOnMessageArrived;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof newOnMessageArrived, \"onMessageArrived\"]));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"trace\":{\n\t\t\t\t\tget: function() { return client.traceFunction; },\n\t\t\t\t\tset: function(trace) {\n\t\t\t\t\t\tif(typeof trace === \"function\"){\n\t\t\t\t\t\t\tclient.traceFunction = trace;\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof trace, \"onTrace\"]));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t});\n\n\t\t\t/**\n\t\t * Connect this Messaging client to its server.\n\t\t *\n\t\t * @name Paho.Client#connect\n\t\t * @function\n\t\t * @param {object} connectOptions - Attributes used with the connection.\n\t\t * @param {number} connectOptions.timeout - If the connect has not succeeded within this\n\t\t *                    number of seconds, it is deemed to have failed.\n\t\t *                    The default is 30 seconds.\n\t\t * @param {string} connectOptions.userName - Authentication username for this connection.\n\t\t * @param {string} connectOptions.password - Authentication password for this connection.\n\t\t * @param {Paho.Message} connectOptions.willMessage - sent by the server when the client\n\t\t *                    disconnects abnormally.\n\t\t * @param {number} connectOptions.keepAliveInterval - the server disconnects this client if\n\t\t *                    there is no activity for this number of seconds.\n\t\t *                    The default value of 60 seconds is assumed if not set.\n\t\t * @param {boolean} connectOptions.cleanSession - if true(default) the client and server\n\t\t *                    persistent state is deleted on successful connect.\n\t\t * @param {boolean} connectOptions.useSSL - if present and true, use an SSL Websocket connection.\n\t\t * @param {object} connectOptions.invocationContext - passed to the onSuccess callback or onFailure callback.\n\t\t * @param {function} connectOptions.onSuccess - called when the connect acknowledgement\n\t\t *                    has been received from the server.\n\t\t * A single response object parameter is passed to the onSuccess callback containing the following fields:\n\t\t * <ol>\n\t\t * <li>invocationContext as passed in to the onSuccess method in the connectOptions.\n\t\t * </ol>\n\t * @param {function} connectOptions.onFailure - called when the connect request has failed or timed out.\n\t\t * A single response object parameter is passed to the onFailure callback containing the following fields:\n\t\t * <ol>\n\t\t * <li>invocationContext as passed in to the onFailure method in the connectOptions.\n\t\t * <li>errorCode a number indicating the nature of the error.\n\t\t * <li>errorMessage text describing the error.\n\t\t * </ol>\n\t * @param {array} connectOptions.hosts - If present this contains either a set of hostnames or fully qualified\n\t\t * WebSocket URIs (ws://iot.eclipse.org:80/ws), that are tried in order in place\n\t\t * of the host and port paramater on the construtor. The hosts are tried one at at time in order until\n\t\t * one of then succeeds.\n\t * @param {array} connectOptions.ports - If present the set of ports matching the hosts. If hosts contains URIs, this property\n\t\t * is not used.\n\t * @param {boolean} connectOptions.reconnect - Sets whether the client will automatically attempt to reconnect\n\t * to the server if the connection is lost.\n\t *<ul>\n\t *<li>If set to false, the client will not attempt to automatically reconnect to the server in the event that the\n\t * connection is lost.</li>\n\t *<li>If set to true, in the event that the connection is lost, the client will attempt to reconnect to the server.\n\t * It will initially wait 1 second before it attempts to reconnect, for every failed reconnect attempt, the delay\n\t * will double until it is at 2 minutes at which point the delay will stay at 2 minutes.</li>\n\t *</ul>\n\t * @param {number} connectOptions.mqttVersion - The version of MQTT to use to connect to the MQTT Broker.\n\t *<ul>\n\t *<li>3 - MQTT V3.1</li>\n\t *<li>4 - MQTT V3.1.1</li>\n\t *</ul>\n\t * @param {boolean} connectOptions.mqttVersionExplicit - If set to true, will force the connection to use the\n\t * selected MQTT Version or will fail to connect.\n\t * @param {array} connectOptions.uris - If present, should contain a list of fully qualified WebSocket uris\n\t * (e.g. ws://iot.eclipse.org:80/ws), that are tried in order in place of the host and port parameter of the construtor.\n\t * The uris are tried one at a time in order until one of them succeeds. Do not use this in conjunction with hosts as\n\t * the hosts array will be converted to uris and will overwrite this property.\n\t\t * @throws {InvalidState} If the client is not in disconnected state. The client must have received connectionLost\n\t\t * or disconnected before calling connect for a second or subsequent time.\n\t\t */\n\t\t\tthis.connect = function (connectOptions) {\n\t\t\t\tconnectOptions = connectOptions || {} ;\n\t\t\t\tvalidate(connectOptions,  {timeout:\"number\",\n\t\t\t\t\tuserName:\"string\",\n\t\t\t\t\tpassword:\"string\",\n\t\t\t\t\twillMessage:\"object\",\n\t\t\t\t\tkeepAliveInterval:\"number\",\n\t\t\t\t\tcleanSession:\"boolean\",\n\t\t\t\t\tuseSSL:\"boolean\",\n\t\t\t\t\tinvocationContext:\"object\",\n\t\t\t\t\tonSuccess:\"function\",\n\t\t\t\t\tonFailure:\"function\",\n\t\t\t\t\thosts:\"object\",\n\t\t\t\t\tports:\"object\",\n\t\t\t\t\treconnect:\"boolean\",\n\t\t\t\t\tmqttVersion:\"number\",\n\t\t\t\t\tmqttVersionExplicit:\"boolean\",\n\t\t\t\t\turis: \"object\"});\n\n\t\t\t\t// If no keep alive interval is set, assume 60 seconds.\n\t\t\t\tif (connectOptions.keepAliveInterval === undefined)\n\t\t\t\t\tconnectOptions.keepAliveInterval = 60;\n\n\t\t\t\tif (connectOptions.mqttVersion > 4 || connectOptions.mqttVersion < 3) {\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.mqttVersion, \"connectOptions.mqttVersion\"]));\n\t\t\t\t}\n\n\t\t\t\tif (connectOptions.mqttVersion === undefined) {\n\t\t\t\t\tconnectOptions.mqttVersionExplicit = false;\n\t\t\t\t\tconnectOptions.mqttVersion = 4;\n\t\t\t\t} else {\n\t\t\t\t\tconnectOptions.mqttVersionExplicit = true;\n\t\t\t\t}\n\n\t\t\t\t//Check that if password is set, so is username\n\t\t\t\tif (connectOptions.password !== undefined && connectOptions.userName === undefined)\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.password, \"connectOptions.password\"]));\n\n\t\t\t\tif (connectOptions.willMessage) {\n\t\t\t\t\tif (!(connectOptions.willMessage instanceof Message))\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [connectOptions.willMessage, \"connectOptions.willMessage\"]));\n\t\t\t\t\t// The will message must have a payload that can be represented as a string.\n\t\t\t\t\t// Cause the willMessage to throw an exception if this is not the case.\n\t\t\t\t\tconnectOptions.willMessage.stringPayload = null;\n\n\t\t\t\t\tif (typeof connectOptions.willMessage.destinationName === \"undefined\")\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof connectOptions.willMessage.destinationName, \"connectOptions.willMessage.destinationName\"]));\n\t\t\t\t}\n\t\t\t\tif (typeof connectOptions.cleanSession === \"undefined\")\n\t\t\t\t\tconnectOptions.cleanSession = true;\n\t\t\t\tif (connectOptions.hosts) {\n\n\t\t\t\t\tif (!(connectOptions.hosts instanceof Array) )\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts, \"connectOptions.hosts\"]));\n\t\t\t\t\tif (connectOptions.hosts.length <1 )\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts, \"connectOptions.hosts\"]));\n\n\t\t\t\t\tvar usingURIs = false;\n\t\t\t\t\tfor (var i = 0; i<connectOptions.hosts.length; i++) {\n\t\t\t\t\t\tif (typeof connectOptions.hosts[i] !== \"string\")\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof connectOptions.hosts[i], \"connectOptions.hosts[\"+i+\"]\"]));\n\t\t\t\t\t\tif (/^(wss?):\\/\\/((\\[(.+)\\])|([^\\/]+?))(:(\\d+))?(\\/.*)$/.test(connectOptions.hosts[i])) {\n\t\t\t\t\t\t\tif (i === 0) {\n\t\t\t\t\t\t\t\tusingURIs = true;\n\t\t\t\t\t\t\t} else if (!usingURIs) {\n\t\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts[i], \"connectOptions.hosts[\"+i+\"]\"]));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (usingURIs) {\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts[i], \"connectOptions.hosts[\"+i+\"]\"]));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!usingURIs) {\n\t\t\t\t\t\tif (!connectOptions.ports)\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.ports, \"connectOptions.ports\"]));\n\t\t\t\t\t\tif (!(connectOptions.ports instanceof Array) )\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.ports, \"connectOptions.ports\"]));\n\t\t\t\t\t\tif (connectOptions.hosts.length !== connectOptions.ports.length)\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.ports, \"connectOptions.ports\"]));\n\n\t\t\t\t\t\tconnectOptions.uris = [];\n\n\t\t\t\t\t\tfor (var i = 0; i<connectOptions.hosts.length; i++) {\n\t\t\t\t\t\t\tif (typeof connectOptions.ports[i] !== \"number\" || connectOptions.ports[i] < 0)\n\t\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof connectOptions.ports[i], \"connectOptions.ports[\"+i+\"]\"]));\n\t\t\t\t\t\t\tvar host = connectOptions.hosts[i];\n\t\t\t\t\t\t\tvar port = connectOptions.ports[i];\n\n\t\t\t\t\t\t\tvar ipv6 = (host.indexOf(\":\") !== -1);\n\t\t\t\t\t\t\turi = \"ws://\"+(ipv6?\"[\"+host+\"]\":host)+\":\"+port+path;\n\t\t\t\t\t\t\tconnectOptions.uris.push(uri);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconnectOptions.uris = connectOptions.hosts;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tclient.connect(connectOptions);\n\t\t\t};\n\n\t\t\t/**\n\t\t * Subscribe for messages, request receipt of a copy of messages sent to the destinations described by the filter.\n\t\t *\n\t\t * @name Paho.Client#subscribe\n\t\t * @function\n\t\t * @param {string} filter describing the destinations to receive messages from.\n\t\t * <br>\n\t\t * @param {object} subscribeOptions - used to control the subscription\n\t\t *\n\t\t * @param {number} subscribeOptions.qos - the maximum qos of any publications sent\n\t\t *                                  as a result of making this subscription.\n\t\t * @param {object} subscribeOptions.invocationContext - passed to the onSuccess callback\n\t\t *                                  or onFailure callback.\n\t\t * @param {function} subscribeOptions.onSuccess - called when the subscribe acknowledgement\n\t\t *                                  has been received from the server.\n\t\t *                                  A single response object parameter is passed to the onSuccess callback containing the following fields:\n\t\t *                                  <ol>\n\t\t *                                  <li>invocationContext if set in the subscribeOptions.\n\t\t *                                  </ol>\n\t\t * @param {function} subscribeOptions.onFailure - called when the subscribe request has failed or timed out.\n\t\t *                                  A single response object parameter is passed to the onFailure callback containing the following fields:\n\t\t *                                  <ol>\n\t\t *                                  <li>invocationContext - if set in the subscribeOptions.\n\t\t *                                  <li>errorCode - a number indicating the nature of the error.\n\t\t *                                  <li>errorMessage - text describing the error.\n\t\t *                                  </ol>\n\t\t * @param {number} subscribeOptions.timeout - which, if present, determines the number of\n\t\t *                                  seconds after which the onFailure calback is called.\n\t\t *                                  The presence of a timeout does not prevent the onSuccess\n\t\t *                                  callback from being called when the subscribe completes.\n\t\t * @throws {InvalidState} if the client is not in connected state.\n\t\t */\n\t\t\tthis.subscribe = function (filter, subscribeOptions) {\n\t\t\t\tif (typeof filter !== \"string\" && filter.constructor !== Array)\n\t\t\t\t\tthrow new Error(\"Invalid argument:\"+filter);\n\t\t\t\tsubscribeOptions = subscribeOptions || {} ;\n\t\t\t\tvalidate(subscribeOptions,  {qos:\"number\",\n\t\t\t\t\tinvocationContext:\"object\",\n\t\t\t\t\tonSuccess:\"function\",\n\t\t\t\t\tonFailure:\"function\",\n\t\t\t\t\ttimeout:\"number\"\n\t\t\t\t});\n\t\t\t\tif (subscribeOptions.timeout && !subscribeOptions.onFailure)\n\t\t\t\t\tthrow new Error(\"subscribeOptions.timeout specified with no onFailure callback.\");\n\t\t\t\tif (typeof subscribeOptions.qos !== \"undefined\" && !(subscribeOptions.qos === 0 || subscribeOptions.qos === 1 || subscribeOptions.qos === 2 ))\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [subscribeOptions.qos, \"subscribeOptions.qos\"]));\n\t\t\t\tclient.subscribe(filter, subscribeOptions);\n\t\t\t};\n\n\t\t/**\n\t\t * Unsubscribe for messages, stop receiving messages sent to destinations described by the filter.\n\t\t *\n\t\t * @name Paho.Client#unsubscribe\n\t\t * @function\n\t\t * @param {string} filter - describing the destinations to receive messages from.\n\t\t * @param {object} unsubscribeOptions - used to control the subscription\n\t\t * @param {object} unsubscribeOptions.invocationContext - passed to the onSuccess callback\n\t\t\t\t\t\t\t\t\t\t\t  or onFailure callback.\n\t\t * @param {function} unsubscribeOptions.onSuccess - called when the unsubscribe acknowledgement has been received from the server.\n\t\t *                                    A single response object parameter is passed to the\n\t\t *                                    onSuccess callback containing the following fields:\n\t\t *                                    <ol>\n\t\t *                                    <li>invocationContext - if set in the unsubscribeOptions.\n\t\t *                                    </ol>\n\t\t * @param {function} unsubscribeOptions.onFailure called when the unsubscribe request has failed or timed out.\n\t\t *                                    A single response object parameter is passed to the onFailure callback containing the following fields:\n\t\t *                                    <ol>\n\t\t *                                    <li>invocationContext - if set in the unsubscribeOptions.\n\t\t *                                    <li>errorCode - a number indicating the nature of the error.\n\t\t *                                    <li>errorMessage - text describing the error.\n\t\t *                                    </ol>\n\t\t * @param {number} unsubscribeOptions.timeout - which, if present, determines the number of seconds\n\t\t *                                    after which the onFailure callback is called. The presence of\n\t\t *                                    a timeout does not prevent the onSuccess callback from being\n\t\t *                                    called when the unsubscribe completes\n\t\t * @throws {InvalidState} if the client is not in connected state.\n\t\t */\n\t\t\tthis.unsubscribe = function (filter, unsubscribeOptions) {\n\t\t\t\tif (typeof filter !== \"string\" && filter.constructor !== Array)\n\t\t\t\t\tthrow new Error(\"Invalid argument:\"+filter);\n\t\t\t\tunsubscribeOptions = unsubscribeOptions || {} ;\n\t\t\t\tvalidate(unsubscribeOptions,  {invocationContext:\"object\",\n\t\t\t\t\tonSuccess:\"function\",\n\t\t\t\t\tonFailure:\"function\",\n\t\t\t\t\ttimeout:\"number\"\n\t\t\t\t});\n\t\t\t\tif (unsubscribeOptions.timeout && !unsubscribeOptions.onFailure)\n\t\t\t\t\tthrow new Error(\"unsubscribeOptions.timeout specified with no onFailure callback.\");\n\t\t\t\tclient.unsubscribe(filter, unsubscribeOptions);\n\t\t\t};\n\n\t\t\t/**\n\t\t * Send a message to the consumers of the destination in the Message.\n\t\t *\n\t\t * @name Paho.Client#send\n\t\t * @function\n\t\t * @param {string|Paho.Message} topic - <b>mandatory</b> The name of the destination to which the message is to be sent.\n\t\t * \t\t\t\t\t   - If it is the only parameter, used as Paho.Message object.\n\t\t * @param {String|ArrayBuffer} payload - The message data to be sent.\n\t\t * @param {number} qos The Quality of Service used to deliver the message.\n\t\t * \t\t<dl>\n\t\t * \t\t\t<dt>0 Best effort (default).\n\t\t *     \t\t\t<dt>1 At least once.\n\t\t *     \t\t\t<dt>2 Exactly once.\n\t\t * \t\t</dl>\n\t\t * @param {Boolean} retained If true, the message is to be retained by the server and delivered\n\t\t *                     to both current and future subscriptions.\n\t\t *                     If false the server only delivers the message to current subscribers, this is the default for new Messages.\n\t\t *                     A received message has the retained boolean set to true if the message was published\n\t\t *                     with the retained boolean set to true\n\t\t *                     and the subscrption was made after the message has been published.\n\t\t * @throws {InvalidState} if the client is not connected.\n\t\t */\n\t\t\tthis.send = function (topic,payload,qos,retained) {\n\t\t\t\tvar message ;\n\n\t\t\t\tif(arguments.length === 0){\n\t\t\t\t\tthrow new Error(\"Invalid argument.\"+\"length\");\n\n\t\t\t\t}else if(arguments.length == 1) {\n\n\t\t\t\t\tif (!(topic instanceof Message) && (typeof topic !== \"string\"))\n\t\t\t\t\t\tthrow new Error(\"Invalid argument:\"+ typeof topic);\n\n\t\t\t\t\tmessage = topic;\n\t\t\t\t\tif (typeof message.destinationName === \"undefined\")\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT,[message.destinationName,\"Message.destinationName\"]));\n\t\t\t\t\tclient.send(message);\n\n\t\t\t\t}else {\n\t\t\t\t//parameter checking in Message object\n\t\t\t\t\tmessage = new Message(payload);\n\t\t\t\t\tmessage.destinationName = topic;\n\t\t\t\t\tif(arguments.length >= 3)\n\t\t\t\t\t\tmessage.qos = qos;\n\t\t\t\t\tif(arguments.length >= 4)\n\t\t\t\t\t\tmessage.retained = retained;\n\t\t\t\t\tclient.send(message);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t/**\n\t\t * Publish a message to the consumers of the destination in the Message.\n\t\t * Synonym for Paho.Mqtt.Client#send\n\t\t *\n\t\t * @name Paho.Client#publish\n\t\t * @function\n\t\t * @param {string|Paho.Message} topic - <b>mandatory</b> The name of the topic to which the message is to be published.\n\t\t * \t\t\t\t\t   - If it is the only parameter, used as Paho.Message object.\n\t\t * @param {String|ArrayBuffer} payload - The message data to be published.\n\t\t * @param {number} qos The Quality of Service used to deliver the message.\n\t\t * \t\t<dl>\n\t\t * \t\t\t<dt>0 Best effort (default).\n\t\t *     \t\t\t<dt>1 At least once.\n\t\t *     \t\t\t<dt>2 Exactly once.\n\t\t * \t\t</dl>\n\t\t * @param {Boolean} retained If true, the message is to be retained by the server and delivered\n\t\t *                     to both current and future subscriptions.\n\t\t *                     If false the server only delivers the message to current subscribers, this is the default for new Messages.\n\t\t *                     A received message has the retained boolean set to true if the message was published\n\t\t *                     with the retained boolean set to true\n\t\t *                     and the subscrption was made after the message has been published.\n\t\t * @throws {InvalidState} if the client is not connected.\n\t\t */\n\t\t\tthis.publish = function(topic,payload,qos,retained) {\n\t\t\t\tvar message ;\n\n\t\t\t\tif(arguments.length === 0){\n\t\t\t\t\tthrow new Error(\"Invalid argument.\"+\"length\");\n\n\t\t\t\t}else if(arguments.length == 1) {\n\n\t\t\t\t\tif (!(topic instanceof Message) && (typeof topic !== \"string\"))\n\t\t\t\t\t\tthrow new Error(\"Invalid argument:\"+ typeof topic);\n\n\t\t\t\t\tmessage = topic;\n\t\t\t\t\tif (typeof message.destinationName === \"undefined\")\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT,[message.destinationName,\"Message.destinationName\"]));\n\t\t\t\t\tclient.send(message);\n\n\t\t\t\t}else {\n\t\t\t\t\t//parameter checking in Message object\n\t\t\t\t\tmessage = new Message(payload);\n\t\t\t\t\tmessage.destinationName = topic;\n\t\t\t\t\tif(arguments.length >= 3)\n\t\t\t\t\t\tmessage.qos = qos;\n\t\t\t\t\tif(arguments.length >= 4)\n\t\t\t\t\t\tmessage.retained = retained;\n\t\t\t\t\tclient.send(message);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t/**\n\t\t * Normal disconnect of this Messaging client from its server.\n\t\t *\n\t\t * @name Paho.Client#disconnect\n\t\t * @function\n\t\t * @throws {InvalidState} if the client is already disconnected.\n\t\t */\n\t\t\tthis.disconnect = function () {\n\t\t\t\tclient.disconnect();\n\t\t\t};\n\n\t\t\t/**\n\t\t * Get the contents of the trace log.\n\t\t *\n\t\t * @name Paho.Client#getTraceLog\n\t\t * @function\n\t\t * @return {Object[]} tracebuffer containing the time ordered trace records.\n\t\t */\n\t\t\tthis.getTraceLog = function () {\n\t\t\t\treturn client.getTraceLog();\n\t\t\t};\n\n\t\t\t/**\n\t\t * Start tracing.\n\t\t *\n\t\t * @name Paho.Client#startTrace\n\t\t * @function\n\t\t */\n\t\t\tthis.startTrace = function () {\n\t\t\t\tclient.startTrace();\n\t\t\t};\n\n\t\t\t/**\n\t\t * Stop tracing.\n\t\t *\n\t\t * @name Paho.Client#stopTrace\n\t\t * @function\n\t\t */\n\t\t\tthis.stopTrace = function () {\n\t\t\t\tclient.stopTrace();\n\t\t\t};\n\n\t\t\tthis.isConnected = function() {\n\t\t\t\treturn client.connected;\n\t\t\t};\n\t\t};\n\n\t\t/**\n\t * An application message, sent or received.\n\t * <p>\n\t * All attributes may be null, which implies the default values.\n\t *\n\t * @name Paho.Message\n\t * @constructor\n\t * @param {String|ArrayBuffer} payload The message data to be sent.\n\t * <p>\n\t * @property {string} payloadString <i>read only</i> The payload as a string if the payload consists of valid UTF-8 characters.\n\t * @property {ArrayBuffer} payloadBytes <i>read only</i> The payload as an ArrayBuffer.\n\t * <p>\n\t * @property {string} destinationName <b>mandatory</b> The name of the destination to which the message is to be sent\n\t *                    (for messages about to be sent) or the name of the destination from which the message has been received.\n\t *                    (for messages received by the onMessage function).\n\t * <p>\n\t * @property {number} qos The Quality of Service used to deliver the message.\n\t * <dl>\n\t *     <dt>0 Best effort (default).\n\t *     <dt>1 At least once.\n\t *     <dt>2 Exactly once.\n\t * </dl>\n\t * <p>\n\t * @property {Boolean} retained If true, the message is to be retained by the server and delivered\n\t *                     to both current and future subscriptions.\n\t *                     If false the server only delivers the message to current subscribers, this is the default for new Messages.\n\t *                     A received message has the retained boolean set to true if the message was published\n\t *                     with the retained boolean set to true\n\t *                     and the subscrption was made after the message has been published.\n\t * <p>\n\t * @property {Boolean} duplicate <i>read only</i> If true, this message might be a duplicate of one which has already been received.\n\t *                     This is only set on messages received from the server.\n\t *\n\t */\n\t\tvar Message = function (newPayload) {\n\t\t\tvar payload;\n\t\t\tif (   typeof newPayload === \"string\" ||\n\t\tnewPayload instanceof ArrayBuffer ||\n\t\t(ArrayBuffer.isView(newPayload) && !(newPayload instanceof DataView))\n\t\t\t) {\n\t\t\t\tpayload = newPayload;\n\t\t\t} else {\n\t\t\t\tthrow (format(ERROR.INVALID_ARGUMENT, [newPayload, \"newPayload\"]));\n\t\t\t}\n\n\t\t\tvar destinationName;\n\t\t\tvar qos = 0;\n\t\t\tvar retained = false;\n\t\t\tvar duplicate = false;\n\n\t\t\tObject.defineProperties(this,{\n\t\t\t\t\"payloadString\":{\n\t\t\t\t\tenumerable : true,\n\t\t\t\t\tget : function () {\n\t\t\t\t\t\tif (typeof payload === \"string\")\n\t\t\t\t\t\t\treturn payload;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\treturn parseUTF8(payload, 0, payload.length);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"payloadBytes\":{\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: function() {\n\t\t\t\t\t\tif (typeof payload === \"string\") {\n\t\t\t\t\t\t\tvar buffer = new ArrayBuffer(UTF8Length(payload));\n\t\t\t\t\t\t\tvar byteStream = new Uint8Array(buffer);\n\t\t\t\t\t\t\tstringToUTF8(payload, byteStream, 0);\n\n\t\t\t\t\t\t\treturn byteStream;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn payload;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"destinationName\":{\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: function() { return destinationName; },\n\t\t\t\t\tset: function(newDestinationName) {\n\t\t\t\t\t\tif (typeof newDestinationName === \"string\")\n\t\t\t\t\t\t\tdestinationName = newDestinationName;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [newDestinationName, \"newDestinationName\"]));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"qos\":{\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: function() { return qos; },\n\t\t\t\t\tset: function(newQos) {\n\t\t\t\t\t\tif (newQos === 0 || newQos === 1 || newQos === 2 )\n\t\t\t\t\t\t\tqos = newQos;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(\"Invalid argument:\"+newQos);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"retained\":{\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: function() { return retained; },\n\t\t\t\t\tset: function(newRetained) {\n\t\t\t\t\t\tif (typeof newRetained === \"boolean\")\n\t\t\t\t\t\t\tretained = newRetained;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [newRetained, \"newRetained\"]));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"topic\":{\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: function() { return destinationName; },\n\t\t\t\t\tset: function(newTopic) {destinationName=newTopic;}\n\t\t\t\t},\n\t\t\t\t\"duplicate\":{\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: function() { return duplicate; },\n\t\t\t\t\tset: function(newDuplicate) {duplicate=newDuplicate;}\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\t// Module contents.\n\t\treturn {\n\t\t\tClient: Client,\n\t\t\tMessage: Message\n\t\t};\n\t// eslint-disable-next-line no-nested-ternary\n\t})(typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n\treturn PahoMQTT;\n});\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/paho-mqtt/paho-mqtt.js\n");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/process/browser.js\n");

/***/ }),

/***/ "./node_modules/srcdoc-polyfill/srcdoc-polyfill.js":
/*!*********************************************************!*\
  !*** ./node_modules/srcdoc-polyfill/srcdoc-polyfill.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(root, factory) {\n\t// `root` does not resolve to the global window object in a Browserified\n\t// bundle, so a direct reference to that object is used instead.\n\tvar _srcDoc = window.srcDoc;\n\n\tif (true) {\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_RESULT__ = (function(exports) {\n\t\t\tfactory(exports, _srcDoc);\n\t\t\troot.srcDoc = exports;\n\t\t}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else {}\n})(this, function(exports, _srcDoc) {\n\tvar idx, iframes;\n\tvar isCompliant = !!(\"srcdoc\" in document.createElement(\"iframe\"));\n\tvar sandboxMsg = \"Polyfill may not function in the presence of the \" +\n\t\t\"`sandbox` attribute. Consider using the `force` option.\";\n\tvar sandboxAllow = /\\ballow-same-origin\\b/;\n\t/**\n\t * Determine if the operation may be blocked by the `sandbox` attribute in\n\t * some environments, and optionally issue a warning or remove the\n\t * attribute.\n\t */\n\tvar validate = function( iframe, options ) {\n\t\tvar sandbox = iframe.getAttribute(\"sandbox\");\n\t\tif (typeof sandbox === \"string\" && !sandboxAllow.test(sandbox)) {\n\t\t\tif (options && options.force) {\n\t\t\t\tiframe.removeAttribute(\"sandbox\");\n\t\t\t} else if (!options || options.force !== false) {\n\t\t\t\tlogError(sandboxMsg);\n\t\t\t\tiframe.setAttribute(\"data-srcdoc-polyfill\", sandboxMsg);\n\t\t\t}\n\t\t}\n\t};\n\tvar implementations = {\n\t\tcompliant: function( iframe, content, options ) {\n\n\t\t\tif (content) {\n\t\t\t\tvalidate(iframe, options);\n\t\t\t\tiframe.setAttribute(\"srcdoc\", content);\n\t\t\t}\n\t\t},\n\t\tlegacy: function( iframe, content, options ) {\n\n\t\t\tvar jsUrl;\n\n\t\t\tif (!iframe || !iframe.getAttribute) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!content) {\n\t\t\t\tcontent = iframe.getAttribute(\"srcdoc\");\n\t\t\t} else {\n\t\t\t\tiframe.setAttribute(\"srcdoc\", content);\n\t\t\t}\n\n\t\t\tif (content) {\n\t\t\t\tvalidate(iframe, options);\n\n\t\t\t\t// The value returned by a script-targeted URL will be used as\n\t\t\t\t// the iFrame's content. Create such a URL which returns the\n\t\t\t\t// iFrame element's `srcdoc` attribute.\n\t\t\t\tjsUrl = \"javascript: window.frameElement.getAttribute('srcdoc');\";\n\n\t\t\t\t// Explicitly set the iFrame's window.location for\n\t\t\t\t// compatability with IE9, which does not react to changes in\n\t\t\t\t// the `src` attribute when it is a `javascript:` URL, for\n\t\t\t\t// some reason\n\t\t\t\tif (iframe.contentWindow) {\n\t\t\t\t\tiframe.contentWindow.location = jsUrl;\n\t\t\t\t}\n\n\t\t\t\tiframe.setAttribute(\"src\", jsUrl);\n\t\t\t}\n\t\t}\n\t};\n\tvar srcDoc = exports;\n\tvar logError;\n\n\tif (window.console && window.console.error) {\n\t\tlogError = function(msg) {\n\t\t\twindow.console.error(\"[srcdoc-polyfill] \" + msg);\n\t\t};\n\t} else {\n\t\tlogError = function() {};\n\t}\n\n\t// Assume the best\n\tsrcDoc.set = implementations.compliant;\n\tsrcDoc.noConflict = function() {\n\t\twindow.srcDoc = _srcDoc;\n\t\treturn srcDoc;\n\t};\n\n\t// If the browser supports srcdoc, no shimming is necessary\n\tif (isCompliant) {\n\t\treturn;\n\t}\n\n\tsrcDoc.set = implementations.legacy;\n\n\t// Automatically shim any iframes already present in the document\n\tiframes = document.getElementsByTagName(\"iframe\");\n\tidx = iframes.length;\n\n\twhile (idx--) {\n\t\tsrcDoc.set( iframes[idx] );\n\t}\n\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3JjZG9jLXBvbHlmaWxsL3NyY2RvYy1wb2x5ZmlsbC5qcz82MGYxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEtBQUssSUFBMEM7QUFDL0MsRUFBRSxpQ0FBTyxDQUFDLE9BQVMsQ0FBQyxtQ0FBRTtBQUN0QjtBQUNBO0FBQ0EsR0FBRztBQUFBLG9HQUFDO0FBQ0osRUFBRSxNQUFNLEVBS047QUFDRixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxvRUFBb0U7O0FBRXBFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLENBQUMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3JjZG9jLXBvbHlmaWxsL3NyY2RvYy1wb2x5ZmlsbC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdC8vIGByb290YCBkb2VzIG5vdCByZXNvbHZlIHRvIHRoZSBnbG9iYWwgd2luZG93IG9iamVjdCBpbiBhIEJyb3dzZXJpZmllZFxuXHQvLyBidW5kbGUsIHNvIGEgZGlyZWN0IHJlZmVyZW5jZSB0byB0aGF0IG9iamVjdCBpcyB1c2VkIGluc3RlYWQuXG5cdHZhciBfc3JjRG9jID0gd2luZG93LnNyY0RvYztcblxuXHRpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcblx0XHRkZWZpbmUoWydleHBvcnRzJ10sIGZ1bmN0aW9uKGV4cG9ydHMpIHtcblx0XHRcdGZhY3RvcnkoZXhwb3J0cywgX3NyY0RvYyk7XG5cdFx0XHRyb290LnNyY0RvYyA9IGV4cG9ydHM7XG5cdFx0fSk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcblx0XHRmYWN0b3J5KGV4cG9ydHMsIF9zcmNEb2MpO1xuXHR9IGVsc2Uge1xuXHRcdHJvb3Quc3JjRG9jID0ge307XG5cdFx0ZmFjdG9yeShyb290LnNyY0RvYywgX3NyY0RvYyk7XG5cdH1cbn0pKHRoaXMsIGZ1bmN0aW9uKGV4cG9ydHMsIF9zcmNEb2MpIHtcblx0dmFyIGlkeCwgaWZyYW1lcztcblx0dmFyIGlzQ29tcGxpYW50ID0gISEoXCJzcmNkb2NcIiBpbiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaWZyYW1lXCIpKTtcblx0dmFyIHNhbmRib3hNc2cgPSBcIlBvbHlmaWxsIG1heSBub3QgZnVuY3Rpb24gaW4gdGhlIHByZXNlbmNlIG9mIHRoZSBcIiArXG5cdFx0XCJgc2FuZGJveGAgYXR0cmlidXRlLiBDb25zaWRlciB1c2luZyB0aGUgYGZvcmNlYCBvcHRpb24uXCI7XG5cdHZhciBzYW5kYm94QWxsb3cgPSAvXFxiYWxsb3ctc2FtZS1vcmlnaW5cXGIvO1xuXHQvKipcblx0ICogRGV0ZXJtaW5lIGlmIHRoZSBvcGVyYXRpb24gbWF5IGJlIGJsb2NrZWQgYnkgdGhlIGBzYW5kYm94YCBhdHRyaWJ1dGUgaW5cblx0ICogc29tZSBlbnZpcm9ubWVudHMsIGFuZCBvcHRpb25hbGx5IGlzc3VlIGEgd2FybmluZyBvciByZW1vdmUgdGhlXG5cdCAqIGF0dHJpYnV0ZS5cblx0ICovXG5cdHZhciB2YWxpZGF0ZSA9IGZ1bmN0aW9uKCBpZnJhbWUsIG9wdGlvbnMgKSB7XG5cdFx0dmFyIHNhbmRib3ggPSBpZnJhbWUuZ2V0QXR0cmlidXRlKFwic2FuZGJveFwiKTtcblx0XHRpZiAodHlwZW9mIHNhbmRib3ggPT09IFwic3RyaW5nXCIgJiYgIXNhbmRib3hBbGxvdy50ZXN0KHNhbmRib3gpKSB7XG5cdFx0XHRpZiAob3B0aW9ucyAmJiBvcHRpb25zLmZvcmNlKSB7XG5cdFx0XHRcdGlmcmFtZS5yZW1vdmVBdHRyaWJ1dGUoXCJzYW5kYm94XCIpO1xuXHRcdFx0fSBlbHNlIGlmICghb3B0aW9ucyB8fCBvcHRpb25zLmZvcmNlICE9PSBmYWxzZSkge1xuXHRcdFx0XHRsb2dFcnJvcihzYW5kYm94TXNnKTtcblx0XHRcdFx0aWZyYW1lLnNldEF0dHJpYnV0ZShcImRhdGEtc3JjZG9jLXBvbHlmaWxsXCIsIHNhbmRib3hNc2cpO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0dmFyIGltcGxlbWVudGF0aW9ucyA9IHtcblx0XHRjb21wbGlhbnQ6IGZ1bmN0aW9uKCBpZnJhbWUsIGNvbnRlbnQsIG9wdGlvbnMgKSB7XG5cblx0XHRcdGlmIChjb250ZW50KSB7XG5cdFx0XHRcdHZhbGlkYXRlKGlmcmFtZSwgb3B0aW9ucyk7XG5cdFx0XHRcdGlmcmFtZS5zZXRBdHRyaWJ1dGUoXCJzcmNkb2NcIiwgY29udGVudCk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRsZWdhY3k6IGZ1bmN0aW9uKCBpZnJhbWUsIGNvbnRlbnQsIG9wdGlvbnMgKSB7XG5cblx0XHRcdHZhciBqc1VybDtcblxuXHRcdFx0aWYgKCFpZnJhbWUgfHwgIWlmcmFtZS5nZXRBdHRyaWJ1dGUpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIWNvbnRlbnQpIHtcblx0XHRcdFx0Y29udGVudCA9IGlmcmFtZS5nZXRBdHRyaWJ1dGUoXCJzcmNkb2NcIik7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZnJhbWUuc2V0QXR0cmlidXRlKFwic3JjZG9jXCIsIGNvbnRlbnQpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoY29udGVudCkge1xuXHRcdFx0XHR2YWxpZGF0ZShpZnJhbWUsIG9wdGlvbnMpO1xuXG5cdFx0XHRcdC8vIFRoZSB2YWx1ZSByZXR1cm5lZCBieSBhIHNjcmlwdC10YXJnZXRlZCBVUkwgd2lsbCBiZSB1c2VkIGFzXG5cdFx0XHRcdC8vIHRoZSBpRnJhbWUncyBjb250ZW50LiBDcmVhdGUgc3VjaCBhIFVSTCB3aGljaCByZXR1cm5zIHRoZVxuXHRcdFx0XHQvLyBpRnJhbWUgZWxlbWVudCdzIGBzcmNkb2NgIGF0dHJpYnV0ZS5cblx0XHRcdFx0anNVcmwgPSBcImphdmFzY3JpcHQ6IHdpbmRvdy5mcmFtZUVsZW1lbnQuZ2V0QXR0cmlidXRlKCdzcmNkb2MnKTtcIjtcblxuXHRcdFx0XHQvLyBFeHBsaWNpdGx5IHNldCB0aGUgaUZyYW1lJ3Mgd2luZG93LmxvY2F0aW9uIGZvclxuXHRcdFx0XHQvLyBjb21wYXRhYmlsaXR5IHdpdGggSUU5LCB3aGljaCBkb2VzIG5vdCByZWFjdCB0byBjaGFuZ2VzIGluXG5cdFx0XHRcdC8vIHRoZSBgc3JjYCBhdHRyaWJ1dGUgd2hlbiBpdCBpcyBhIGBqYXZhc2NyaXB0OmAgVVJMLCBmb3Jcblx0XHRcdFx0Ly8gc29tZSByZWFzb25cblx0XHRcdFx0aWYgKGlmcmFtZS5jb250ZW50V2luZG93KSB7XG5cdFx0XHRcdFx0aWZyYW1lLmNvbnRlbnRXaW5kb3cubG9jYXRpb24gPSBqc1VybDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmcmFtZS5zZXRBdHRyaWJ1dGUoXCJzcmNcIiwganNVcmwpO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0dmFyIHNyY0RvYyA9IGV4cG9ydHM7XG5cdHZhciBsb2dFcnJvcjtcblxuXHRpZiAod2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUuZXJyb3IpIHtcblx0XHRsb2dFcnJvciA9IGZ1bmN0aW9uKG1zZykge1xuXHRcdFx0d2luZG93LmNvbnNvbGUuZXJyb3IoXCJbc3JjZG9jLXBvbHlmaWxsXSBcIiArIG1zZyk7XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRsb2dFcnJvciA9IGZ1bmN0aW9uKCkge307XG5cdH1cblxuXHQvLyBBc3N1bWUgdGhlIGJlc3Rcblx0c3JjRG9jLnNldCA9IGltcGxlbWVudGF0aW9ucy5jb21wbGlhbnQ7XG5cdHNyY0RvYy5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oKSB7XG5cdFx0d2luZG93LnNyY0RvYyA9IF9zcmNEb2M7XG5cdFx0cmV0dXJuIHNyY0RvYztcblx0fTtcblxuXHQvLyBJZiB0aGUgYnJvd3NlciBzdXBwb3J0cyBzcmNkb2MsIG5vIHNoaW1taW5nIGlzIG5lY2Vzc2FyeVxuXHRpZiAoaXNDb21wbGlhbnQpIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRzcmNEb2Muc2V0ID0gaW1wbGVtZW50YXRpb25zLmxlZ2FjeTtcblxuXHQvLyBBdXRvbWF0aWNhbGx5IHNoaW0gYW55IGlmcmFtZXMgYWxyZWFkeSBwcmVzZW50IGluIHRoZSBkb2N1bWVudFxuXHRpZnJhbWVzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJpZnJhbWVcIik7XG5cdGlkeCA9IGlmcmFtZXMubGVuZ3RoO1xuXG5cdHdoaWxlIChpZHgtLSkge1xuXHRcdHNyY0RvYy5zZXQoIGlmcmFtZXNbaWR4XSApO1xuXHR9XG5cbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/srcdoc-polyfill/srcdoc-polyfill.js\n");

/***/ }),

/***/ "./node_modules/uuid/lib/bytesToUuid.js":
/*!**********************************************!*\
  !*** ./node_modules/uuid/lib/bytesToUuid.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n  return ([bth[buf[i++]], bth[buf[i++]], \n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]]]).join('');\n}\n\nmodule.exports = bytesToUuid;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXVpZC9saWIvYnl0ZXNUb1V1aWQuanM/MjM2NiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxTQUFTO0FBQ3hCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdXVpZC9saWIvYnl0ZXNUb1V1aWQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvbnZlcnQgYXJyYXkgb2YgMTYgYnl0ZSB2YWx1ZXMgdG8gVVVJRCBzdHJpbmcgZm9ybWF0IG9mIHRoZSBmb3JtOlxuICogWFhYWFhYWFgtWFhYWC1YWFhYLVhYWFgtWFhYWFhYWFhYWFhYXG4gKi9cbnZhciBieXRlVG9IZXggPSBbXTtcbmZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyArK2kpIHtcbiAgYnl0ZVRvSGV4W2ldID0gKGkgKyAweDEwMCkudG9TdHJpbmcoMTYpLnN1YnN0cigxKTtcbn1cblxuZnVuY3Rpb24gYnl0ZXNUb1V1aWQoYnVmLCBvZmZzZXQpIHtcbiAgdmFyIGkgPSBvZmZzZXQgfHwgMDtcbiAgdmFyIGJ0aCA9IGJ5dGVUb0hleDtcbiAgLy8gam9pbiB1c2VkIHRvIGZpeCBtZW1vcnkgaXNzdWUgY2F1c2VkIGJ5IGNvbmNhdGVuYXRpb246IGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMxNzUjYzRcbiAgcmV0dXJuIChbYnRoW2J1ZltpKytdXSwgYnRoW2J1ZltpKytdXSwgXG5cdGJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV0sICctJyxcblx0YnRoW2J1ZltpKytdXSwgYnRoW2J1ZltpKytdXSwgJy0nLFxuXHRidGhbYnVmW2krK11dLCBidGhbYnVmW2krK11dLCAnLScsXG5cdGJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV0sICctJyxcblx0YnRoW2J1ZltpKytdXSwgYnRoW2J1ZltpKytdXSxcblx0YnRoW2J1ZltpKytdXSwgYnRoW2J1ZltpKytdXSxcblx0YnRoW2J1ZltpKytdXSwgYnRoW2J1ZltpKytdXV0pLmpvaW4oJycpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJ5dGVzVG9VdWlkO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/uuid/lib/bytesToUuid.js\n");

/***/ }),

/***/ "./node_modules/uuid/lib/rng-browser.js":
/*!**********************************************!*\
  !*** ./node_modules/uuid/lib/rng-browser.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\n\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto\n// implementation. Also, find the complete implementation of crypto on IE11.\nvar getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||\n                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));\n\nif (getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n\n  module.exports = function whatwgRNG() {\n    getRandomValues(rnds8);\n    return rnds8;\n  };\n} else {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n\n  module.exports = function mathRNG() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXVpZC9saWIvcm5nLWJyb3dzZXIuanM/ZTFmNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUNBQWlDOztBQUVqQztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esc0JBQXNCLFFBQVE7QUFDOUI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy91dWlkL2xpYi9ybmctYnJvd3Nlci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFVuaXF1ZSBJRCBjcmVhdGlvbiByZXF1aXJlcyBhIGhpZ2ggcXVhbGl0eSByYW5kb20gIyBnZW5lcmF0b3IuICBJbiB0aGVcbi8vIGJyb3dzZXIgdGhpcyBpcyBhIGxpdHRsZSBjb21wbGljYXRlZCBkdWUgdG8gdW5rbm93biBxdWFsaXR5IG9mIE1hdGgucmFuZG9tKClcbi8vIGFuZCBpbmNvbnNpc3RlbnQgc3VwcG9ydCBmb3IgdGhlIGBjcnlwdG9gIEFQSS4gIFdlIGRvIHRoZSBiZXN0IHdlIGNhbiB2aWFcbi8vIGZlYXR1cmUtZGV0ZWN0aW9uXG5cbi8vIGdldFJhbmRvbVZhbHVlcyBuZWVkcyB0byBiZSBpbnZva2VkIGluIGEgY29udGV4dCB3aGVyZSBcInRoaXNcIiBpcyBhIENyeXB0b1xuLy8gaW1wbGVtZW50YXRpb24uIEFsc28sIGZpbmQgdGhlIGNvbXBsZXRlIGltcGxlbWVudGF0aW9uIG9mIGNyeXB0byBvbiBJRTExLlxudmFyIGdldFJhbmRvbVZhbHVlcyA9ICh0eXBlb2YoY3J5cHRvKSAhPSAndW5kZWZpbmVkJyAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzICYmIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMuYmluZChjcnlwdG8pKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YobXNDcnlwdG8pICE9ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cubXNDcnlwdG8uZ2V0UmFuZG9tVmFsdWVzID09ICdmdW5jdGlvbicgJiYgbXNDcnlwdG8uZ2V0UmFuZG9tVmFsdWVzLmJpbmQobXNDcnlwdG8pKTtcblxuaWYgKGdldFJhbmRvbVZhbHVlcykge1xuICAvLyBXSEFUV0cgY3J5cHRvIFJORyAtIGh0dHA6Ly93aWtpLndoYXR3Zy5vcmcvd2lraS9DcnlwdG9cbiAgdmFyIHJuZHM4ID0gbmV3IFVpbnQ4QXJyYXkoMTYpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB3aGF0d2dSTkcoKSB7XG4gICAgZ2V0UmFuZG9tVmFsdWVzKHJuZHM4KTtcbiAgICByZXR1cm4gcm5kczg7XG4gIH07XG59IGVsc2Uge1xuICAvLyBNYXRoLnJhbmRvbSgpLWJhc2VkIChSTkcpXG4gIC8vXG4gIC8vIElmIGFsbCBlbHNlIGZhaWxzLCB1c2UgTWF0aC5yYW5kb20oKS4gIEl0J3MgZmFzdCwgYnV0IGlzIG9mIHVuc3BlY2lmaWVkXG4gIC8vIHF1YWxpdHkuXG4gIHZhciBybmRzID0gbmV3IEFycmF5KDE2KTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG1hdGhSTkcoKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIHI7IGkgPCAxNjsgaSsrKSB7XG4gICAgICBpZiAoKGkgJiAweDAzKSA9PT0gMCkgciA9IE1hdGgucmFuZG9tKCkgKiAweDEwMDAwMDAwMDtcbiAgICAgIHJuZHNbaV0gPSByID4+PiAoKGkgJiAweDAzKSA8PCAzKSAmIDB4ZmY7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJuZHM7XG4gIH07XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/uuid/lib/rng-browser.js\n");

/***/ }),

/***/ "./node_modules/uuid/v4.js":
/*!*********************************!*\
  !*** ./node_modules/uuid/v4.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var rng = __webpack_require__(/*! ./lib/rng */ \"./node_modules/uuid/lib/rng-browser.js\");\nvar bytesToUuid = __webpack_require__(/*! ./lib/bytesToUuid */ \"./node_modules/uuid/lib/bytesToUuid.js\");\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXVpZC92NC5qcz9jNjRlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFVBQVUsbUJBQU8sQ0FBQyx5REFBVztBQUM3QixrQkFBa0IsbUJBQU8sQ0FBQyxpRUFBbUI7O0FBRTdDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG9CQUFvQixTQUFTO0FBQzdCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3V1aWQvdjQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcm5nID0gcmVxdWlyZSgnLi9saWIvcm5nJyk7XG52YXIgYnl0ZXNUb1V1aWQgPSByZXF1aXJlKCcuL2xpYi9ieXRlc1RvVXVpZCcpO1xuXG5mdW5jdGlvbiB2NChvcHRpb25zLCBidWYsIG9mZnNldCkge1xuICB2YXIgaSA9IGJ1ZiAmJiBvZmZzZXQgfHwgMDtcblxuICBpZiAodHlwZW9mKG9wdGlvbnMpID09ICdzdHJpbmcnKSB7XG4gICAgYnVmID0gb3B0aW9ucyA9PT0gJ2JpbmFyeScgPyBuZXcgQXJyYXkoMTYpIDogbnVsbDtcbiAgICBvcHRpb25zID0gbnVsbDtcbiAgfVxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICB2YXIgcm5kcyA9IG9wdGlvbnMucmFuZG9tIHx8IChvcHRpb25zLnJuZyB8fCBybmcpKCk7XG5cbiAgLy8gUGVyIDQuNCwgc2V0IGJpdHMgZm9yIHZlcnNpb24gYW5kIGBjbG9ja19zZXFfaGlfYW5kX3Jlc2VydmVkYFxuICBybmRzWzZdID0gKHJuZHNbNl0gJiAweDBmKSB8IDB4NDA7XG4gIHJuZHNbOF0gPSAocm5kc1s4XSAmIDB4M2YpIHwgMHg4MDtcblxuICAvLyBDb3B5IGJ5dGVzIHRvIGJ1ZmZlciwgaWYgcHJvdmlkZWRcbiAgaWYgKGJ1Zikge1xuICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCAxNjsgKytpaSkge1xuICAgICAgYnVmW2kgKyBpaV0gPSBybmRzW2lpXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnVmIHx8IGJ5dGVzVG9VdWlkKHJuZHMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHY0O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/uuid/v4.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzP2NkMDAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEM7O0FBRTVDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9nbG9iYWwuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/global.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzP2NlZDIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9tb2R1bGUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/module.js\n");

/***/ }),

/***/ "./package.json":
/*!**********************!*\
  !*** ./package.json ***!
  \**********************/
/*! exports provided: name, title, version, description, main, keywords, license, scripts, dependencies, devDependencies, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"name\\\":\\\"videojs-mse-over-clsp\\\",\\\"title\\\":\\\"CLSP Plugin\\\",\\\"version\\\":\\\"0.16.4+18\\\",\\\"description\\\":\\\"Uses clsp (iot) as a video distribution system, video is is received via the clsp client then rendered using the media source extensions. \\\",\\\"main\\\":\\\"dist/videojs-mse-over-clsp.js\\\",\\\"keywords\\\":[\\\"videojs\\\",\\\"videojs-plugin\\\"],\\\"license\\\":\\\"MIT\\\",\\\"scripts\\\":{\\\"build\\\":\\\"./scripts/build.sh\\\",\\\"serve\\\":\\\"./scripts/serve.sh\\\",\\\"serve:vagrant\\\":\\\"WATCH_WITH_POLLING=true yarn run serve\\\",\\\"lint\\\":\\\"./scripts/lint.sh\\\",\\\"lint-fix\\\":\\\"./scripts/lint.sh --fix\\\",\\\"preversion\\\":\\\"./scripts/version.sh --pre\\\",\\\"version\\\":\\\"./scripts/version.sh\\\",\\\"postversion\\\":\\\"./scripts/version.sh --post\\\"},\\\"dependencies\\\":{\\\"debug\\\":\\\"4.1.1\\\",\\\"lodash\\\":\\\"4.17.15\\\",\\\"paho-mqtt\\\":\\\"1.1.0\\\"},\\\"devDependencies\\\":{\\\"@babel/core\\\":\\\"7.8.3\\\",\\\"@babel/plugin-proposal-class-properties\\\":\\\"7.8.3\\\",\\\"@babel/plugin-proposal-object-rest-spread\\\":\\\"7.8.3\\\",\\\"@babel/plugin-syntax-dynamic-import\\\":\\\"7.8.3\\\",\\\"@babel/polyfill\\\":\\\"7.8.3\\\",\\\"@babel/preset-env\\\":\\\"7.8.3\\\",\\\"babel-eslint\\\":\\\"10.0.3\\\",\\\"babel-loader\\\":\\\"8.0.6\\\",\\\"chalk\\\":\\\"3.0.0\\\",\\\"css-loader\\\":\\\"3.4.2\\\",\\\"eslint\\\":\\\"6.8.0\\\",\\\"eslint-config-standard\\\":\\\"14.1.0\\\",\\\"eslint-plugin-import\\\":\\\"2.20.0\\\",\\\"eslint-plugin-node\\\":\\\"11.0.0\\\",\\\"eslint-plugin-promise\\\":\\\"4.2.1\\\",\\\"eslint-plugin-standard\\\":\\\"4.0.1\\\",\\\"extract-text-webpack-plugin\\\":\\\"4.0.0-beta.0\\\",\\\"humanize\\\":\\\"0.0.9\\\",\\\"jquery\\\":\\\"3.4.1\\\",\\\"moment\\\":\\\"2.24.0\\\",\\\"node-sass\\\":\\\"4.13.1\\\",\\\"pre-commit\\\":\\\"1.2.2\\\",\\\"progress-bar-webpack-plugin\\\":\\\"2.1.0\\\",\\\"sass-loader\\\":\\\"8.0.2\\\",\\\"srcdoc-polyfill\\\":\\\"1.0.0\\\",\\\"standard\\\":\\\"14.3.1\\\",\\\"style-loader\\\":\\\"1.1.3\\\",\\\"terser-webpack-plugin\\\":\\\"2.3.2\\\",\\\"url-loader\\\":\\\"3.0.0\\\",\\\"video.js\\\":\\\"7.6.6\\\",\\\"videojs-errors\\\":\\\"4.3.0\\\",\\\"webpack\\\":\\\"4.41.5\\\",\\\"webpack-bundle-analyzer\\\":\\\"3.6.0\\\",\\\"webpack-dev-server\\\":\\\"3.10.1\\\",\\\"write-file-webpack-plugin\\\":\\\"4.5.1\\\"}}\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIuL3BhY2thZ2UuanNvbi5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./package.json\n");

/***/ }),

/***/ "./src/js/conduit/Conduit.js":
/*!***********************************!*\
  !*** ./src/js/conduit/Conduit.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Conduit; });\n/* harmony import */ var uuid_v4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uuid/v4 */ \"./node_modules/uuid/v4.js\");\n/* harmony import */ var uuid_v4__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(uuid_v4__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/ */ \"./src/js/utils/index.js\");\n/* harmony import */ var _Router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Router */ \"./src/js/conduit/Router.js\");\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/logger */ \"./src/js/utils/logger.js\");\n/* harmony import */ var _iov_StreamConfiguration__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../iov/StreamConfiguration */ \"./src/js/iov/StreamConfiguration.js\");\n\n/**\n * The Conduit a hidden iframe that is used to establish a dedicated CLSP\n * websocket for a single video. This is basically an in-browser micro service\n * which uses cross-document communication to route data to and from the iframe.\n *\n * This code is a layer of abstraction on top of the CLSP router, and the\n * controller of the iframe that contains the router.\n */\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\nvar DEFAULT_MAX_RECONNECTION_ATTEMPTS = 0;\nvar DEFAULT_MAX_RECONNECTION_TIME = 0; // When trying to reconnect, try every 5 seconds for the first 2 minutes, then\n// try every 30 seconds after 2 minutes.\n\nvar DEFAULT_IMMEDIATE_RECONNECTION_DELAY = 5;\nvar DEFAULT_IMMEDIATE_RECONNECTION_DURATION = 120;\nvar DEFAULT_RECONNECTION_DELAY = 30;\nvar DEFAULT_STREAM_DATA_TIMEOUT_DURATION = _utils___WEBPACK_IMPORTED_MODULE_1__[\"default\"].DEFAULT_STREAM_TIMEOUT;\nvar DEFAULT_MOOV_TIMEOUT_DURATION = _utils___WEBPACK_IMPORTED_MODULE_1__[\"default\"].DEFAULT_STREAM_TIMEOUT;\nvar DEFAULT_FIRST_MOOF_TIMEOUT_DURATION = _utils___WEBPACK_IMPORTED_MODULE_1__[\"default\"].DEFAULT_STREAM_TIMEOUT;\nvar DEFAULT_MOOF_TIMEOUT_DURATION = _utils___WEBPACK_IMPORTED_MODULE_1__[\"default\"].DEFAULT_STREAM_TIMEOUT;\nvar DEFAULT_PUBLISH_STATS_INTERVAL = 5;\nvar DEFAULT_TRANSACTION_TIMEOUT = 5;\nvar DEFAULT_ROUTER_CONNECTION_TIMEOUT = 120; // Setting this to half of the default value to help with SFS memory\n// management\n\nvar DEFAULT_ROUTER_KEEP_ALIVE_INTERVAL = 30; // The number of seconds to wait for a \"publish\" message to be delivered\n\nvar DEFAULT_ROUTER_PUBLISH_TIMEOUT = _utils___WEBPACK_IMPORTED_MODULE_1__[\"default\"].DEFAULT_STREAM_TIMEOUT;\n\nvar Conduit =\n/*#__PURE__*/\nfunction () {\n  _createClass(Conduit, null, [{\n    key: \"factory\",\n    value: function factory(logId, clientId, streamConfiguration, containerElement, onReconnect, onMessageError) {\n      return new Conduit(logId, clientId, streamConfiguration, containerElement, onReconnect, onMessageError);\n    }\n    /**\n     * @private\n     *\n     * @param {String} logId\n     *   a string that identifies this router in log messages\n     * @param {String} clientId\n     *   the guid to be used to construct the topic\n     * @param {StreamConfiguration} streamConfiguration\n     *   The stream configuration to pull from the CLSP server / SFS\n     * @param {Element} containerElement\n     *   The container of the video element and where the Conduit's iframe will be\n     *   inserted\n     * @param {Function} onReconnect\n     *   The action to perform when a reconnection attempt is successful\n     * @param {Function} onMessageError\n     *   The action to perform when an error is encountered between the Router\n     *   and Conduit instances\n     */\n\n  }]);\n\n  function Conduit(logId, clientId, streamConfiguration, containerElement) {\n    var onReconnect = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : function () {};\n    var onMessageError = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : function () {};\n\n    _classCallCheck(this, Conduit);\n\n    if (!logId) {\n      throw new Error('logId is required to construct a new Conduit instance.');\n    }\n\n    if (!clientId) {\n      throw new Error('clientId is required to construct a new Conduit instance.');\n    }\n\n    if (!_iov_StreamConfiguration__WEBPACK_IMPORTED_MODULE_4__[\"default\"].isStreamConfiguration(streamConfiguration)) {\n      throw new Error('invalid streamConfiguration passed to Conduit constructor');\n    }\n\n    if (!containerElement) {\n      throw new Error('containerElement is required to construct a new Conduit instance');\n    }\n\n    this.logId = logId;\n    this.clientId = clientId;\n    this.streamConfiguration = streamConfiguration;\n    this.containerElement = containerElement;\n    this.streamName = this.streamConfiguration.streamName;\n    this.guid = null;\n    this.logger = Object(_utils_logger__WEBPACK_IMPORTED_MODULE_3__[\"default\"])().factory(\"Conduit \".concat(this.logId));\n    this.logger.debug('Constructing...');\n    this.statsMsg = {\n      byteCount: 0,\n      inkbps: 0,\n      host: document.location.host,\n      clientId: this.clientId\n    };\n    this.handlers = {};\n    this.reconnectionAttempts = 0;\n    this.connected = false;\n    this._onMessageError = onMessageError;\n    this._onReconnect = onReconnect;\n    this.statsInterval = null;\n    this.firstMoofTimeout = null;\n    this.pendingTransactions = {};\n    this.moovRequestTopic = \"\".concat(this.clientId, \"/init-segment/\").concat(parseInt(Math.random() * 1000000));\n    this.publishHandlers = {};\n    this.reconnectionInProgress = null; // These can be configured manually after construction\n\n    this.MAX_RECONNECTION_ATTEMPTS = DEFAULT_MAX_RECONNECTION_ATTEMPTS;\n    this.MAX_RECONNECTION_TIME = DEFAULT_MAX_RECONNECTION_TIME;\n    this.IMMEDIATE_RECONNECTION_DELAY = DEFAULT_IMMEDIATE_RECONNECTION_DELAY;\n    this.IMMEDIATE_RECONNECTION_DURATION = DEFAULT_IMMEDIATE_RECONNECTION_DURATION;\n    this.RECONNECTION_DELAY = DEFAULT_RECONNECTION_DELAY;\n    this.STREAM_DATA_TIMEOUT_DURATION = DEFAULT_STREAM_DATA_TIMEOUT_DURATION;\n    this.MOOV_TIMEOUT_DURATION = DEFAULT_MOOV_TIMEOUT_DURATION;\n    this.FIRST_MOOF_TIMEOUT_DURATION = DEFAULT_FIRST_MOOF_TIMEOUT_DURATION;\n    this.MOOF_TIMEOUT_DURATION = DEFAULT_MOOF_TIMEOUT_DURATION;\n    this.PUBLISH_STATS_INTERVAL = DEFAULT_PUBLISH_STATS_INTERVAL;\n    this.TRANSACTION_TIMEOUT = DEFAULT_TRANSACTION_TIMEOUT;\n    this.ROUTER_CONNECTION_TIMEOUT = DEFAULT_ROUTER_CONNECTION_TIMEOUT;\n    this.ROUTER_KEEP_ALIVE_INTERVAL = DEFAULT_ROUTER_KEEP_ALIVE_INTERVAL;\n    this.ROUTER_PUBLISH_TIMEOUT = DEFAULT_ROUTER_PUBLISH_TIMEOUT;\n  }\n  /**\n   * After constructing, call this to initialize the conduit, which will create\n   * the iframe and the Router needed to get the stream from the server.\n   *\n   * @returns Promise\n   *   Resolves when the Router has been successfully created.\n   *   Rejects upon failure to create the Router.\n   */\n\n\n  _createClass(Conduit, [{\n    key: \"initialize\",\n    value: function initialize() {\n      var _this = this;\n\n      this.logger.debug('Initializing...');\n      return new Promise(function (resolve, reject) {\n        _this._onRouterCreate = function (event) {\n          var clientId = event.data.clientId; // A window message was received that is not related to CLSP\n\n          if (!clientId) {\n            return;\n          } // This message was intended for another Conduit instance\n\n\n          if (_this.clientId !== clientId) {\n            return;\n          }\n\n          var eventType = event.data.event; // Filter out all other window messages from the Router\n\n          if (eventType !== Conduit.routerEvents.CREATED && eventType !== Conduit.routerEvents.CREATE_FAILURE) {\n            return;\n          }\n\n          _this.logger.debug(\"initialize \\\"\".concat(eventType, \"\\\" event\")); // Whether success or failure, remove the event listener\n\n\n          window.removeEventListener('message', _this._onRouterCreate); // Once the event listener is removed, remove the listener handler,\n          // since it will not be used again and to prevent the `destroy` method\n          // from trying to unregister it.\n\n          _this._onRouterCreate = null;\n\n          if (eventType === Conduit.routerEvents.CREATE_FAILURE) {\n            return reject(event.data.reason);\n          }\n\n          resolve();\n        }; // When the Router in the iframe connects, it will broadcast a message\n        // letting us know it connected, or letting us know it failed.\n\n\n        window.addEventListener('message', _this._onRouterCreate);\n        _this.iframe = _this._generateIframe(); // @todo - if the Iov were to create a wrapper around the video element\n        // that it manages (rather than expecting one to already be there), each\n        // video element and iframe could be contained in a single container,\n        // rather than potentially having multiple video elements and multiple\n        // iframes contained in a single parent.\n\n        _this.containerElement.appendChild(_this.iframe);\n      });\n    }\n    /**\n     * After initialization, call this to establish the connection to the server.\n     *\n     * Note that this is called within the play method, so you shouldn't ever need\n     * to manually call `connect`.\n     *\n     * @returns Promise\n     *   Resolves when the connection is successfully established.\n     *   Rejects upon failure to connect after a number of retries.\n     */\n\n  }, {\n    key: \"connect\",\n    value: function connect() {\n      var _this2 = this;\n\n      var reconnect = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this.logger.debug('Connecting to CLSP server...');\n      return new Promise(function (resolve, reject) {\n        if (_this2.connected) {\n          return resolve();\n        }\n\n        _this2._onConnect = function (event) {\n          var clientId = event.data.clientId; // A window message was received that is not related to CLSP\n\n          if (!clientId) {\n            return;\n          } // This message was intended for another conduit\n\n\n          if (_this2.clientId !== clientId) {\n            return;\n          }\n\n          var eventType = event.data.event; // Filter out all other window messages\n\n          if (eventType !== Conduit.routerEvents.CONNECT_SUCCESS && eventType !== Conduit.routerEvents.CONNECT_FAILURE) {\n            return;\n          }\n\n          _this2.logger.debug(\"connect \\\"\".concat(eventType, \"\\\" event\")); // Whether success or failure, remove the event listener\n\n\n          window.removeEventListener('message', _this2._onConnect);\n          _this2._onConnect = null;\n\n          if (eventType === Conduit.routerEvents.CONNECT_FAILURE) {\n            _this2.logger.error(new Error(event.data.reason));\n\n            if (reconnect) {\n              _this2.reconnect().then(resolve)[\"catch\"](reject);\n\n              return;\n            }\n\n            return reject(new Error('Failed to connect'));\n          } // the mse service will stop streaming to us if we don't send\n          // a message to iov/stats within 1 minute.\n\n\n          _this2.statsInterval = setInterval(function () {\n            _this2.publishStats();\n          }, _this2.PUBLISH_STATS_INTERVAL * 1000);\n          _this2.connected = true;\n\n          _this2.logger.info('Connected');\n\n          resolve();\n        };\n\n        window.addEventListener('message', _this2._onConnect);\n\n        _this2._command({\n          method: Conduit.iframeCommands.CONNECT\n        });\n      });\n    }\n    /**\n     * Called many times, each time a moof (segment) is received\n     *\n     * @callback Conduit-onMoof\n     * @param {any} moof - a stream segment\n     */\n\n    /**\n     * If the JWT is valid or if we are not using a JWT, perform the necessary\n     * conduit operations to retrieve stream segments (moofs).  The actual\n     * \"playing\" occurs in the player, since it involves taking those received\n     * stream segments and using MSE to display them.\n     *\n     * @async\n     *\n     * @param {Conduit-onMoof} onMoof\n     *   the function that will handle the moof\n     *\n     * @returns {Promise}\n     *   * Resolves once the first moof has been received\n     *   * Rejects if the moov or first moof time out\n     */\n\n  }, {\n    key: \"play\",\n    value: function () {\n      var _play = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(onMoof) {\n        var _ref, guid, mimeCodec, _ref2, moov;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.logger.info('Playing...'); // @todo - should we have a check to confirm that the conduit has been initialized?\n                // @todo - should connect be called here?\n\n                _context.next = 3;\n                return this.connect();\n\n              case 3:\n                if (!(this.streamConfiguration.jwt && this.streamConfiguration.jwt.length > 0)) {\n                  _context.next = 7;\n                  break;\n                }\n\n                _context.next = 6;\n                return this.validateJwt();\n\n              case 6:\n                this.streamName = _context.sent;\n\n              case 7:\n                if (!(this.streamConfiguration.hash && this.streamConfiguration.hash.length > 0)) {\n                  _context.next = 11;\n                  break;\n                }\n\n                _context.next = 10;\n                return this.validateHash();\n\n              case 10:\n                this.streamName = _context.sent;\n\n              case 11:\n                this.logger.info('Play is requesting stream...');\n                _context.prev = 12;\n                _context.next = 15;\n                return this.requestStreamData();\n\n              case 15:\n                _ref = _context.sent;\n                guid = _ref.guid;\n                mimeCodec = _ref.mimeCodec;\n                this.guid = guid; // Get the moov first\n\n                _context.next = 21;\n                return this.requestMoov();\n\n              case 21:\n                _ref2 = _context.sent;\n                moov = _ref2.moov;\n                _context.next = 25;\n                return this.requestMoofs(onMoof);\n\n              case 25:\n                return _context.abrupt(\"return\", {\n                  guid: guid,\n                  mimeCodec: mimeCodec,\n                  moov: moov\n                });\n\n              case 28:\n                _context.prev = 28;\n                _context.t0 = _context[\"catch\"](12);\n                this.logger.error(\"Error trying to play stream \".concat(this.streamName)); // @todo - we could retry\n\n                this.stop();\n                throw _context.t0;\n\n              case 33:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[12, 28]]);\n      }));\n\n      function play(_x) {\n        return _play.apply(this, arguments);\n      }\n\n      return play;\n    }()\n    /**\n     * Disconnect from the CLSP server\n     *\n     * @todo - return a promise that resolves when the disconnection is complete!\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      this.logger.debug('Disconnecting...'); // If a connection is in progress, cancel it\n\n      if (this._onConnect) {\n        window.removeEventListener('message', this._onConnect);\n        this._onConnect = null;\n      }\n\n      this.connected = false; // when a stream fails, it no longer needs to send stats to the\n      // server, and it may not even be connected to the server\n\n      this.clearStatsInterval();\n\n      this._command({\n        method: Conduit.iframeCommands.DISCONNECT\n      });\n    }\n    /**\n     * Stop the playing stream and cancel all requests\n     *\n     * @todo - await the disconnection, and maybe even the\n     * unsubscribes\n      */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      var _this3 = this;\n\n      this.logger.debug('Stopping stream...');\n\n      for (var _i = 0, _Object$entries = Object.entries(this.pendingTransactions); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            id = _Object$entries$_i[0],\n            pendingTransaction = _Object$entries$_i[1];\n\n        if (pendingTransaction.timeout) {\n          clearTimeout(pendingTransaction.timeout);\n          pendingTransaction.timeout = null;\n        }\n      }\n\n      this.pendingTransactions = {};\n      this.clearFirstMoofTimeout();\n      this.clearMoofTimeout();\n\n      if (this.guid) {\n        // Stop listening for the moov\n        this.unsubscribe(this.moovRequestTopic); // Stop listening for moofs\n\n        this.unsubscribe(\"iov/video/\".concat(this.guid, \"/live\")); // Stop listening for resync events\n\n        this.unsubscribe(\"iov/video/\".concat(this.guid, \"/resync\")); // Tell the server we've stopped\n\n        this.publish(\"iov/video/\".concat(this.guid, \"/stop\"), {\n          clientId: this.clientId\n        })[\"catch\"](function (error) {\n          _this3.logger.warn('Error while stopping:');\n\n          _this3.logger.error(error);\n        });\n      } else {\n        this.logger.info(\"Trying to stop stream \".concat(this.streamName, \" with no guid!\"));\n      }\n\n      this.disconnect();\n    }\n    /**\n     * Clean up and dereference the necessary properties.  Will also disconnect\n     * and destroy the iframe.\n     *\n     * @todo - return a Promise, but do not wait for the promise to resolve to\n     * continue the destroy logic.  the promise should resolve/reject based on\n     * the disconnect method call\n     *\n     * @returns {void}\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.logger.debug('Destroying...');\n\n      if (this.destroyed) {\n        return;\n      }\n\n      this.destroyed = true;\n\n      if (this._onConnect) {\n        window.removeEventListener('message', this._onConnect);\n        this._onConnect = null;\n      }\n\n      if (this._onRouterCreate) {\n        window.removeEventListener('message', this._onRouterCreate);\n        this._onRouterCreate = null;\n      }\n\n      this.stop();\n      this.clientId = null;\n      this.guid = null; // The caller must destroy the streamConfiguration\n\n      this.streamConfiguration = null;\n      this.containerElement = null; // The Router will be destroyed along with the iframe\n\n      this.iframe.parentNode.removeChild(this.iframe); // this.iframe.remove();\n\n      this.iframe.srcdoc = '';\n      this.iframe = null;\n      this.handlers = null;\n      this.reconnectionAttempts = null;\n      this.connected = null;\n      this.firstMoofTimeout = null;\n      this.moovRequestTopic = null;\n      this.statsMsg = null;\n      this.publishHandlers = null;\n      this.reconnectionInProgress = null; // @todo - can this be safely dereferenced?\n      // this._onMessageError = null;\n    }\n    /**\n     * Validate the jwt that this conduit was constructed with.\n     *\n     * @async\n     *\n     * @returns {String}\n     *   the stream name\n     */\n\n  }, {\n    key: \"validateJwt\",\n    value: function () {\n      var _validateJwt = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var _ref3, response, t, streamName;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.logger.debug('Validating JWT...'); // response ->  {\"status\": 200, \"target_url\": \"clsp://sfs1/fakestream\", \"error\": null}\n\n                _context2.next = 3;\n                return this.transaction('iov/jwtValidate', {\n                  b64_access_url: this.streamConfiguration.b64_jwt_access_url,\n                  token: this.streamConfiguration.jwt\n                });\n\n              case 3:\n                _ref3 = _context2.sent;\n                response = _ref3.payloadString;\n\n                if (!(response.status === 403)) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                throw new Error('JwtUnAuthorized');\n\n              case 7:\n                if (!(response.status !== 200)) {\n                  _context2.next = 9;\n                  break;\n                }\n\n                throw new Error('JwtInvalid');\n\n              case 9:\n                // TODO, figure out how to handle a change in the sfs url from the\n                // clsp-jwt from the target url returned from decrypting the jwt\n                // token.\n                // Example:\n                //    user enters 'clsp-jwt://sfs1/jwt?Start=0&End=...' for source\n                //    clspUrl = 'clsp://SFS2/streamOnDifferentSfs\n                // --- due to the videojs architecture i don't see a clean way of doing this.\n                // ==============================================================================\n                //    The only way I can see doing this cleanly is to change videojs itself to\n                //    allow the 'canHandleSource' function in MqttSourceHandler to return a\n                //    promise not a value, then ascychronously find out if it can play this\n                //    source after making the call to decrypt the jwt token.22\n                // =============================================================================\n                // Note: this could go away in architecture 2.0 if CLSP was a cluster in this\n                // case what is now the sfs ip address in clsp url will always be the same it will\n                // be the public ip of cluster gateway.\n                t = response.target_url.split('/'); // get the actual stream name\n\n                streamName = t[t.length - 1];\n                return _context2.abrupt(\"return\", streamName);\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function validateJwt() {\n        return _validateJwt.apply(this, arguments);\n      }\n\n      return validateJwt;\n    }()\n    /**\n     * Validate the hash that this conduit was constructed with.\n     *\n     * @async\n     *\n     * @returns {String}\n     *   the stream name\n     */\n\n  }, {\n    key: \"validateHash\",\n    value: function () {\n      var _validateHash = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3() {\n        var _ref4, response, t, streamName;\n\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.logger.debug('Validating Hash...'); // response ->  {\"status\": 200, \"target_url\": \"clsp://sfs1/fakestream\", \"error\": null}\n\n                _context3.next = 3;\n                return this.transaction('iov/hashValidate', {\n                  b64HashURL: this.streamConfiguration.b64_hash_access_url,\n                  token: this.streamConfiguration.hash\n                });\n\n              case 3:\n                _ref4 = _context3.sent;\n                response = _ref4.payloadString;\n\n                if (!(response.status === 403)) {\n                  _context3.next = 7;\n                  break;\n                }\n\n                throw new Error('HashUnAuthorized');\n\n              case 7:\n                if (!(response.status !== 200)) {\n                  _context3.next = 9;\n                  break;\n                }\n\n                throw new Error('HashInvalid');\n\n              case 9:\n                // TODO, figure out how to handle a change in the sfs url from the\n                // clsp-hash from the target url returned from decrypting the hash\n                // token.\n                // Example:\n                //    user enters 'clsp-hash://sfs1/hash?start=0&end=...&token=...' for source\n                //    clspUrl = 'clsp://SFS2/streamOnDifferentSfs\n                // --- due to the videojs architecture i don't see a clean way of doing this.\n                // ==============================================================================\n                //    The only way I can see doing this cleanly is to change videojs itself to\n                //    allow the 'canHandleSource' function in MqttSourceHandler to return a\n                //    promise not a value, then ascychronously find out if it can play this\n                //    source after making the call to decrypt the hash token.22\n                // =============================================================================\n                // Note: this could go away in architecture 2.0 if CLSP was a cluster in this\n                // case what is now the sfs ip address in clsp url will always be the same it will\n                // be the public ip of cluster gateway.\n                t = response.target_url.split('/'); // get the actual stream name\n\n                streamName = t[t.length - 1];\n                return _context3.abrupt(\"return\", streamName);\n\n              case 12:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function validateHash() {\n        return _validateHash.apply(this, arguments);\n      }\n\n      return validateHash;\n    }()\n    /**\n     * Get the `guid` and `mimeCodec` for the stream.  The guid serves as a stream\n     * instance for a given camera or video feed, and is needed to make requests\n     * for the stream instance.\n     *\n     * @async\n     *\n     * @returns {Object}\n     *   The video metadata, including the `guid` and `mimeCodec` properties.\n     */\n\n  }, {\n    key: \"requestStreamData\",\n    value: function () {\n      var _requestStreamData = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4() {\n        var _ref5, videoMetaData;\n\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                this.logger.debug('Requesting Stream...');\n                _context4.next = 3;\n                return this.transaction(\"iov/video/\".concat(window.btoa(this.streamName), \"/request\"), {\n                  clientId: this.clientId\n                }, this.STREAM_DATA_TIMEOUT_DURATION);\n\n              case 3:\n                _ref5 = _context4.sent;\n                videoMetaData = _ref5.payloadString;\n\n                if (videoMetaData.mimeCodec) {\n                  _context4.next = 7;\n                  break;\n                }\n\n                throw new Error('Error while requesting stream: mimeCodec was not received!');\n\n              case 7:\n                if (videoMetaData.guid) {\n                  _context4.next = 9;\n                  break;\n                }\n\n                throw new Error('Error while requesting stream: guid was not received!');\n\n              case 9:\n                return _context4.abrupt(\"return\", videoMetaData);\n\n              case 10:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function requestStreamData() {\n        return _requestStreamData.apply(this, arguments);\n      }\n\n      return requestStreamData;\n    }()\n  }, {\n    key: \"clearStatsInterval\",\n    value: function clearStatsInterval() {\n      if (this.statsInterval) {\n        clearInterval(this.statsInterval);\n        this.statsInterval = null;\n      }\n    }\n  }, {\n    key: \"clearFirstMoofTimeout\",\n    value: function clearFirstMoofTimeout() {\n      if (this.firstMoofTimeout) {\n        clearTimeout(this.firstMoofTimeout);\n        this.firstMoofTimeout = null;\n      }\n    }\n  }, {\n    key: \"clearMoofTimeout\",\n    value: function clearMoofTimeout() {\n      if (this.moofTimeout) {\n        clearTimeout(this.moofTimeout);\n        this.moofTimeout = null;\n      }\n    }\n    /**\n     * Request the moov from the SFS\n     *\n     * @async\n     *\n     * @todo - why is the clientId used here rather than the stream guid?\n     *\n     * @returns {Object}\n     *   The moov\n     */\n\n  }, {\n    key: \"requestMoov\",\n    value: function () {\n      var _requestMoov = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee5() {\n        var _ref6, moov;\n\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                this.logger.info('Requesting the moov...');\n\n                if (this.guid) {\n                  _context5.next = 3;\n                  break;\n                }\n\n                throw new Error('The guid must be set before requesting the moov');\n\n              case 3:\n                _context5.next = 5;\n                return this.transaction(\"iov/video/\".concat(this.guid, \"/play\"), {\n                  initSegmentTopic: this.moovRequestTopic,\n                  clientId: this.clientId,\n                  jwt: this.streamConfiguration.jwt\n                }, this.MOOV_TIMEOUT_DURATION, // We must override the subscribe topic to get the moov\n                this.moovRequestTopic);\n\n              case 5:\n                _ref6 = _context5.sent;\n                moov = _ref6.payloadBytes;\n                return _context5.abrupt(\"return\", {\n                  moov: moov\n                });\n\n              case 8:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function requestMoov() {\n        return _requestMoov.apply(this, arguments);\n      }\n\n      return requestMoov;\n    }()\n    /**\n     * Request moofs from the SFS.  Should only be called after getting the moov.\n     *\n     * @param {Function} onMoof\n     *   The function to call when a moof is received\n     *\n     * @returns {Promise}\n     *   * Resolves when the first moof is received\n     *   * Rejects if the first moof is not received within the time defined by\n     *     FIRST_MOOF_TIMEOUT_DURATION\n     */\n\n  }, {\n    key: \"requestMoofs\",\n    value: function () {\n      var _requestMoofs = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee6() {\n        var _this4 = this;\n\n        var onMoof,\n            _args6 = arguments;\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                onMoof = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : function () {};\n                this.logger.info('Setting up moof listener...');\n\n                if (this.guid) {\n                  _context6.next = 4;\n                  break;\n                }\n\n                throw new Error('The guid must be set before requesting moofs');\n\n              case 4:\n                return _context6.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  var hasFirstMoofTimedOut = false;\n                  var hasReceivedFirstMoof = false;\n                  _this4.firstMoofTimeout = setTimeout(function () {\n                    if (hasFirstMoofTimedOut) {\n                      return;\n                    }\n\n                    hasFirstMoofTimedOut = true;\n\n                    _this4.clearFirstMoofTimeout();\n\n                    reject(new Error(\"First moof for stream \".concat(_this4.streamName, \" timed out after \").concat(_this4.FIRST_MOOF_TIMEOUT_DURATION, \" seconds\")));\n                  }, _this4.FIRST_MOOF_TIMEOUT_DURATION * 1000);\n                  var moofReceivedTopic = \"iov/video/\".concat(_this4.guid, \"/live\"); // Set up the listener for the stream itself (the moof video segments)\n\n                  _this4.subscribe(moofReceivedTopic, function (clspMessage) {\n                    if (!hasReceivedFirstMoof) {\n                      // If we received the first moof after the timeout, do nothing\n                      if (hasFirstMoofTimedOut) {\n                        _this4.logger.warn('Received first moof, but moofTimeout has already occurred...');\n\n                        return;\n                      } // If the firstMoofTimeout still exists, cancel it, since the request\n                      // did not timeout\n\n\n                      _this4.clearFirstMoofTimeout(); // Since this is the first moof, resolve\n\n\n                      hasReceivedFirstMoof = true;\n                      resolve({\n                        moofReceivedTopic: moofReceivedTopic\n                      });\n                    }\n\n                    _this4.clearMoofTimeout();\n\n                    _this4.moofTimeout = setTimeout(function () {\n                      _this4.reconnect();\n                    }, _this4.MOOF_TIMEOUT_DURATION * 1000);\n                    onMoof(clspMessage);\n                  });\n                }));\n\n              case 5:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function requestMoofs() {\n        return _requestMoofs.apply(this, arguments);\n      }\n\n      return requestMoofs;\n    }()\n    /**\n     * @callback Conduit-resyncStreamCb\n     * @param {any} - @todo - document this\n     */\n\n    /**\n     * @todo - provide method description\n     *\n     * @todo - return a Promise\n     *\n     * @param {Conduit-resyncStreamCb} onResync\n     *   The callback for the resync operation\n     */\n\n  }, {\n    key: \"resyncStream\",\n    value: function resyncStream(onResync) {\n      // subscribe to a sync topic that will be called if the stream that is\n      // feeding the mse service dies and has to be restarted that this player\n      // should restart the stream\n      this.subscribe(\"iov/video/\".concat(this.guid, \"/resync\"), onResync);\n    }\n    /**\n     * Get the list of available CLSP streams from the SFS\n     *\n     * Note - this isn't currently used anywhere\n     *\n     * @async\n     *\n     * @returns {Object}\n     *   @todo\n     */\n\n  }, {\n    key: \"getStreamList\",\n    value: function () {\n      var _getStreamList = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee7(cb) {\n        var _ref7, streamList;\n\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                this.logger.debug('Getting Stream List...');\n                _context7.next = 3;\n                return this.transaction('iov/video/list');\n\n              case 3:\n                _ref7 = _context7.sent;\n                streamList = _ref7.payloadString;\n                return _context7.abrupt(\"return\", streamList);\n\n              case 6:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function getStreamList(_x2) {\n        return _getStreamList.apply(this, arguments);\n      }\n\n      return getStreamList;\n    }()\n    /**\n     * Handler for an iframe window message.\n     *\n     * @param {Object} event\n     *   We expect event to have \"data.event\", which represents the event that\n     *   occurred relative to the clsp stream.  \"ready\" means the stream is ready,\n     *   \"fail\" means there was an error, \"data\" means a video segment / moof was\n     *   sent.\n     */\n\n  }, {\n    key: \"onMessage\",\n    value: function onMessage(event) {\n      var eventType = event.data.event;\n      this.logger.debug(\"Message received for \\\"\".concat(eventType, \"\\\" event\"));\n\n      try {\n        switch (eventType) {\n          case Conduit.routerEvents.DATA_RECEIVED:\n            {\n              this._onClspData(event.data);\n\n              break;\n            }\n\n          case Conduit.routerEvents.CONNECT_FAILURE:\n          case Conduit.routerEvents.CONNECTION_LOST:\n            {\n              if (this.reconnectionInProgress) {\n                return;\n              }\n\n              this.reconnect();\n              break;\n            }\n\n          case Conduit.routerEvents.WINDOW_MESSAGE_FAIL:\n            {\n              // @todo - do we really need to disconnect? should we reconnect?\n              this.disconnect();\n              break;\n            }\n\n          case Conduit.routerEvents.PUBLISH_SUCCESS:\n            {\n              var publishId = event.data.publishId;\n\n              if (!publishId || !this.publishHandlers[publishId]) {\n                throw new Error(\"No publish handler for \".concat(publishId));\n              }\n\n              this.publishHandlers[publishId](null, event.data, event);\n              break;\n            }\n\n          case Conduit.routerEvents.PUBLISH_FAIL:\n            {\n              var _publishId = event.data.publishId;\n\n              if (!_publishId || !this.publishHandlers[_publishId]) {\n                throw new Error(\"No publish handler for \".concat(_publishId));\n              }\n\n              this.publishHandlers[_publishId](new Error(event.data.reason), event.data, event);\n\n              break;\n            }\n\n          case Conduit.routerEvents.CREATED:\n          case Conduit.routerEvents.CONNECT_SUCCESS:\n          case Conduit.routerEvents.DISCONNECT_SUCCESS:\n            {\n              break;\n            }\n\n          default:\n            {\n              this.logger.error(\"No match for event: \".concat(eventType));\n            }\n        }\n      } catch (error) {\n        this.logger.debug('onMessageError');\n\n        this._onMessageError(error);\n      }\n    }\n    /**\n     * To be called when a segment / moof is \"shown\".  In realistic terms, this is\n     * meant to be called when the moof is appended to the MSE SourceBuffer.  This\n     * method is meant to update stats.\n     *\n     * @param {Array} byteArray\n     *   The raw segment / moof\n     */\n\n  }, {\n    key: \"segmentUsed\",\n    value: function segmentUsed(byteArray) {\n      // @todo - it appears that this is never used!\n      if (this.LogSourceBuffer === true && this.LogSourceBufferTopic !== null) {\n        this.directSend({\n          method: Conduit.iframeCommands.SEND,\n          topic: this.LogSourceBufferTopic,\n          byteArray: byteArray\n        });\n      }\n\n      this.statsMsg.byteCount += byteArray.length;\n    }\n    /**\n     * Every time a segment / moof is received from the server, it should be\n     * passed to this method\n     *\n     * @param {*} message\n     */\n\n  }, {\n    key: \"_onClspData\",\n    value: function _onClspData(message) {\n      var topic = message.destinationName;\n      this.logger.debug(\"Handling message for topic \\\"\".concat(topic, \"\\\"\"));\n\n      if (!topic) {\n        throw new Error('Message contained no topic to handle!');\n      }\n\n      var handler = this.handlers[topic];\n\n      if (!handler) {\n        throw new Error(\"No handler for \".concat(topic));\n      }\n\n      handler(message);\n    }\n    /**\n     * @todo - provide method description\n     *\n     * @todo - return a Promise\n     *\n     * @param {String} topic\n     *   The topic to subscribe to\n     * @param {Conduit-subscribeCb} cb\n     *   The callback for the subscribe operation\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(topic, handler) {\n      this.logger.debug(\"Subscribing to topic \\\"\".concat(topic, \"\\\"\"));\n      this.handlers[topic] = handler;\n\n      this._command({\n        method: Conduit.iframeCommands.SUBSCRIBE,\n        topic: topic\n      });\n    }\n    /**\n     * @todo - provide method description\n     *\n     * @todo - return a Promise\n     *\n     * @param {String} topic\n     *   The topic to unsubscribe from\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(topic) {\n      this.logger.debug(\"Unsubscribing from topic \\\"\".concat(topic, \"\\\"\")); // unsubscribes can occur asynchronously, so ensure the handlers object\n      // still exists\n\n      if (this.handlers) {\n        delete this.handlers[topic];\n      }\n\n      this._command({\n        method: Conduit.iframeCommands.UNSUBSCRIBE,\n        topic: topic\n      });\n    }\n    /**\n     * @todo - provide method description\n     *\n     * @param {String} topic\n     *   The topic to publish to\n     * @param {Object} data\n     *   The data to publish\n     *\n     * @returns {Promise}\n     *   Resolves when publish operation is successful\n     *   Rejects when publish operation fails\n     */\n\n  }, {\n    key: \"publish\",\n    value: function publish(topic, data) {\n      var _this5 = this;\n\n      var publishId = uuid_v4__WEBPACK_IMPORTED_MODULE_0___default()();\n      this.logger.debug(\"Publishing to topic \\\"\".concat(topic, \"\\\"\"));\n      return new Promise(function (resolve, reject) {\n        _this5.publishHandlers[publishId] = function (error) {\n          delete _this5.publishHandlers[publishId];\n\n          if (error) {\n            return reject(error);\n          }\n\n          resolve();\n        };\n\n        _this5._command({\n          method: Conduit.iframeCommands.PUBLISH,\n          publishId: publishId,\n          topic: topic,\n          data: data\n        });\n      });\n    }\n    /**\n     * @todo - provide method description\n     *\n     * @todo - return a Promise\n     *\n     * @param {String} topic\n     *   The topic to send to\n     * @param {Array} byteArray\n     *   The raw data to send\n     */\n\n  }, {\n    key: \"directSend\",\n    value: function directSend(topic, byteArray) {\n      this.logger.debug('directSend...');\n\n      this._command({\n        method: Conduit.iframeCommands.SEND,\n        topic: topic,\n        byteArray: byteArray\n      });\n    }\n    /**\n     * Request\n     *\n     * When asking the server for something, we do not get a response right away.\n     * Instead, we must perform the following steps:\n     *\n     * 1. generate a unique string, which will be sent to the server as the \"response topic\"\n     * 1. subscribe\n     *\n     * @param {String} topic\n     *   The topic to perform a transaction on\n     * @param {Object} messageData\n     *   The data to be published\n     *\n     * @returns {Promise}\n     *   Resolves when the transaction successfully finishes\n     *   Rejects if there is any error or timeout during the transaction\n     */\n\n  }, {\n    key: \"transaction\",\n    value: function transaction(topic) {\n      var _this6 = this;\n\n      var messageData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var timeoutDuration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.TRANSACTION_TIMEOUT;\n      var subscribeTopic = arguments.length > 3 ? arguments[3] : undefined;\n      this.logger.debug(\"transaction for \".concat(topic, \"...\"));\n      var transactionId = uuid_v4__WEBPACK_IMPORTED_MODULE_0___default()();\n\n      if (!subscribeTopic) {\n        subscribeTopic = messageData.resp_topic = \"\".concat(this.clientId, \"/response/\").concat(transactionId);\n      }\n\n      this.pendingTransactions[transactionId] = {\n        id: transactionId,\n        hasTimedOut: false,\n        timeout: null\n      };\n      return new Promise(function (resolve, reject) {\n        var finished = function finished(error, response) {\n          _this6.unsubscribe(subscribeTopic);\n\n          if (_this6.pendingTransactions[transactionId].timeout) {\n            clearTimeout(_this6.pendingTransactions[transactionId].timeout);\n            _this6.pendingTransactions[transactionId].timeout = null;\n          }\n\n          if (error) {\n            return reject(error);\n          }\n\n          var payloadString = response.payloadString; // @todo - why is this necessary?\n\n          if (response.payloadString) {\n            try {\n              response.payloadString = JSON.parse(payloadString) || {};\n            } catch (error) {\n              _this6.logger.warn('Failed to parse payloadString');\n\n              _this6.logger.warn(error);\n\n              response.payloadString = payloadString;\n            }\n          }\n\n          resolve(response);\n        };\n\n        _this6.pendingTransactions[transactionId].timeout = setTimeout(function () {\n          if (_this6.pendingTransactions[transactionId].hasTimedOut) {\n            return;\n          }\n\n          _this6.pendingTransactions[transactionId].hasTimedOut = true;\n          finished(new Error(\"Transaction for \".concat(topic, \" timed out after \").concat(timeoutDuration, \" seconds\")));\n        }, timeoutDuration * 1000);\n\n        _this6.subscribe(subscribeTopic, function (response) {\n          finished(null, response);\n        });\n\n        _this6.publish(topic, messageData)[\"catch\"](function (error) {\n          finished(error);\n        });\n      });\n    }\n    /**\n     * @private\n     *\n     * Generate an iframe with an embedded CLSP router.  The router will be what\n     * this Conduit instance communicates with in subsequent commands.\n     *\n     * @returns Element\n     */\n\n  }, {\n    key: \"_generateIframe\",\n    value: function _generateIframe() {\n      this.logger.debug('Generating Iframe...');\n      var iframe = document.createElement('iframe');\n      iframe.setAttribute('id', this.clientId); // This iframe should be invisible\n\n      iframe.width = 0;\n      iframe.height = 0;\n      iframe.setAttribute('style', 'display:none;');\n      iframe.srcdoc = \"\\n      <html>\\n        <head>\\n          <script type=\\\"text/javascript\\\">\\n            // Include the logger\\n            window.Logger = \".concat(_utils_logger__WEBPACK_IMPORTED_MODULE_3__[\"default\"].toString(), \";\\n\\n            // Configure the CLSP properties\\n            window.clspRouterConfig = {\\n              logId: '\").concat(this.logId, \"',\\n              clientId: '\").concat(this.clientId, \"',\\n              host: '\").concat(this.streamConfiguration.host, \"',\\n              port: \").concat(this.streamConfiguration.port, \",\\n              useSSL: \").concat(this.streamConfiguration.useSSL, \",\\n              CONNECTION_TIMEOUT: \").concat(this.ROUTER_CONNECTION_TIMEOUT, \",\\n              KEEP_ALIVE_INTERVAL: \").concat(this.ROUTER_KEEP_ALIVE_INTERVAL, \",\\n              PUBLISH_TIMEOUT: \").concat(this.ROUTER_PUBLISH_TIMEOUT, \",\\n            };\\n\\n            window.conduitCommands = \").concat(JSON.stringify(Conduit.iframeCommands), \";\\n\\n            window.iframeEventHandlers = \").concat(_Router__WEBPACK_IMPORTED_MODULE_2__[\"default\"].toString(), \"();\\n          </script>\\n        </head>\\n        <body\\n          onload=\\\"window.iframeEventHandlers.onload();\\\"\\n          onunload=\\\"window.iframeEventHandlers.onunload();\\\"\\n        >\\n          <div id=\\\"message\\\"></div>\\n        </body>\\n      </html>\\n    \");\n      return iframe;\n    }\n    /**\n     * @private\n     * @async\n     *\n     * Do not call this method directly!  Only use the `reconnect` method.\n     */\n\n  }, {\n    key: \"_reconnect\",\n    value: function () {\n      var _reconnect2 = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee8(reconnectionStartedAt, stopTryingToReconnectAt, onSuccess, onFailure) {\n        var _this7 = this;\n\n        var reconnectionDelay;\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                this.logger.info('Reconnecting...');\n                this.reconnectionAttempts++;\n\n                if (!(this.MAX_RECONNECTION_ATTEMPTS && this.reconnectionAttempts > this.MAX_RECONNECTION_ATTEMPTS)) {\n                  _context8.next = 4;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", onFailure(new Error(\"Failed to reconnect after \".concat(this.reconnectionAttempts, \" attempts.\"))));\n\n              case 4:\n                if (!(this.MAX_RECONNECTION_TIME && Date.now() > stopTryingToReconnectAt)) {\n                  _context8.next = 6;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", onFailure(new Error(\"Failed to reconnect after \".concat(this.MAX_RECONNECTION_TIME, \" seconds.\"))));\n\n              case 6:\n                _context8.prev = 6;\n                this.disconnect();\n                _context8.next = 10;\n                return this.connect(false);\n\n              case 10:\n                // After successfully connecting, reset the reconnection attempts and\n                this.reconnectionAttempts = 0;\n                this.reconnectionInProgress = null;\n                onSuccess();\n                _context8.next = 20;\n                break;\n\n              case 15:\n                _context8.prev = 15;\n                _context8.t0 = _context8[\"catch\"](6);\n                this.logger.error(_context8.t0);\n                reconnectionDelay = Date.now() - reconnectionStartedAt > this.IMMEDIATE_RECONNECTION_DURATION * 1000 ? this.RECONNECTION_DELAY : this.IMMEDIATE_RECONNECTION_DELAY;\n                setTimeout(function () {\n                  // @todo - do we need to worry about recursion overflowing the stack?\n                  _this7._reconnect(reconnectionStartedAt, stopTryingToReconnectAt, onSuccess, onFailure);\n                }, reconnectionDelay * 1000);\n\n              case 20:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this, [[6, 15]]);\n      }));\n\n      function _reconnect(_x3, _x4, _x5, _x6) {\n        return _reconnect2.apply(this, arguments);\n      }\n\n      return _reconnect;\n    }()\n    /**\n     * Attempt to reconnect a certain number of times\n     *\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"reconnect\",\n    value: function reconnect() {\n      var _this8 = this;\n\n      this.logger.info('Reconnecting...'); // If we're already trying to reconnect, don't try again\n\n      if (this.reconnectionInProgress) {\n        return this.reconnectionInProgress;\n      }\n\n      var reconnectionStartedAt = Date.now();\n      var stopTryingToReconnectAt = this.MAX_RECONNECTION_TIME ? reconnectionStartedAt + this.MAX_RECONNECTION_TIME * 1000 : 0;\n      this.reconnectionInProgress = new Promise(function (resolve, reject) {\n        _this8.logger.info('First reconnection attempt...');\n\n        _this8._reconnect(reconnectionStartedAt, stopTryingToReconnectAt, function () {\n          _this8.logger.info('reconnected!'); // After successfully connecting, clear the reconnectionInProgress\n\n\n          _this8.reconnectionInProgress = null;\n\n          _this8._onReconnect();\n\n          resolve();\n        }, function (error) {\n          _this8._onReconnect(error);\n\n          reject(error);\n        });\n      });\n      return this.reconnectionInProgress;\n    }\n    /**\n     * @private\n     *\n     * Pass a CLSP command to the iframe.\n     *\n     * @param {Object} message\n     */\n\n  }, {\n    key: \"_command\",\n    value: function _command(message) {\n      this.logger.debug('Sending a message to the iframe...');\n\n      try {\n        // @todo - we should not be dispatching to '*' - we should provide the SFS\n        // host here instead\n        // @see - https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage\n        this.iframe.contentWindow.postMessage(message, '*');\n      } catch (error) {\n        // @todo - we should probably throw here...\n        // eslint-disable-next-line no-console\n        console.error(error);\n      }\n    }\n    /**\n     * @private\n     *\n     * @async\n     *\n     * Send stats to the server\n     */\n\n  }, {\n    key: \"publishStats\",\n    value: function () {\n      var _publishStats = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee9() {\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                this.statsMsg.inkbps = this.statsMsg.byteCount * 8 / 30000.0;\n                this.statsMsg.byteCount = 0;\n                _context9.prev = 2;\n                _context9.next = 5;\n                return this.publish('iov/stats', this.statsMsg);\n\n              case 5:\n                this.logger.debug('iov status', this.statsMsg);\n                _context9.next = 14;\n                break;\n\n              case 8:\n                _context9.prev = 8;\n                _context9.t0 = _context9[\"catch\"](2);\n                this.logger.error('Error while publishing stats!');\n                this.logger.error(_context9.t0); // if the stats cannot be published, treat that as an unexpected\n                // disconnection\n\n                this.clearStatsInterval();\n                this.reconnect();\n\n              case 14:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this, [[2, 8]]);\n      }));\n\n      function publishStats() {\n        return _publishStats.apply(this, arguments);\n      }\n\n      return publishStats;\n    }()\n  }]);\n\n  return Conduit;\n}();\n\n_defineProperty(Conduit, \"iframeCommands\", {\n  SUBSCRIBE: 'subscribe',\n  UNSUBSCRIBE: 'unsubscribe',\n  PUBLISH: 'publish',\n  CONNECT: 'connect',\n  DISCONNECT: 'disconnect',\n  SEND: 'send'\n});\n\n_defineProperty(Conduit, \"routerEvents\", Object(_Router__WEBPACK_IMPORTED_MODULE_2__[\"default\"])().Router.events);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/conduit/Conduit.js\n");

/***/ }),

/***/ "./src/js/conduit/ConduitCollection.js":
/*!*********************************************!*\
  !*** ./src/js/conduit/ConduitCollection.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return ConduitCollection; });\n/* harmony import */ var paho_mqtt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! paho-mqtt */ \"./node_modules/paho-mqtt/paho-mqtt.js\");\n/* harmony import */ var paho_mqtt__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(paho_mqtt__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _Conduit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Conduit */ \"./src/js/conduit/Conduit.js\");\n/* harmony import */ var _utils___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/ */ \"./src/js/utils/index.js\");\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/logger */ \"./src/js/utils/logger.js\");\n\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n // Even though the export of paho-mqtt is { Client, Message }, there is an\n// internal reference that the library makes to itself, and it expects\n// itself to exist at Paho.MQTT.  FIRED!\n\nwindow.Paho = {\n  MQTT: paho_mqtt__WEBPACK_IMPORTED_MODULE_0___default.a\n};\nvar collection;\n\nvar ConduitCollection =\n/*#__PURE__*/\nfunction () {\n  _createClass(ConduitCollection, null, [{\n    key: \"asSingleton\",\n    value: function asSingleton() {\n      if (!collection) {\n        collection = ConduitCollection.factory();\n      }\n\n      return collection;\n    }\n  }, {\n    key: \"factory\",\n    value: function factory() {\n      return new ConduitCollection();\n    }\n    /**\n     * @private\n     */\n\n  }]);\n\n  function ConduitCollection() {\n    var _this = this;\n\n    _classCallCheck(this, ConduitCollection);\n\n    _defineProperty(this, \"_onWindowMessage\", function (event) {\n      var clientId = event.data.clientId;\n      var eventType = event.data.event;\n\n      if (!clientId) {\n        // A window message was received that is not related to CLSP\n        return;\n      }\n\n      _this.logger.debug('window on message');\n\n      if (!_this.has(clientId)) {\n        // When the CLSP connection is interupted due to a listener being removed,\n        // a fail event is always sent.  It is not necessary to log this as an error\n        // in the console, because it is not an error.\n        // @todo - the fail event no longer exists - what is the name of the new\n        // corresponding event?\n        if (eventType === 'fail') {\n          return;\n        } // Do not throw an error on disconnection\n\n\n        if (eventType === _Conduit__WEBPACK_IMPORTED_MODULE_1__[\"default\"].routerEvents.DISCONNECT_SUCCESS) {\n          return;\n        } // Don't show an error for iovs that have been deleted\n\n\n        if (_this.deletedConduitClientIds.includes(clientId)) {\n          _this.logger.warn(\"Received a message for deleted conduit \".concat(clientId));\n\n          return;\n        }\n\n        throw new Error(\"Unable to route message of type \".concat(eventType, \" for Conduit with clientId \\\"\").concat(clientId, \"\\\".  A Conduit with that clientId does not exist.\"));\n      } // If the document is hidden, don't pass on the moofs.  All other forms of\n      // communication are fine, but the moofs occur at a rate that will exhaust\n      // the browser tab resources, ultimately resulting in a crash given enough\n      // time.\n\n\n      if (document[_utils___WEBPACK_IMPORTED_MODULE_2__[\"default\"].windowStateNames.hiddenStateName] && eventType === _Conduit__WEBPACK_IMPORTED_MODULE_1__[\"default\"].routerEvents.DATA_RECEIVED) {\n        return;\n      }\n\n      var conduit = _this.get(clientId);\n\n      conduit.onMessage(event);\n    });\n\n    this.logger = Object(_utils_logger__WEBPACK_IMPORTED_MODULE_3__[\"default\"])().factory('ConduitCollection');\n    this.logger.debug('Constructing...');\n    this.totalConduitCount = 0;\n    this.conduits = {};\n    this.deletedConduitClientIds = [];\n    window.addEventListener('message', this._onWindowMessage);\n  }\n  /**\n   * @private\n   *\n   * The listener for the \"message\" event on the window.  Its job is to\n   * identify messages that are intended for a specific Conduit / stream and\n   * route them to the correct one.  The most common example of this is when a\n   * Router receives a moof/segment from a server, and posts a message to the\n   * window.  This listener will route that moof/segment to the proper Conduit.\n   *\n   * @param {Object} event\n   *   The window message event\n   *\n   * @returns {void}\n   */\n\n\n  _createClass(ConduitCollection, [{\n    key: \"create\",\n\n    /**\n     * Create a Conduit for a specific stream, and add it to this collection.\n     *\n     * @returns {Conduit}\n     */\n    value: function () {\n      var _create = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(logId, clientId, streamConfiguration, containerElement, onReconnect, onMessageError) {\n        var conduit;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.logger.debug(\"creating a conduit with logId \".concat(logId, \" and clientId \").concat(clientId));\n                conduit = _Conduit__WEBPACK_IMPORTED_MODULE_1__[\"default\"].factory(logId, clientId, streamConfiguration, containerElement, onReconnect, onMessageError);\n\n                this._add(conduit);\n\n                this.totalConduitCount++;\n                return _context.abrupt(\"return\", conduit);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function create(_x, _x2, _x3, _x4, _x5, _x6) {\n        return _create.apply(this, arguments);\n      }\n\n      return create;\n    }()\n    /**\n     * Add a Conduit instance to this collection.\n     *\n     * @private\n     *\n     * @param {Conduit} conduit\n     *   The conduit instance to add\n     *\n     * @returns {this}\n     */\n\n  }, {\n    key: \"_add\",\n    value: function _add(conduit) {\n      var clientId = conduit.clientId;\n      this.conduits[clientId] = conduit;\n      return this;\n    }\n    /**\n     * Determine whether or not a Conduit with the passed clientId exists in this\n     * collection.\n     *\n     * @param {String} clientId\n     *   The clientId of the conduit to find\n     *\n     * @returns {Boolean}\n     *   True if the conduit with the given clientId exists\n     *   False if the conduit with the given clientId does not exist\n     */\n\n  }, {\n    key: \"has\",\n    value: function has(clientId) {\n      return Object.prototype.hasOwnProperty.call(this.conduits, clientId);\n    }\n    /**\n     * Get a Conduit with the passed clientId from this collection.\n     *\n     * @param {String} clientId\n     *   The clientId of the conduit instance to get\n     *\n     * @returns {Conduit|undefined}\n     *   If a Conduit with this clientId doest not exist, undefined is returned.\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(clientId) {\n      return this.conduits[clientId];\n    }\n    /**\n     * Remove a conduit instance from this collection and destroy it.\n     *\n     * @param {String} clientId\n     *   The clientId of the conduit to remove and destroy\n     *\n     * @returns {this}\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(clientId) {\n      var conduit = this.get(clientId);\n\n      if (!conduit) {\n        return;\n      }\n\n      delete this.conduits[clientId];\n      conduit.destroy();\n      this.deletedConduitClientIds.push(clientId);\n      return this;\n    }\n    /**\n     * Destroy this collection and destroy all conduit instances in it.\n     *\n     * @returns {void}\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.destroyed) {\n        return;\n      }\n\n      this.destroyed = true;\n      window.removeEventListener('message', this._onWindowMessage);\n\n      for (var clientId in this.conduits) {\n        this.remove(clientId);\n      }\n\n      this.conduits = null;\n      this.deletedConduitClientIds = null;\n    }\n  }]);\n\n  return ConduitCollection;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/conduit/ConduitCollection.js\n");

/***/ }),

/***/ "./src/js/conduit/Router.js":
/*!**********************************!*\
  !*** ./src/js/conduit/Router.js ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n/**\n * The Router is the lowest level controller of the actual MQTT connection.\n *\n * Note that this is the code that gets duplicated in each iframe.\n * Keep the contents of the exported function light and ES5 only.\n *\n * @todo - have a custom loader for webpack that can convert this to ES5 and\n * minify it in a self-contained way at the time it is required so that we can\n * use ES6 and multiple files.\n *\n * @todo - should all thrown errors send a message to the parent Conduit?\n */\n\n/**\n * This Router will manage an MQTT connection for a given clientId, and pass\n * the relevant data and messages back up to the Conduit.\n *\n * @see - https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe\n * @see - https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body\n * @see - https://www.eclipse.org/paho/files/jsdoc/index.html\n *\n * @export - the function that provides the Router and constants\n */\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (function () {\n  // The error code from Paho MQTT that represents the socket not being\n  // connected\n  var PAHO_MQTT_ERROR_CODE_NOT_CONNECTED = 'AMQJS0011E';\n  var PAHO_MQTT_ERROR_CODE_ALREADY_CONNECTED = 'AMQJS0011E';\n  var Paho = window.parent.Paho;\n  /**\n   * A Router that can be used to set up an MQTT connection to the specified\n   * host and port, using a Conduit-provided clientId that will be a part of\n   * every message that is passed from this iframe window to the parent window,\n   * so that the conduit can identify what client the message is for.\n   *\n   * @param {String} logId\n   *   a string that identifies this router in log messages\n   * @param {String} clientId\n   *   the guid to be used to construct the topic\n   * @param {String} host\n   *   the host (url or ip) of the SFS that is providing the stream\n   * @param {Number} port\n   *   the port the stream is served over\n   * @param {Boolean} useSSL\n   *   true to request the stream over clsps, false to request the stream over clsp\n   * @param {Object} options\n   */\n\n  function Router(logId, clientId, host, port, useSSL, options) {\n    try {\n      this.logId = logId;\n      this.logger = window.Logger().factory(\"Router \".concat(this.logId));\n      this.clientId = clientId;\n      this.host = host;\n      this.port = port;\n      this.useSSL = useSSL;\n      this.logger.debug('Constructing...');\n      this.Reconnect = null; // @todo - there is a \"private\" method named \"_doConnect\" in the paho mqtt\n      // library that is responsible for instantiating the WebSocket.  We have\n      // seen at least 1 instance where the instantiation of the WebSocket fails\n      // which was due to the error \"ERR_NAME_NOT_RESOLVED\", but it does not\n      // seem like this error is \"passed\" up to the caller (e.g. Router.connect)\n      // and therefore we cannot respond to it.  If we could, perhaps we could\n      // attempt to reconnect, or at least send a message to Router's parent.\n      // Given this, should we override Paho.MQTT.Client._doConnect and wrap\n      // the original prototype method call in a try/catch that we can control\n      // and respond to?  I'm not even sure that that would solve the problem.\n      // Presumably, the instantiation of the WebSocket would throw, which would\n      // be caught by our Router.connect try/catch block...\n\n      this.mqttClient = new Paho.MQTT.Client(this.host, this.port, '/mqtt', this.clientId);\n      this.mqttClient.onConnectionLost = this._onConnectionLost.bind(this);\n      this.mqttClient.onMessageArrived = this._onMessageArrived.bind(this);\n      this.mqttClient.onMessageDelivered = this._onMessageDelivered.bind(this);\n      this.boundWindowMessageEventHandler = this._windowMessageEventHandler.bind(this);\n      window.addEventListener('message', this.boundWindowMessageEventHandler, false);\n      this.CONNECTION_TIMEOUT = options.CONNECTION_TIMEOUT;\n      this.KEEP_ALIVE_INTERVAL = options.KEEP_ALIVE_INTERVAL;\n      this.PUBLISH_TIMEOUT = options.PUBLISH_TIMEOUT;\n    } catch (error) {\n      this.logger.error('IFRAME error for clientId: ' + clientId);\n      this.logger.error(error);\n    }\n  } // All events that are emitted by the Router are prefixed with `clsp_router`\n\n\n  Router.events = {\n    // Triggered when the Router is successfully instantiated.\n    // Can only be triggered at time of router instantiation.\n    CREATED: 'clsp_router_created',\n    // Triggered when there is an error during Router instantiation.\n    // Can only be triggered at time of router instantiation.\n    CREATE_FAILURE: 'clsp_router_create_failure',\n    // Triggered when a segment / moof is transmitted.\n    // Can be triggered for as long as the connection is open.\n    DATA_RECEIVED: 'clsp_router_mqtt_data',\n    // Triggered when a message is successfully published to the server\n    // Can only be triggered on publish\n    PUBLISH_SUCCESS: 'clsp_router_publish_success',\n    // Triggered when a message fails to be published to the server\n    // Can only be triggered on publish\n    PUBLISH_FAIL: 'clsp_router_publish_failure',\n    // Triggered when the connection to the mqtt server is established.\n    // Can only be triggered at time of connection.\n    CONNECT_SUCCESS: 'clsp_router_connect_success',\n    // Triggered when trying to connect to the mqtt server fails.\n    // Can only be triggered at time of connection.\n    CONNECT_FAILURE: 'clsp_router_connect_failure',\n    // Triggered when the connection to the mqtt server has been established, but is later lost.\n    // Can be triggered for as long as the connection is open.\n    CONNECTION_LOST: 'clsp_router_connection_lost',\n    // Triggered when the connection to the mqtt server is terminated normally.\n    // Can only be triggered at time of disconnection.\n    DISCONNECT_SUCCESS: 'clsp_router_disconnect_success',\n    // Triggered when trying to subscribe to a topic fails.\n    // Can only be triggered when a subscribe is attempted.\n    SUBSCRIBE_FAILURE: 'clsp_router_subscribe_failure',\n    // When trying to unsubscribe from a topic fails.\n    // Can only be triggered when an unsubscribe is attempted.\n    UNSUBSCRIBE_FAILURE: 'clsp_router_unsubscribe_failure',\n    // Triggered when an error is encountered while processing window messages.\n    // Can be triggered any time.\n    WINDOW_MESSAGE_FAIL: 'clsp_router_window_message_fail'\n  };\n\n  Router.factory = function (logId, clientId, host, port, useSSL, options) {\n    return new Router(logId, clientId, host, port, useSSL, options);\n  };\n  /**\n   * @private\n   *\n   * Post a \"message\" with the current `clientId` to the parent window.\n   *\n   * @param {Object} message\n   *   The message to send to the parent window\n   *\n   * @returns {void}\n   */\n\n\n  Router.prototype._sendToParentWindow = function (message) {\n    this.logger.debug('Sending message to parent window...');\n\n    if (this.destroyed) {\n      return;\n    }\n\n    if (typeof message !== 'object') {\n      throw new Error('_sendToParentWindow must be passed an object');\n    }\n\n    message.clientId = this.clientId;\n\n    switch (message.event) {\n      case Router.events.CREATED:\n      case Router.events.CONNECT_SUCCESS:\n      case Router.events.DISCONNECT_SUCCESS:\n        {\n          // no validation needed\n          break;\n        }\n\n      case Router.events.DATA_RECEIVED:\n        {\n          if (!Object.prototype.hasOwnProperty.call(message, 'destinationName') || !Object.prototype.hasOwnProperty.call(message, 'payloadString') || !Object.prototype.hasOwnProperty.call(message, 'payloadBytes')) {\n            throw new Error('improperly formatted \"data\" message sent to _sendToParentWindow');\n          }\n\n          break;\n        }\n\n      case Router.events.CONNECT_FAILURE:\n      case Router.events.CONNECTION_LOST:\n      case Router.events.SUBSCRIBE_FAILURE:\n      case Router.events.UNSUBSCRIBE_FAILURE:\n      case Router.events.WINDOW_MESSAGE_FAIL:\n        {\n          if (!Object.prototype.hasOwnProperty.call(message, 'reason')) {\n            throw new Error('improperly formatted \"fail\" message sent to _sendToParentWindow');\n          }\n\n          break;\n        }\n\n      case Router.events.PUBLISH_SUCCESS:\n        {\n          if (!message.publishId) {\n            throw new Error('publish message must contain a publishId');\n          }\n\n          if (!message.topic) {\n            throw new Error('publish message must contain a topic');\n          }\n\n          break;\n        }\n\n      case Router.events.PUBLISH_FAIL:\n        {\n          if (!message.publishId) {\n            throw new Error('publish message must contain a publishId');\n          }\n\n          if (!Object.prototype.hasOwnProperty.call(message, 'reason')) {\n            throw new Error('improperly formatted \"fail\" message sent to _sendToParentWindow');\n          }\n\n          break;\n        }\n\n      default:\n        {\n          throw new Error('Unknown event ' + message.event + ' sent to _sendToParentWindow');\n        }\n    }\n\n    try {\n      window.parent.postMessage(message, '*');\n    } catch (error) {\n      // When the connection to the SFS fails, and the conduit is destroyed,\n      // there is still a message that is attempted to be sent to the parent.\n      // In this case, the only way this \"orphaned\" iframe object can\n      // communicate with the console is by throwing an error.  Therefore, it is\n      // difficult to debug and I do not know what the final message is.  Having\n      // the error written to the console here will still allow errors under\n      // \"normal\" operations to be written to the console, but will suppress the\n      // final unwanted error.\n      // eslint-disable-next-line no-console\n      console.error(error);\n    }\n  };\n  /**\n   * @private\n   *\n   * To be called when a message has arrived in this Paho.MQTT.client\n   *\n   * The idea here is that when the server sends an MQTT message, whether a\n   * moof, moov, or something else, that data needs to be sent to the appropriate\n   * player (client).  So when this router gets that chunk of data, it sends it\n   * back to the Conduit with the clientId, and the Conduit is then responsible\n   * for passing it to the appropriate player.\n   *\n   * @see - https://www.eclipse.org/paho/files/jsdoc/Paho.MQTT.Client.html\n   *\n   * @param {Paho.MQTT.Message} mqttMessage\n   *   The incoming message\n   *\n   * @returns {void}\n   */\n\n\n  Router.prototype._onMessageArrived = function (mqttMessage) {\n    this.logger.debug('Received MQTT message...');\n\n    try {\n      var payloadString = '';\n\n      try {\n        payloadString = mqttMessage.payloadString;\n      } catch (error) {// I have no idea what is going on here, but every single time we do the\n        // assignment above, an error is thrown.  When I console.log(payloadString)\n        // it appears to be an empty string.  However, if that assignment is not\n        // done, no video gets displayed!!\n        // There should be some way to only use the payloadBytes here...\n      }\n\n      this._sendToParentWindow({\n        event: Router.events.DATA_RECEIVED,\n        destinationName: mqttMessage.destinationName,\n        payloadString: payloadString,\n        // @todo - why is this necessary when it doesn't exist?\n        payloadBytes: mqttMessage.payloadBytes || null\n      });\n    } catch (error) {\n      this.logger.error(error);\n    }\n  };\n  /**\n   * @private\n   *\n   * To be called when a message has been published by this mqtt client.\n   *\n   * @see - https://www.eclipse.org/paho/files/jsdoc/Paho.MQTT.Client.html\n   *\n   * @param {Paho.MQTT.Message} mqttMessage\n   *   The message that was delivered\n   *\n   * @returns {void}\n   */\n\n\n  Router.prototype._onMessageDelivered = function (mqttMessage) {\n    this.logger.debug('Delivered MQTT message...');\n\n    if (mqttMessage._onDelivered) {\n      mqttMessage._onDelivered();\n    }\n  };\n  /**\n   * @private\n   *\n   * Called when an mqttClient connection has been lost\n   *\n   * @see - https://www.eclipse.org/paho/files/jsdoc/Paho.MQTT.Client.html\n   *\n   * @param {Object} response\n   *   The response object\n   *\n   * @returns {void}\n   */\n\n\n  Router.prototype._onConnectionLost = function (response) {\n    this.logger.debug('MQTT connection lost');\n    var errorCode = parseInt(response.errorCode);\n\n    if (errorCode === 0) {\n      // The connection was \"properly\" terminated\n      this._sendToParentWindow({\n        event: Router.events.DISCONNECT_SUCCESS\n      });\n\n      return;\n    }\n\n    this.logger.warn('MQTT connection lost improperly!');\n\n    this._sendToParentWindow({\n      event: Router.events.CONNECTION_LOST,\n      reason: 'connection lost error code \"' + errorCode + '\" with message: ' + response.errorMessage\n    });\n  };\n  /**\n   * @private\n   *\n   * Any time a \"message\" event occurs on the window, respond to it by\n   * inspecting the message's \"method\" property and taking the appropriate\n   * action.\n   *\n   * @param {Object} event\n   *   The window message event\n   *\n   * @returns {void}\n   */\n\n\n  Router.prototype._windowMessageEventHandler = function (event) {\n    var message = event.data;\n    var method = message.method;\n    this.logger.debug('Handling incoming window message for \"' + method + '\"...');\n\n    try {\n      switch (method) {\n        case window.conduitCommands.SUBSCRIBE:\n          {\n            this._subscribe(message.topic);\n\n            break;\n          }\n\n        case window.conduitCommands.UNSUBSCRIBE:\n          {\n            this._unsubscribe(message.topic);\n\n            break;\n          }\n\n        case window.conduitCommands.PUBLISH:\n          {\n            var payload = null;\n\n            try {\n              payload = JSON.stringify(message.data);\n            } catch (error) {\n              this.logger.error('ERROR: Unable to handle the \"publish\" window message event!');\n              this.logger.error('json stringify error: ' + message.data); // @todo - should we throw here?\n              // throw error;\n\n              return;\n            }\n\n            this._publish(message.publishId, message.topic, payload);\n\n            break;\n          }\n\n        case window.conduitCommands.CONNECT:\n          {\n            this.connect();\n            break;\n          }\n\n        case window.conduitCommands.DISCONNECT:\n          {\n            this.disconnect();\n            break;\n          }\n\n        case window.conduitCommands.SEND:\n          {\n            this._publish(message.publishId, message.topic, message.byteArray);\n\n            break;\n          }\n\n        default:\n          {\n            this.logger.error('unknown message method: ' + method);\n          }\n      }\n    } catch (error) {\n      this.logger.error(error);\n\n      this._sendToParentWindow({\n        event: Router.events.WINDOW_MESSAGE_FAIL,\n        reason: 'window message event failure'\n      });\n    }\n  };\n  /**\n   * @private\n   *\n   * Success handler for the mqtt client \"connect\".  Registers the window\n   * message event handler, and notifies the parent window that this client is\n   * \"ready\".\n   *\n   * @todo - track the \"connected\" status to prevent multiple window message\n   * event handlers from being attached\n   *\n   * @see - https://www.eclipse.org/paho/files/jsdoc/Paho.MQTT.Client.html\n   *\n   * @param {Object} response\n   *   The response object\n   *\n   * @returns {void}\n   */\n\n\n  Router.prototype._connect_onSuccess = function (response) {\n    this.logger.info('Successfully established MQTT connection');\n\n    this._sendToParentWindow({\n      event: Router.events.CONNECT_SUCCESS\n    });\n  };\n  /**\n   * @private\n   *\n   * Failure handler for mqtt client \"connect\".  Sends a \"fail\" message to the\n   * parent window\n   *\n   * @see - https://www.eclipse.org/paho/files/jsdoc/Paho.MQTT.Client.html\n   *\n   * @param {Object} response\n   *   The response object\n   *\n   * @returns {void}\n   */\n\n\n  Router.prototype._connect_onFailure = function (response) {\n    this.logger.info('MQTT Connection Failure!');\n\n    this._sendToParentWindow({\n      event: Router.events.CONNECT_FAILURE,\n      reason: 'Connection Failed - Error code ' + parseInt(response.errorCode) + ': ' + response.errorMessage\n    });\n  };\n  /**\n   * @private\n   *\n   * Success handler for mqtt client \"subscribe\".\n   *\n   * @see - https://www.eclipse.org/paho/files/jsdoc/Paho.MQTT.Client.html\n   *\n   * @param {String} topic\n   *   The topic that was successfully subscribed to\n   * @param {Object} response\n   *   The response object\n   *\n   * @returns {void}\n   */\n\n\n  Router.prototype._subscribe_onSuccess = function (topic, response) {\n    this.logger.debug('Successfully subscribed to topic \"' + topic + '\"'); // @todo\n  };\n  /**\n   * @private\n   *\n   * Failure handler for mqtt \"subscribe\".  Sends a \"fail\" message to the parent\n   * window\n   *\n   * @see - https://www.eclipse.org/paho/files/jsdoc/Paho.MQTT.Client.html\n   *\n   * @param {String} topic\n   *   The topic that was attempted to be subscribed to\n   * @param {Object} response\n   *   The response object\n   *\n   * @returns {void}\n   */\n\n\n  Router.prototype._subscribe_onFailure = function (topic, response) {\n    this.logger.error('Failed to subscribe to topic \"' + topic + '\"');\n\n    this._sendToParentWindow({\n      event: Router.events.SUBSCRIBE_FAILURE,\n      reason: 'Subscribe Failed - Error code ' + parseInt(response.errorCode) + ': ' + response.errorMessage\n    });\n  };\n  /**\n   * @private\n   *\n   * Start receiving messages for the given topic.\n   *\n   * @see - https://www.eclipse.org/paho/files/jsdoc/Paho.MQTT.Client.html\n   *\n   * @param {String} topic\n   *   The topic to subscribe to\n   *\n   * @returns {void}\n   */\n\n\n  Router.prototype._subscribe = function (topic) {\n    this.logger.debug('Subscribing to topic \"' + topic + '\"');\n\n    if (!topic) {\n      throw new Error('topic is a required argument when subscribing');\n    }\n\n    this.mqttClient.subscribe(topic, {\n      onSuccess: this._subscribe_onSuccess.bind(this, topic),\n      onFailure: this._subscribe_onFailure.bind(this, topic)\n    });\n  };\n  /**\n   * @private\n   *\n   * Success handler for \"unsubscribe\".\n   *\n   * @see - https://www.eclipse.org/paho/files/jsdoc/Paho.MQTT.Client.html\n   *\n   * @param {String} topic\n   *   The topic that was successfully unsubscribed from\n   * @param {Object} response\n   *   The response object\n   *\n   * @returns {void}\n   */\n\n\n  Router.prototype._unsubscribe_onSuccess = function (topic, response) {\n    this.logger.debug('Successfully unsubscribed from topic \"' + topic + '\"'); // @todo\n  };\n  /**\n   * @private\n   *\n   * Failure handler for \"unsubscribe\".  Sends a \"fail\" message to the parent\n   * window\n   *\n   * @see - https://www.eclipse.org/paho/files/jsdoc/Paho.MQTT.Client.html\n   *\n   * @param {String} topic\n   *   The topic that was successfully subscribed to\n   * @param {Object} response\n   *   The response object\n   *\n   * @returns {void}\n   */\n\n\n  Router.prototype._unsubscribe_onFailure = function (topic, response) {\n    this.logger.debug('Failed to unsubscribe from topic \"' + topic + '\"');\n\n    this._sendToParentWindow({\n      event: Router.events.UNSUBSCRIBE_FAILURE,\n      reason: 'Unsubscribe Failed - Error code ' + parseInt(response.errorCode) + ': ' + response.errorMessage\n    });\n  };\n  /**\n   * @private\n   *\n   * Stop receiving messages for the given topic\n   *\n   * @see - https://www.eclipse.org/paho/files/jsdoc/Paho.MQTT.Client.html\n   *\n   * @param {String} topic\n   *   The topic to unsubscribe from\n   *\n   * @returns {void}\n   */\n\n\n  Router.prototype._unsubscribe = function (topic) {\n    this.logger.debug('Unsubscribing from topic \"' + topic + '\"');\n\n    if (!topic) {\n      throw new Error('topic is a required argument when unsubscribing');\n    }\n\n    this.mqttClient.unsubscribe(topic, {\n      onSuccess: this._unsubscribe_onSuccess.bind(this, topic),\n      onFailure: this._unsubscribe_onFailure.bind(this, topic)\n    });\n  };\n  /**\n   * @private\n   *\n   * Publish a message to the clients that are listening for the given topic\n   *\n   * @see - https://www.eclipse.org/paho/files/jsdoc/Paho.MQTT.Message.html\n   *\n   * @param {String|ArrayBuffer} payload\n   *   The message data to be sent\n   * @param {String} topic\n   *   The topic to publish to\n   *\n   * @returns {void}\n   */\n\n\n  Router.prototype._publish = function (publishId, topic, payload) {\n    this.logger.debug('Publishing to topic \"' + topic + '\"');\n\n    if (!payload) {\n      throw new Error('payload is a required argument when publishing');\n    }\n\n    if (!topic) {\n      throw new Error('topic is a required argument when publishing');\n    }\n\n    var self = this;\n    var mqttMessage = new Paho.MQTT.Message(payload);\n    mqttMessage.destinationName = topic; // I tried setting the quality of service to 2, which has the highest level\n    // of reliability, but it seems that Paho MQTT doesn't clean up after itself\n    // or have sane (or any) timeouts or something.  When this is set to 2, over\n    // time, local storage will fill up, and all CLSP will cease to work.  Not\n    // to mention the fact that local storage refuses additional writes.\n    // mqttMessage.qos = 2; // qos: exactly once\n\n    var publishTimeout = setTimeout(function () {\n      clearTimeout(publishTimeout);\n      publishTimeout = null;\n\n      self._sendToParentWindow({\n        event: Router.events.PUBLISH_FAIL,\n        publishId: publishId,\n        reason: 'publish operation for \"' + topic + '\" timed out after ' + self.PUBLISH_TIMEOUT + ' seconds.'\n      });\n    }, this.PUBLISH_TIMEOUT * 1000); // custom property\n\n    mqttMessage._onDelivered = function (mqttMessage) {\n      if (!publishTimeout) {\n        // the publish operation timed out and has already been rejected\n        return;\n      }\n\n      clearTimeout(publishTimeout);\n      publishTimeout = null;\n\n      self._sendToParentWindow({\n        event: Router.events.PUBLISH_SUCCESS,\n        publishId: publishId,\n        topic: topic\n      });\n    }; // @todo - this can fail if the client is not connected\n\n\n    this.mqttClient.publish(mqttMessage);\n  };\n  /**\n   * Connect this Messaging client to its server\n   *\n   * @see - https://www.eclipse.org/paho/files/jsdoc/Paho.MQTT.Message.html\n   * @see - https://www.eclipse.org/paho/files/jsdoc/Paho.MQTT.Client.html\n   *\n   * @returns {void}\n   */\n\n\n  Router.prototype.connect = function () {\n    this.logger.info('Connecting...'); // last will message sent on disconnect\n\n    var willMessage = new Paho.MQTT.Message(JSON.stringify({\n      clientId: this.clientId\n    }));\n    willMessage.destinationName = 'iov/clientDisconnect';\n    var connectionOptions = {\n      timeout: this.CONNECTION_TIMEOUT,\n      keepAliveInterval: this.KEEP_ALIVE_INTERVAL,\n      onSuccess: this._connect_onSuccess.bind(this),\n      onFailure: this._connect_onFailure.bind(this),\n      willMessage: willMessage // @todo - should `reconnect` be set here?\n\n    };\n\n    if (this.useSSL === true) {\n      connectionOptions.useSSL = true;\n    }\n\n    try {\n      this.mqttClient.connect(connectionOptions);\n      this.logger.info('Connected');\n    } catch (error) {\n      if (error.message.startsWith(PAHO_MQTT_ERROR_CODE_ALREADY_CONNECTED)) {\n        // if we're already connected, there's no error to report\n        return;\n      }\n\n      this.logger.error('Failed to connect', error);\n\n      this._sendToParentWindow({\n        event: Router.events.CONNECT_FAILURE,\n        reason: 'General error when trying to connect.'\n      });\n    }\n  };\n  /**\n   * Disconnect the messaging client from the server.  To get confirmation of\n   * the disconnection, the caller must listen for the following event:\n   * `Router.events.CONNECTION_LOST`\n   *\n   * @see - https://www.eclipse.org/paho/files/jsdoc/Paho.MQTT.Client.html\n   *\n   * @returns {void}\n   */\n\n\n  Router.prototype.disconnect = function () {\n    this.logger.info('Disconnecting');\n\n    try {\n      this.mqttClient.disconnect();\n    } catch (error) {\n      if (error.message.startsWith(PAHO_MQTT_ERROR_CODE_NOT_CONNECTED)) {\n        // if we're not connected when we attempted to disconnect, there's no\n        // error to report\n        return;\n      }\n\n      this.logger.error('ERROR while disconnecting');\n      this.logger.error(error);\n      throw error;\n    }\n  };\n  /**\n   * Destroy the Router and free all resources\n   *\n   * @returns {void}\n   */\n\n\n  Router.prototype.destroy = function () {\n    this.logger.info('Destroying...');\n\n    if (this.destroyed) {\n      return;\n    }\n\n    this.destroyed = true;\n    window.removeEventListener('message', this.boundWindowMessageEventHandler);\n    this.boundWindowMessageEventHandler = null;\n    this.disconnect(); // @todo - is there a way to \"destroy\" the client?  I didn't see anything\n    // in the documentation\n\n    this.mqttClient = null;\n  }; // This is a series of \"controllers\" to keep the conduit's iframe as dumb as\n  // possible.  Call each of these in the corresponding attribute on the\n  // \"body\" tag.\n\n\n  return {\n    onload: function onload() {\n      try {\n        window.router = Router.factory(window.clspRouterConfig.logId, window.clspRouterConfig.clientId, window.clspRouterConfig.host, window.clspRouterConfig.port, window.clspRouterConfig.useSSL, {\n          CONNECTION_TIMEOUT: window.clspRouterConfig.CONNECTION_TIMEOUT,\n          KEEP_ALIVE_INTERVAL: window.clspRouterConfig.KEEP_ALIVE_INTERVAL,\n          PUBLISH_TIMEOUT: window.clspRouterConfig.PUBLISH_TIMEOUT\n        });\n\n        window.router._sendToParentWindow({\n          event: Router.events.CREATED\n        });\n\n        window.router.logger.info('onload - Router created');\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.error(error);\n        window.parent.postMessage({\n          event: Router.events.CREATE_FAILURE,\n          reason: error\n        }, '*');\n      }\n    },\n    onunload: function onunload() {\n      if (!window.router) {\n        return;\n      }\n\n      try {\n        window.router.logger.info('onunload - Router being destroyed in onunload...');\n        window.router.destroy();\n        window.router.logger.info('onunload - Router destroyed in onunload');\n      } catch (error) {\n        if (error.message.startsWith(PAHO_MQTT_ERROR_CODE_NOT_CONNECTED)) {\n          // if there wasn't a connection, do not show an error\n          return;\n        }\n\n        window.router.logger.error(error);\n      }\n    },\n    Router: Router\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/conduit/Router.js\n");

/***/ }),

/***/ "./src/js/iov/Iov.js":
/*!***************************!*\
  !*** ./src/js/iov/Iov.js ***!
  \***************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Iov; });\n/* harmony import */ var uuid_v4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uuid/v4 */ \"./node_modules/uuid/v4.js\");\n/* harmony import */ var uuid_v4__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(uuid_v4__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/logger */ \"./src/js/utils/logger.js\");\n/* harmony import */ var _utils___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/ */ \"./src/js/utils/index.js\");\n/* harmony import */ var _IovPlayer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./IovPlayer */ \"./src/js/iov/IovPlayer.js\");\n/* harmony import */ var _StreamConfiguration__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./StreamConfiguration */ \"./src/js/iov/StreamConfiguration.js\");\n\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\nvar DEFAULT_ENABLE_METRICS = false;\nvar DEFAULT_CONNECTION_CHANGE_PLAY_DELAY = 5;\n/**\n * Internet of Video client. This module uses the MediaSource API to\n * deliver video content streamed through CLSP from distributed sources.\n */\n\nvar Iov =\n/*#__PURE__*/\nfunction () {\n  _createClass(Iov, null, [{\n    key: \"factory\",\n    value: function factory(videoElementId, options) {\n      return new Iov(videoElementId, options);\n    }\n    /**\n     * @param {String} videoElementId\n     * @param {Object} [options]\n     */\n\n  }]);\n\n  function Iov(videoElementId) {\n    var _this = this;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Iov);\n\n    _defineProperty(this, \"onConnectionChange\", function () {\n      // @todo - does this still work?\n      if (window.navigator.onLine) {\n        _this.logger.debug('Back online...');\n\n        if (_this.iovPlayer.stopped) {\n          // Without this timeout, the video appears blank.  Not sure if there is\n          // some race condition...\n          setTimeout(function () {\n            _this.changeSrc(_this.streamConfiguration);\n          }, _this.CONNECTION_CHANGE_PLAY_DELAY * 1000);\n        }\n      } else {\n        _this.logger.debug('Offline!');\n\n        _this.stop();\n      }\n    });\n\n    _defineProperty(this, \"onVisibilityChange\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee() {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!document[_utils___WEBPACK_IMPORTED_MODULE_2__[\"default\"].windowStateNames.hiddenStateName]) {\n                _context.next = 3;\n                break;\n              }\n\n              _this.stop();\n\n              return _context.abrupt(\"return\");\n\n            case 3:\n              _this.restart();\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })));\n\n    _defineProperty(this, \"onPlayerError\", function (error) {\n      // If it is currently hidden, do nothing\n      if (document[_utils___WEBPACK_IMPORTED_MODULE_2__[\"default\"].windowStateNames.hiddenStateName]) {\n        _this.stop();\n\n        return;\n      }\n\n      _this.logger.error(error);\n\n      _this.restart();\n    });\n\n    if (!_utils___WEBPACK_IMPORTED_MODULE_2__[\"default\"].supported()) {\n      throw new Error('You are using an unsupported browser - Unable to play CLSP video');\n    }\n\n    if (!videoElementId) {\n      throw new Error('videoElementId is required to construct an Iov');\n    } // This should be unique - it is only used for logging\n\n\n    this.id = options.id || uuid_v4__WEBPACK_IMPORTED_MODULE_0___default()();\n    this.logger = Object(_utils_logger__WEBPACK_IMPORTED_MODULE_1__[\"default\"])().factory(\"Iov \".concat(this.id));\n    this.logger.debug('Constructing...');\n    this.metrics = {}; // @todo - there must be a more proper way to do events than this...\n\n    this.events = {};\n\n    for (var i = 0; i < Iov.EVENT_NAMES.length; i++) {\n      this.events[Iov.EVENT_NAMES[i]] = [];\n    }\n\n    this.destroyed = false;\n    this.onReadyAlreadyCalled = false;\n    this.videoElementId = videoElementId;\n    this.videoElementParent = null;\n    this.iovPlayerCount = 0;\n    var visibilityChangeEventName = _utils___WEBPACK_IMPORTED_MODULE_2__[\"default\"].windowStateNames.visibilityChangeEventName;\n\n    if (visibilityChangeEventName) {\n      document.addEventListener(visibilityChangeEventName, this.onVisibilityChange, false);\n    }\n\n    window.addEventListener('online', this.onConnectionChange, false);\n    window.addEventListener('offline', this.onConnectionChange, false); // These can be configured manually after construction\n\n    this.ENABLE_METRICS = DEFAULT_ENABLE_METRICS;\n    this.CONNECTION_CHANGE_PLAY_DELAY = DEFAULT_CONNECTION_CHANGE_PLAY_DELAY;\n  }\n\n  _createClass(Iov, [{\n    key: \"on\",\n    value: function on(name, action) {\n      this.logger.debug(\"Registering Listener for \".concat(name, \" event...\"));\n\n      if (!Iov.EVENT_NAMES.includes(name)) {\n        throw new Error(\"\\\"\".concat(name, \"\\\" is not a valid event.\\\"\"));\n      }\n\n      if (this.destroyed) {\n        return;\n      }\n\n      this.events[name].push(action);\n    }\n  }, {\n    key: \"trigger\",\n    value: function trigger(name, value) {\n      var sillyMetrics = [];\n\n      if (sillyMetrics.includes(name)) {\n        this.logger.silly(\"Triggering \".concat(name, \" event...\"));\n      } else {\n        this.logger.debug(\"Triggering \".concat(name, \" event...\"));\n      }\n\n      if (this.destroyed) {\n        return;\n      }\n\n      if (!Iov.EVENT_NAMES.includes(name)) {\n        throw new Error(\"\\\"\".concat(name, \"\\\" is not a valid event.\\\"\"));\n      }\n\n      for (var i = 0; i < this.events[name].length; i++) {\n        this.events[name][i](value, this);\n      }\n    }\n  }, {\n    key: \"metric\",\n    value: function metric(type, value) {\n      if (!this.ENABLE_METRICS) {\n        return;\n      }\n\n      if (!Iov.METRIC_TYPES.includes(type)) {\n        // @todo - should this throw?\n        return;\n      }\n\n      this.metrics[type] = value;\n      this.trigger('metric', {\n        type: type,\n        value: this.metrics[type]\n      });\n    }\n  }, {\n    key: \"_prepareVideoElement\",\n    value: function _prepareVideoElement() {\n      var videoElement = window.document.getElementById(this.videoElementId); // If we have no elements to work with, throw an error\n\n      if (!videoElement) {\n        throw new Error(\"Unable to find an element in the DOM with id \\\"\".concat(this.videoElementId, \"\\\".\"));\n      }\n\n      if (!this.videoElementParent) {\n        videoElement.style.display = 'none';\n        this.videoElementParent = videoElement.parentNode;\n      }\n\n      if (!this.videoElementParent) {\n        throw new Error('There is no iframe container element to attach the iframe to!');\n      }\n\n      this.videoElementParent.classList.add('clsp-video-container');\n      var clspVideoElement = window.document.createElement('video');\n      clspVideoElement.classList.add('clsp-video');\n      clspVideoElement.muted = true;\n      var insertBefore = this.iovPlayer && this.iovPlayer.videoElement ? this.iovPlayer.videoElement.nextSibling : this.videoElementParent.childNodes[0]; // @todo - is it ok that the most recent video is always first?  what about\n      // the spinner or the not-supported text\n\n      this.videoElementParent.insertBefore(clspVideoElement, insertBefore);\n      return clspVideoElement;\n    }\n  }, {\n    key: \"_registerPlayerListeners\",\n    value: function _registerPlayerListeners(iovPlayer) {\n      var _this2 = this;\n\n      // @todo - this seems to be videojs specific, and should be removed or moved\n      // somewhere else\n      iovPlayer.on('firstFrameShown', function () {\n        _this2.trigger('firstFrameShown');\n      });\n      iovPlayer.on('videoReceived', function () {\n        _this2.trigger('videoReceived');\n      });\n      iovPlayer.on('videoInfoReceived', function () {\n        _this2.trigger('videoInfoReceived');\n      });\n    }\n  }, {\n    key: \"generatePlayerLogId\",\n    value: function generatePlayerLogId() {\n      return \"iov:\".concat(this.id, \".player:\").concat(++this.iovPlayerCount);\n    }\n  }, {\n    key: \"_clearNextPlayerTimeout\",\n    value: function _clearNextPlayerTimeout() {\n      if (this.nextPlayerTimeout) {\n        clearTimeout(this.nextPlayerTimeout);\n        this.nextPlayerTimeout = null;\n      }\n    }\n    /**\n     * Meant to be run as soon as the next player (after awaiting changeSrc) has\n     * recevied its first frame.\n     */\n\n  }, {\n    key: \"showNextStream\",\n    value: function showNextStream() {\n      this.logger.debug('About to show next player'); // The next player is actually playing / displaying video, but it isn't\n      // visible because the old player is still in front of it.  The destruction\n      // of the old player is what actually causes the next player to become\n      // visible.\n\n      if (this.iovPlayer) {\n        // async, but we don't need to wait for it\n        this.iovPlayer.destroy();\n      }\n\n      this._clearNextPlayerTimeout();\n\n      if (this.pendingChangeSrcIovPlayer) {\n        this.streamConfiguration = this.pendingChangeSrcStreamConfiguration;\n        this.iovPlayer = this.pendingChangeSrcIovPlayer;\n        this.pendingChangeSrcStreamConfiguration = null;\n        this.pendingChangeSrcIovPlayer = null;\n      }\n    }\n  }, {\n    key: \"cancelChangeSrc\",\n    value: function cancelChangeSrc(id) {\n      if (!this.pendingChangeSrcIovPlayer) {\n        return;\n      } // @todo - should we await this?\n\n\n      this.pendingChangeSrcIovPlayer.destroy();\n      this.pendingChangeSrcId = null;\n      this.pendingChangeSrcStreamConfiguration = null;\n      this.pendingChangeSrcIovPlayer = null;\n    }\n    /**\n     * @param {StreamConfiguration|String} url\n     *   The StreamConfiguration or url of the new stream\n     * @param {Boolean} showOnFirstFrame\n     *   if true, when the new stream has received its first frame,\n     */\n\n  }, {\n    key: \"changeSrc\",\n    value: function changeSrc(url) {\n      var _this3 = this;\n\n      var showOnFirstFrame = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      this.logger.debug('Changing Stream...');\n\n      if (!url) {\n        throw new Error('url is required to changeSrc');\n      } // Handle the case of multiple changeSrc requests.  Only change to the last\n      // stream that was requested\n\n\n      if (this.pendingChangeSrcIovPlayer) {\n        this._clearNextPlayerTimeout();\n\n        this.cancelChangeSrc();\n      }\n\n      var clspVideoElement = this._prepareVideoElement();\n\n      var streamConfiguration = _StreamConfiguration__WEBPACK_IMPORTED_MODULE_4__[\"default\"].isStreamConfiguration(url) ? url : _StreamConfiguration__WEBPACK_IMPORTED_MODULE_4__[\"default\"].fromUrl(url);\n      var changeSrcId = uuid_v4__WEBPACK_IMPORTED_MODULE_0___default()();\n      var iovPlayer = _IovPlayer__WEBPACK_IMPORTED_MODULE_3__[\"default\"].factory(this.generatePlayerLogId(), clspVideoElement, function () {\n        return _this3.changeSrc(_this3.streamConfiguration);\n      }, this.onPlayerError);\n      this.pendingChangeSrcId = changeSrcId;\n      this.pendingChangeSrcStreamConfiguration = streamConfiguration;\n      this.pendingChangeSrcIovPlayer = iovPlayer;\n\n      this._registerPlayerListeners(iovPlayer);\n\n      var firstFrameReceivedPromise = new Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref2 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee2(resolve, reject) {\n          return regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.prev = 0;\n                  _context2.next = 3;\n                  return iovPlayer.initialize(streamConfiguration);\n\n                case 3:\n                  _context2.next = 5;\n                  return _this3.play(iovPlayer);\n\n                case 5:\n                  iovPlayer.on('firstFrameShown', function () {\n                    _this3.nextPlayerTimeout = setTimeout(function () {\n                      _this3._clearNextPlayerTimeout();\n\n                      _this3.logger.debug('Next player has received its first frame...');\n\n                      if (showOnFirstFrame) {\n                        _this3.showNextStream();\n                      }\n\n                      resolve();\n                    }, _this3.SHOW_NEXT_VIDEO_DELAY * 1000);\n                  });\n                  _context2.next = 11;\n                  break;\n\n                case 8:\n                  _context2.prev = 8;\n                  _context2.t0 = _context2[\"catch\"](0);\n                  reject(_context2.t0);\n\n                case 11:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, null, [[0, 8]]);\n        }));\n\n        return function (_x, _x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n      return {\n        id: changeSrcId,\n        firstFrameReceivedPromise: firstFrameReceivedPromise\n      };\n    }\n    /**\n     * @param {StreamConfiguration|url} streamConfiguration\n     *   The StreamConfiguration or url of the stream to use with the cloned\n     *   player\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var streamConfiguration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.streamConfiguration;\n      this.logger.debug('clone');\n      var newStreamConfiguration = _StreamConfiguration__WEBPACK_IMPORTED_MODULE_4__[\"default\"].isStreamConfiguration(streamConfiguration) ? streamConfiguration.clone() : _StreamConfiguration__WEBPACK_IMPORTED_MODULE_4__[\"default\"].fromUrl(streamConfiguration); // @todo - is it possible to reuse the iov player?\n\n      return Iov.factory(this.videoElement, newStreamConfiguration);\n    }\n  }, {\n    key: \"play\",\n\n    /**\n     * Whenever possible, use the changeSrc method instead, since it minimizes the\n     * number of black (empty) frames when playing or resuming a stream\n     * @param {IovPlayer} iovPlayer\n     */\n    value: function () {\n      var _play = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3() {\n        var iovPlayer,\n            _args3 = arguments;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                iovPlayer = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : this.iovPlayer;\n                this.logger.debug('Play');\n                _context3.prev = 2;\n                _context3.next = 5;\n                return iovPlayer.play();\n\n              case 5:\n                _context3.next = 13;\n                break;\n\n              case 7:\n                _context3.prev = 7;\n                _context3.t0 = _context3[\"catch\"](2);\n                this.logger.debug('Play error - destroying'); // @todo - display a message in the page saying that the stream couldn't\n                // be played\n\n                _context3.next = 12;\n                return iovPlayer.destroy();\n\n              case 12:\n                throw _context3.t0;\n\n              case 13:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[2, 7]]);\n      }));\n\n      function play() {\n        return _play.apply(this, arguments);\n      }\n\n      return play;\n    }()\n  }, {\n    key: \"stop\",\n    value: function () {\n      var _stop = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4() {\n        var iovPlayer,\n            _args4 = arguments;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                iovPlayer = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : this.iovPlayer;\n\n                if (iovPlayer) {\n                  _context4.next = 4;\n                  break;\n                }\n\n                this.logger.warn('Tried to stop non-existent player');\n                return _context4.abrupt(\"return\");\n\n              case 4:\n                this.logger.debug('Stop');\n                _context4.next = 7;\n                return iovPlayer.stop();\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function stop() {\n        return _stop.apply(this, arguments);\n      }\n\n      return stop;\n    }()\n  }, {\n    key: \"restart\",\n    value: function () {\n      var _restart = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee5() {\n        var iovPlayer,\n            _args5 = arguments;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                iovPlayer = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : this.iovPlayer;\n\n                if (iovPlayer) {\n                  _context5.next = 3;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\");\n\n              case 3:\n                // @todo - this is a blunt instrument - is there a more performant (but\n                // still reliable) way to restart the player as opposed to destroying it and\n                // creating a new one?\n                this.logger.debug('Restart');\n                _context5.next = 6;\n                return this.changeSrc(this.streamConfiguration);\n\n              case 6:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function restart() {\n        return _restart.apply(this, arguments);\n      }\n\n      return restart;\n    }()\n  }, {\n    key: \"enterFullscreen\",\n    value: function enterFullscreen() {\n      var iovPlayer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.iovPlayer;\n\n      if (!iovPlayer) {\n        this.logger.warn('Tried to fullscreen non-existent player');\n        return;\n      }\n\n      this.logger.debug('Enter fullscreen');\n      iovPlayer.enterFullscreen();\n    }\n  }, {\n    key: \"exitFullscreen\",\n    value: function exitFullscreen() {\n      var iovPlayer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.iovPlayer;\n\n      if (!iovPlayer) {\n        this.logger.warn('Tried to un-fullscreen non-existent player');\n        return;\n      }\n\n      this.logger.debug('Exit fullscreen');\n      iovPlayer.exitFullscreen();\n    }\n  }, {\n    key: \"toggleFullscreen\",\n    value: function toggleFullscreen() {\n      var iovPlayer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.iovPlayer;\n\n      if (!iovPlayer) {\n        this.logger.warn('Tried to toggle fullscreen on non-existent player');\n        return;\n      }\n\n      this.logger.debug('Toggle fullscreen');\n      iovPlayer.toggleFullscreen();\n    }\n    /**\n     * Dereference the necessary properties, clear any intervals and timeouts, and\n     * remove any listeners.  Will also destroy the player.\n     *\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.logger.debug('destroy');\n\n      if (this.destroyed) {\n        return;\n      }\n\n      this.destroyed = true;\n      var visibilityChangeEventName = _utils___WEBPACK_IMPORTED_MODULE_2__[\"default\"].windowStateNames.visibilityChangeEventName;\n\n      if (visibilityChangeEventName) {\n        document.removeEventListener(visibilityChangeEventName, this.onVisibilityChange);\n      }\n\n      window.removeEventListener('online', this.onConnectionChange);\n      window.removeEventListener('offline', this.onConnectionChange);\n      var iovPlayerDestroyPromise = this.iovPlayer ? this.iovPlayer.destroy() : Promise.resolve();\n      this.iovPlayer = null;\n      this.streamConfiguration = null;\n      this.videoElement = null;\n      this.videoElementParent = null;\n      this.events = null;\n      this.metrics = null;\n      return iovPlayerDestroyPromise;\n    }\n  }]);\n\n  return Iov;\n}();\n\n_defineProperty(Iov, \"EVENT_NAMES\", ['metric', 'unsupportedMimeCodec', 'firstFrameShown', 'videoReceived', 'videoInfoReceived']);\n\n_defineProperty(Iov, \"METRIC_TYPES\", []);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/iov/Iov.js\n");

/***/ }),

/***/ "./src/js/iov/IovCollection.js":
/*!*************************************!*\
  !*** ./src/js/iov/IovCollection.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return IovCollection; });\n/* harmony import */ var _Iov__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Iov */ \"./src/js/iov/Iov.js\");\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/logger */ \"./src/js/utils/logger.js\");\n\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n // @todo - this could cause an overflow!\n\nvar totalIovCount = 0;\nvar collection;\n/**\n * The Iov Collection is meant to be a singleton, and is meant to manage all\n * Iovs in a given browser window/document.  There are certain centralized\n * functions it is meant to perform, such as generating the guids that are\n * needed to establish a connection to a unique topic on the SFS, and to listen\n * to window messages and route the relevant messages to the appropriate Iov\n * instance.\n */\n\nvar IovCollection =\n/*#__PURE__*/\nfunction () {\n  _createClass(IovCollection, null, [{\n    key: \"asSingleton\",\n    value: function asSingleton() {\n      if (!collection) {\n        collection = IovCollection.factory();\n      }\n\n      return collection;\n    }\n  }, {\n    key: \"factory\",\n    value: function factory() {\n      return new IovCollection();\n    }\n    /**\n     * @private\n     */\n\n  }]);\n\n  function IovCollection() {\n    _classCallCheck(this, IovCollection);\n\n    this.logger = Object(_utils_logger__WEBPACK_IMPORTED_MODULE_1__[\"default\"])().factory('IovCollection');\n    this.logger.debug('Constructing...');\n    this.iovs = {};\n  }\n  /**\n   * Create an Iov for a specific stream, and add it to this collection.\n   *\n   * @param {String} url\n   *   The url to the clsp stream\n   * @param {DOMNode} videoElementId\n   *   The id of the video element that will serve as the video player in the\n   *   DOM\n   *\n   * @returns {Iov}\n   */\n\n\n  _createClass(IovCollection, [{\n    key: \"create\",\n    value: function () {\n      var _create = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(videoElementId) {\n        var iov;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                iov = _Iov__WEBPACK_IMPORTED_MODULE_0__[\"default\"].factory(videoElementId, {\n                  id: (++totalIovCount).toString()\n                });\n                this.add(iov);\n                return _context.abrupt(\"return\", iov);\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function create(_x) {\n        return _create.apply(this, arguments);\n      }\n\n      return create;\n    }()\n    /**\n     * Add an Iov instance to this collection.  It can then be accessed by its id.\n     *\n     * @param {Iov} iov\n     *   The iov instance to add\n     *\n     * @returns {this}\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(iov) {\n      var id = iov.id;\n      this.iovs[id] = iov;\n      return this;\n    }\n    /**\n     * Determine whether or not an iov with the passed id exists in this\n     * collection.\n     *\n     * @param {String} id\n     *   The id of the iov to find\n     *\n     * @returns {Boolean}\n     *   True if the iov with the given id exists\n     *   False if the iov with the given id does not exist\n     */\n\n  }, {\n    key: \"has\",\n    value: function has(id) {\n      return Object.prototype.hasOwnProperty.call(this.iovs, id);\n    }\n    /**\n     * Get an iov with the passed id from this collection.\n     *\n     * @param {String} id\n     *   The id of the iov instance to get\n     *\n     * @returns {Iov|undefined}\n     *   If an iov with this id doest not exist, undefined is returned.\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(id) {\n      return this.iovs[id];\n    }\n    /**\n     * Remove an iov instance from this collection and destroy it.\n     *\n     * @param {String} id\n     *   The id of the iov to remove and destroy\n     *\n     * @returns {this}\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(id) {\n      var iov = this.get(id);\n\n      if (!iov) {\n        return;\n      }\n\n      delete this.iovs[id];\n      iov.destroy();\n      return this;\n    }\n    /**\n     * Destroy this collection and destroy all iov instances in this collection.\n     *\n     * @returns {void}\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.destroyed) {\n        return;\n      }\n\n      this.destroyed = true;\n      window.removeEventListener('message', this._onWindowMessage);\n\n      for (var id in this.iovs) {\n        this.remove(id);\n      }\n\n      this.iovs = null;\n    }\n  }]);\n\n  return IovCollection;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvaW92L0lvdkNvbGxlY3Rpb24uanM/ZTUxOCJdLCJuYW1lcyI6WyJ0b3RhbElvdkNvdW50IiwiY29sbGVjdGlvbiIsIklvdkNvbGxlY3Rpb24iLCJmYWN0b3J5IiwibG9nZ2VyIiwiTG9nZ2VyIiwiZGVidWciLCJpb3ZzIiwidmlkZW9FbGVtZW50SWQiLCJpb3YiLCJJb3YiLCJpZCIsInRvU3RyaW5nIiwiYWRkIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZ2V0IiwiZGVzdHJveSIsImRlc3Ryb3llZCIsIndpbmRvdyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJfb25XaW5kb3dNZXNzYWdlIiwicmVtb3ZlIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFhOzs7Ozs7Ozs7Ozs7QUFFYjtDQUdBOztBQUNBLElBQUlBLGFBQWEsR0FBRyxDQUFwQjtBQUNBLElBQUlDLFVBQUo7QUFFQTs7Ozs7Ozs7O0lBUXFCQyxhOzs7OztrQ0FDRztBQUNwQixVQUFJLENBQUNELFVBQUwsRUFBaUI7QUFDZkEsa0JBQVUsR0FBR0MsYUFBYSxDQUFDQyxPQUFkLEVBQWI7QUFDRDs7QUFFRCxhQUFPRixVQUFQO0FBQ0Q7Ozs4QkFFaUI7QUFDaEIsYUFBTyxJQUFJQyxhQUFKLEVBQVA7QUFDRDtBQUVEOzs7Ozs7QUFHQSwyQkFBZTtBQUFBOztBQUNiLFNBQUtFLE1BQUwsR0FBY0MsNkRBQU0sR0FBR0YsT0FBVCxDQUFpQixlQUFqQixDQUFkO0FBQ0EsU0FBS0MsTUFBTCxDQUFZRSxLQUFaLENBQWtCLGlCQUFsQjtBQUVBLFNBQUtDLElBQUwsR0FBWSxFQUFaO0FBQ0Q7QUFFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7OytDQVdjQyxjOzs7Ozs7QUFDTkMsbUIsR0FBTUMsNENBQUcsQ0FBQ1AsT0FBSixDQUFZSyxjQUFaLEVBQ1Y7QUFDRUcsb0JBQUUsRUFBRSxDQUFDLEVBQUVYLGFBQUgsRUFBa0JZLFFBQWxCO0FBRE4saUJBRFUsQztBQUtaLHFCQUFLQyxHQUFMLENBQVNKLEdBQVQ7aURBRU9BLEc7Ozs7Ozs7Ozs7Ozs7Ozs7QUFHVDs7Ozs7Ozs7Ozs7d0JBUUtBLEcsRUFBSztBQUNSLFVBQU1FLEVBQUUsR0FBR0YsR0FBRyxDQUFDRSxFQUFmO0FBRUEsV0FBS0osSUFBTCxDQUFVSSxFQUFWLElBQWdCRixHQUFoQjtBQUVBLGFBQU8sSUFBUDtBQUNEO0FBRUQ7Ozs7Ozs7Ozs7Ozs7O3dCQVdLRSxFLEVBQUk7QUFDUCxhQUFPRyxNQUFNLENBQUNDLFNBQVAsQ0FBaUJDLGNBQWpCLENBQWdDQyxJQUFoQyxDQUFxQyxLQUFLVixJQUExQyxFQUFnREksRUFBaEQsQ0FBUDtBQUNEO0FBRUQ7Ozs7Ozs7Ozs7Ozt3QkFTS0EsRSxFQUFJO0FBQ1AsYUFBTyxLQUFLSixJQUFMLENBQVVJLEVBQVYsQ0FBUDtBQUNEO0FBRUQ7Ozs7Ozs7Ozs7OzJCQVFRQSxFLEVBQUk7QUFDVixVQUFNRixHQUFHLEdBQUcsS0FBS1MsR0FBTCxDQUFTUCxFQUFULENBQVo7O0FBRUEsVUFBSSxDQUFDRixHQUFMLEVBQVU7QUFDUjtBQUNEOztBQUVELGFBQU8sS0FBS0YsSUFBTCxDQUFVSSxFQUFWLENBQVA7QUFFQUYsU0FBRyxDQUFDVSxPQUFKO0FBRUEsYUFBTyxJQUFQO0FBQ0Q7QUFFRDs7Ozs7Ozs7OEJBS1c7QUFDVCxVQUFJLEtBQUtDLFNBQVQsRUFBb0I7QUFDbEI7QUFDRDs7QUFFRCxXQUFLQSxTQUFMLEdBQWlCLElBQWpCO0FBRUFDLFlBQU0sQ0FBQ0MsbUJBQVAsQ0FBMkIsU0FBM0IsRUFBc0MsS0FBS0MsZ0JBQTNDOztBQUVBLFdBQUssSUFBTVosRUFBWCxJQUFpQixLQUFLSixJQUF0QixFQUE0QjtBQUMxQixhQUFLaUIsTUFBTCxDQUFZYixFQUFaO0FBQ0Q7O0FBRUQsV0FBS0osSUFBTCxHQUFZLElBQVo7QUFDRCIsImZpbGUiOiIuL3NyYy9qcy9pb3YvSW92Q29sbGVjdGlvbi5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IElvdiBmcm9tICcuL0lvdic7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy4uL3V0aWxzL2xvZ2dlcic7XG5cbi8vIEB0b2RvIC0gdGhpcyBjb3VsZCBjYXVzZSBhbiBvdmVyZmxvdyFcbmxldCB0b3RhbElvdkNvdW50ID0gMDtcbmxldCBjb2xsZWN0aW9uO1xuXG4vKipcbiAqIFRoZSBJb3YgQ29sbGVjdGlvbiBpcyBtZWFudCB0byBiZSBhIHNpbmdsZXRvbiwgYW5kIGlzIG1lYW50IHRvIG1hbmFnZSBhbGxcbiAqIElvdnMgaW4gYSBnaXZlbiBicm93c2VyIHdpbmRvdy9kb2N1bWVudC4gIFRoZXJlIGFyZSBjZXJ0YWluIGNlbnRyYWxpemVkXG4gKiBmdW5jdGlvbnMgaXQgaXMgbWVhbnQgdG8gcGVyZm9ybSwgc3VjaCBhcyBnZW5lcmF0aW5nIHRoZSBndWlkcyB0aGF0IGFyZVxuICogbmVlZGVkIHRvIGVzdGFibGlzaCBhIGNvbm5lY3Rpb24gdG8gYSB1bmlxdWUgdG9waWMgb24gdGhlIFNGUywgYW5kIHRvIGxpc3RlblxuICogdG8gd2luZG93IG1lc3NhZ2VzIGFuZCByb3V0ZSB0aGUgcmVsZXZhbnQgbWVzc2FnZXMgdG8gdGhlIGFwcHJvcHJpYXRlIElvdlxuICogaW5zdGFuY2UuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIElvdkNvbGxlY3Rpb24ge1xuICBzdGF0aWMgYXNTaW5nbGV0b24gKCkge1xuICAgIGlmICghY29sbGVjdGlvbikge1xuICAgICAgY29sbGVjdGlvbiA9IElvdkNvbGxlY3Rpb24uZmFjdG9yeSgpO1xuICAgIH1cblxuICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICB9XG5cbiAgc3RhdGljIGZhY3RvcnkgKCkge1xuICAgIHJldHVybiBuZXcgSW92Q29sbGVjdGlvbigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5sb2dnZXIgPSBMb2dnZXIoKS5mYWN0b3J5KCdJb3ZDb2xsZWN0aW9uJyk7XG4gICAgdGhpcy5sb2dnZXIuZGVidWcoJ0NvbnN0cnVjdGluZy4uLicpO1xuXG4gICAgdGhpcy5pb3ZzID0ge307XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGFuIElvdiBmb3IgYSBzcGVjaWZpYyBzdHJlYW0sIGFuZCBhZGQgaXQgdG8gdGhpcyBjb2xsZWN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsXG4gICAqICAgVGhlIHVybCB0byB0aGUgY2xzcCBzdHJlYW1cbiAgICogQHBhcmFtIHtET01Ob2RlfSB2aWRlb0VsZW1lbnRJZFxuICAgKiAgIFRoZSBpZCBvZiB0aGUgdmlkZW8gZWxlbWVudCB0aGF0IHdpbGwgc2VydmUgYXMgdGhlIHZpZGVvIHBsYXllciBpbiB0aGVcbiAgICogICBET01cbiAgICpcbiAgICogQHJldHVybnMge0lvdn1cbiAgICovXG4gIGFzeW5jIGNyZWF0ZSAodmlkZW9FbGVtZW50SWQpIHtcbiAgICBjb25zdCBpb3YgPSBJb3YuZmFjdG9yeSh2aWRlb0VsZW1lbnRJZCxcbiAgICAgIHtcbiAgICAgICAgaWQ6ICgrK3RvdGFsSW92Q291bnQpLnRvU3RyaW5nKCksXG4gICAgICB9KTtcblxuICAgIHRoaXMuYWRkKGlvdik7XG5cbiAgICByZXR1cm4gaW92O1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhbiBJb3YgaW5zdGFuY2UgdG8gdGhpcyBjb2xsZWN0aW9uLiAgSXQgY2FuIHRoZW4gYmUgYWNjZXNzZWQgYnkgaXRzIGlkLlxuICAgKlxuICAgKiBAcGFyYW0ge0lvdn0gaW92XG4gICAqICAgVGhlIGlvdiBpbnN0YW5jZSB0byBhZGRcbiAgICpcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICBhZGQgKGlvdikge1xuICAgIGNvbnN0IGlkID0gaW92LmlkO1xuXG4gICAgdGhpcy5pb3ZzW2lkXSA9IGlvdjtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZSB3aGV0aGVyIG9yIG5vdCBhbiBpb3Ygd2l0aCB0aGUgcGFzc2VkIGlkIGV4aXN0cyBpbiB0aGlzXG4gICAqIGNvbGxlY3Rpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBpZFxuICAgKiAgIFRoZSBpZCBvZiB0aGUgaW92IHRvIGZpbmRcbiAgICpcbiAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAqICAgVHJ1ZSBpZiB0aGUgaW92IHdpdGggdGhlIGdpdmVuIGlkIGV4aXN0c1xuICAgKiAgIEZhbHNlIGlmIHRoZSBpb3Ygd2l0aCB0aGUgZ2l2ZW4gaWQgZG9lcyBub3QgZXhpc3RcbiAgICovXG4gIGhhcyAoaWQpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuaW92cywgaWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhbiBpb3Ygd2l0aCB0aGUgcGFzc2VkIGlkIGZyb20gdGhpcyBjb2xsZWN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gaWRcbiAgICogICBUaGUgaWQgb2YgdGhlIGlvdiBpbnN0YW5jZSB0byBnZXRcbiAgICpcbiAgICogQHJldHVybnMge0lvdnx1bmRlZmluZWR9XG4gICAqICAgSWYgYW4gaW92IHdpdGggdGhpcyBpZCBkb2VzdCBub3QgZXhpc3QsIHVuZGVmaW5lZCBpcyByZXR1cm5lZC5cbiAgICovXG4gIGdldCAoaWQpIHtcbiAgICByZXR1cm4gdGhpcy5pb3ZzW2lkXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgYW4gaW92IGluc3RhbmNlIGZyb20gdGhpcyBjb2xsZWN0aW9uIGFuZCBkZXN0cm95IGl0LlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gaWRcbiAgICogICBUaGUgaWQgb2YgdGhlIGlvdiB0byByZW1vdmUgYW5kIGRlc3Ryb3lcbiAgICpcbiAgICogQHJldHVybnMge3RoaXN9XG4gICAqL1xuICByZW1vdmUgKGlkKSB7XG4gICAgY29uc3QgaW92ID0gdGhpcy5nZXQoaWQpO1xuXG4gICAgaWYgKCFpb3YpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBkZWxldGUgdGhpcy5pb3ZzW2lkXTtcblxuICAgIGlvdi5kZXN0cm95KCk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXN0cm95IHRoaXMgY29sbGVjdGlvbiBhbmQgZGVzdHJveSBhbGwgaW92IGluc3RhbmNlcyBpbiB0aGlzIGNvbGxlY3Rpb24uXG4gICAqXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgZGVzdHJveSAoKSB7XG4gICAgaWYgKHRoaXMuZGVzdHJveWVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5kZXN0cm95ZWQgPSB0cnVlO1xuXG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCB0aGlzLl9vbldpbmRvd01lc3NhZ2UpO1xuXG4gICAgZm9yIChjb25zdCBpZCBpbiB0aGlzLmlvdnMpIHtcbiAgICAgIHRoaXMucmVtb3ZlKGlkKTtcbiAgICB9XG5cbiAgICB0aGlzLmlvdnMgPSBudWxsO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/js/iov/IovCollection.js\n");

/***/ }),

/***/ "./src/js/iov/IovPlayer.js":
/*!*********************************!*\
  !*** ./src/js/iov/IovPlayer.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return IovPlayer; });\n/* harmony import */ var uuid_v4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uuid/v4 */ \"./node_modules/uuid/v4.js\");\n/* harmony import */ var uuid_v4__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(uuid_v4__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _conduit_ConduitCollection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../conduit/ConduitCollection */ \"./src/js/conduit/ConduitCollection.js\");\n/* harmony import */ var _MSEWrapper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./MSEWrapper */ \"./src/js/iov/MSEWrapper.js\");\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/logger */ \"./src/js/utils/logger.js\");\n/* harmony import */ var _StreamConfiguration__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./StreamConfiguration */ \"./src/js/iov/StreamConfiguration.js\");\n\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\nvar DEFAULT_ENABLE_METRICS = false;\nvar DEFAULT_SEGMENT_INTERVAL_SAMPLE_SIZE = 5;\nvar DEFAULT_DRIFT_CORRECTION_CONSTANT = 2;\n/**\n * Responsible for receiving stream input and routing it to the media source\n * buffer for rendering on the video tag. There is some 'light' reworking of\n * the binary data that is required.\n *\n * @todo - this class should have no knowledge of videojs or its player, since\n * it is supposed to be capable of playing video by itself.  The plugin that\n * uses this player should have all of the videojs logic, and none should\n * exist here.\n*/\n\nvar IovPlayer =\n/*#__PURE__*/\nfunction () {\n  _createClass(IovPlayer, null, [{\n    key: \"factory\",\n    value: function factory(logId, videoElement, onConduitMessageError, onPlayerError) {\n      return new IovPlayer(logId, videoElement, onConduitMessageError, onPlayerError);\n    }\n  }]);\n\n  function IovPlayer(logId, videoElement) {\n    var _this = this;\n\n    var onConduitMessageError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.onConduitMessageError;\n    var onPlayerError = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.onPlayerError;\n\n    _classCallCheck(this, IovPlayer);\n\n    _defineProperty(this, \"onConduitReconnect\", function (error) {\n      if (error) {\n        _this.logger.error(error); // @todo - should we do anything else on error?\n\n\n        return;\n      } // @todo - is there a more performant way to do this?\n\n\n      _this.restart();\n    });\n\n    _defineProperty(this, \"onPlayerError\", function (error) {\n      _this.logger.error('Player Error!');\n\n      _this.logger.error(error);\n    });\n\n    _defineProperty(this, \"onConduitMessageError\", function (error) {\n      _this.logger.error('Conduit Message Error!');\n\n      _this.logger.error(error);\n    });\n\n    _defineProperty(this, \"onMoof\", function (clspMessage) {\n      // @todo - this seems like a hack...\n      if (_this.stopped) {\n        return;\n      }\n\n      _this.trigger('videoReceived');\n\n      _this.getSegmentIntervalMetrics(); // Sometimes, the first moof arrives before the mseWrapper has finished\n      // being initialized, so we will need to drop those frames\n\n\n      if (!_this.mseWrapper) {\n        return;\n      }\n\n      _this.mseWrapper.append(clspMessage.payloadBytes);\n    });\n\n    this.logId = logId;\n    this.logger = Object(_utils_logger__WEBPACK_IMPORTED_MODULE_3__[\"default\"])().factory(\"Iov Player \".concat(this.logId));\n    this.logger.debug('constructor');\n    this.metrics = {}; // @todo - there must be a more proper way to do events than this...\n\n    this.events = {};\n\n    for (var i = 0; i < IovPlayer.EVENT_NAMES.length; i++) {\n      this.events[IovPlayer.EVENT_NAMES[i]] = [];\n    }\n\n    this.videoElement = videoElement;\n    this.conduitCount = 0;\n    this.conduit = null;\n    this.streamConfiguration = null;\n    this.onConduitMessageError = onConduitMessageError;\n    this.onPlayerError = onPlayerError;\n    this.firstFrameShown = false;\n    this.stopped = false; // Used for determining the size of the internal buffer hidden from the MSE\n    // api by recording the size and time of each chunk of video upon buffer append\n    // and recording the time when the updateend event is called.\n\n    this.LogSourceBuffer = false;\n    this.LogSourceBufferTopic = null;\n    this.latestSegmentReceived = null;\n    this.segmentIntervalAverage = null;\n    this.segmentInterval = null;\n    this.segmentIntervals = [];\n    this.mseWrapper = null;\n    this.moov = null; // These can be configured manually after construction\n\n    this.ENABLE_METRICS = DEFAULT_ENABLE_METRICS;\n    this.SEGMENT_INTERVAL_SAMPLE_SIZE = DEFAULT_SEGMENT_INTERVAL_SAMPLE_SIZE;\n    this.DRIFT_CORRECTION_CONSTANT = DEFAULT_DRIFT_CORRECTION_CONSTANT;\n  }\n\n  _createClass(IovPlayer, [{\n    key: \"on\",\n    value: function on(name, action) {\n      this.logger.debug(\"Registering Listener for \".concat(name, \" event...\"));\n\n      if (!IovPlayer.EVENT_NAMES.includes(name)) {\n        throw new Error(\"\\\"\".concat(name, \"\\\" is not a valid event.\\\"\"));\n      }\n\n      if (this.destroyed) {\n        return;\n      }\n\n      this.events[name].push(action);\n    }\n  }, {\n    key: \"trigger\",\n    value: function trigger(name, value) {\n      var sillyMetrics = ['metric', 'videoReceived'];\n\n      if (sillyMetrics.includes(name)) {\n        this.logger.silly(\"Triggering \".concat(name, \" event...\"));\n      } else {\n        this.logger.debug(\"Triggering \".concat(name, \" event...\"));\n      }\n\n      if (this.destroyed) {\n        return;\n      }\n\n      if (!IovPlayer.EVENT_NAMES.includes(name)) {\n        throw new Error(\"\\\"\".concat(name, \"\\\" is not a valid event.\\\"\"));\n      }\n\n      for (var i = 0; i < this.events[name].length; i++) {\n        this.events[name][i](value, this);\n      }\n    }\n  }, {\n    key: \"metric\",\n    value: function metric(type, value) {\n      if (!this.ENABLE_METRICS) {\n        return;\n      }\n\n      if (!IovPlayer.METRIC_TYPES.includes(type)) {\n        // @todo - should this throw?\n        return;\n      }\n\n      switch (type) {\n        case 'video.driftCorrection':\n          {\n            if (!this.metrics[type]) {\n              this.metrics[type] = 0;\n            }\n\n            this.metrics[type] += value;\n            break;\n          }\n\n        default:\n          {\n            this.metrics[type] = value;\n          }\n      }\n\n      this.trigger('metric', {\n        type: type,\n        value: this.metrics[type]\n      });\n    }\n  }, {\n    key: \"_onError\",\n    value: function _onError(type, message, error) {\n      this.logger.warn(type, ':', message);\n      this.logger.error(error);\n    }\n  }, {\n    key: \"generateConduitLogId\",\n    value: function generateConduitLogId() {\n      return \"\".concat(this.logId, \".conduit:\").concat(++this.conduitCount);\n    }\n  }, {\n    key: \"initialize\",\n    value: function () {\n      var _initialize = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var streamConfiguration,\n            _args = arguments;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                streamConfiguration = _args.length > 0 && _args[0] !== undefined ? _args[0] : this.streamConfiguration;\n\n                if (_StreamConfiguration__WEBPACK_IMPORTED_MODULE_4__[\"default\"].isStreamConfiguration(streamConfiguration)) {\n                  _context.next = 3;\n                  break;\n                }\n\n                throw new Error('streamConfiguration is not valid');\n\n              case 3:\n                this.logger.debug(\"Initializing with \".concat(streamConfiguration.streamName));\n                this.streamConfiguration = streamConfiguration; // This MUST be globally unique!  The CLSP server will broadcast the stream\n                // to a topic that contains this id, so if there is ANY other client\n                // connected that has the same id anywhere in the world, the stream to all\n                // clients that use that topic will fail.  This is why we use guids rather\n                // than an incrementing integer.\n                // It is now prefixed with `clsp-plugin-` to differentiate requests that\n                // come from this plugin from others.\n\n                this.clientId = \"clsp-plugin-\".concat(uuid_v4__WEBPACK_IMPORTED_MODULE_0___default()());\n                this.videoElement.id = this.clientId;\n                this.videoElement.dataset.name = streamConfiguration.streamName;\n                _context.next = 10;\n                return _conduit_ConduitCollection__WEBPACK_IMPORTED_MODULE_1__[\"default\"].asSingleton().create(this.generateConduitLogId(), this.clientId, this.streamConfiguration, this.videoElement.parentNode, this.onConduitReconnect, this.onConduitMessageError);\n\n              case 10:\n                this.conduit = _context.sent;\n                _context.next = 13;\n                return this.conduit.initialize();\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function initialize() {\n        return _initialize.apply(this, arguments);\n      }\n\n      return initialize;\n    }()\n  }, {\n    key: \"_html5Play\",\n    value: function _html5Play() {\n      var _this2 = this;\n\n      // @see - https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/play\n      try {\n        var promise = this.videoElement.play();\n\n        if (typeof promise !== 'undefined') {\n          promise[\"catch\"](function (error) {\n            _this2._onError('play.promise', 'Error while trying to play clsp video', error);\n          });\n        }\n      } catch (error) {\n        this._onError('play.notPromise', 'Error while trying to play clsp video - the play operation was NOT a promise!', error);\n      }\n    }\n  }, {\n    key: \"reinitializeMseWrapper\",\n    value: function () {\n      var _reinitializeMseWrapper = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee7(mimeCodec) {\n        var _this3 = this;\n\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (!this.mseWrapper) {\n                  _context7.next = 3;\n                  break;\n                }\n\n                _context7.next = 3;\n                return this.mseWrapper.destroy();\n\n              case 3:\n                this.mseWrapper = _MSEWrapper__WEBPACK_IMPORTED_MODULE_2__[\"default\"].factory(this.videoElement);\n                this.mseWrapper.on('metric', function (_ref) {\n                  var type = _ref.type,\n                      value = _ref.value;\n\n                  _this3.trigger('metric', {\n                    type: type,\n                    value: value\n                  });\n                });\n                this.mseWrapper.initializeMediaSource({\n                  onSourceOpen: function () {\n                    var _onSourceOpen = _asyncToGenerator(\n                    /*#__PURE__*/\n                    regeneratorRuntime.mark(function _callee5() {\n                      return regeneratorRuntime.wrap(function _callee5$(_context5) {\n                        while (1) {\n                          switch (_context5.prev = _context5.next) {\n                            case 0:\n                              _this3.logger.debug('on mediaSource sourceopen');\n\n                              _context5.next = 3;\n                              return _this3.mseWrapper.initializeSourceBuffer(mimeCodec, {\n                                onAppendStart: function onAppendStart(byteArray) {\n                                  _this3.logger.silly('On Append Start...'); // onAppendStart\n\n\n                                  _this3.conduit.segmentUsed(byteArray);\n                                },\n                                onAppendFinish: function onAppendFinish(info) {\n                                  _this3.logger.silly('On Append Finish...');\n\n                                  if (!_this3.firstFrameShown) {\n                                    _this3.firstFrameShown = true;\n\n                                    _this3.trigger('firstFrameShown');\n                                  }\n\n                                  _this3.drift = info.bufferTimeEnd - _this3.videoElement.currentTime;\n\n                                  _this3.metric('sourceBuffer.bufferTimeEnd', info.bufferTimeEnd);\n\n                                  _this3.metric('video.currentTime', _this3.videoElement.currentTime);\n\n                                  _this3.metric('video.drift', _this3.drift);\n\n                                  if (_this3.drift > _this3.segmentIntervalAverage / 1000 + _this3.DRIFT_CORRECTION_CONSTANT) {\n                                    _this3.metric('video.driftCorrection', 1);\n\n                                    _this3.videoElement.currentTime = info.bufferTimeEnd;\n                                  }\n\n                                  if (_this3.videoElement.paused === true) {\n                                    _this3.logger.debug('Video is paused!');\n\n                                    _this3._html5Play();\n                                  }\n                                },\n                                onRemoveFinish: function onRemoveFinish(info) {\n                                  _this3.logger.debug('onRemoveFinish');\n                                },\n                                onAppendError: function () {\n                                  var _onAppendError = _asyncToGenerator(\n                                  /*#__PURE__*/\n                                  regeneratorRuntime.mark(function _callee2(error) {\n                                    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n                                      while (1) {\n                                        switch (_context2.prev = _context2.next) {\n                                          case 0:\n                                            // internal error, this has been observed to happen the tab\n                                            // in the browser where this video player lives is hidden\n                                            // then reselected. 'ex' is undefined the error is bug\n                                            // within the MSE C++ implementation in the browser.\n                                            _this3._onError('sourceBuffer.append', 'Error while appending to sourceBuffer', error);\n\n                                            _context2.next = 3;\n                                            return _this3.reinitializeMseWrapper(mimeCodec);\n\n                                          case 3:\n                                          case \"end\":\n                                            return _context2.stop();\n                                        }\n                                      }\n                                    }, _callee2);\n                                  }));\n\n                                  function onAppendError(_x2) {\n                                    return _onAppendError.apply(this, arguments);\n                                  }\n\n                                  return onAppendError;\n                                }(),\n                                onRemoveError: function onRemoveError(error) {\n                                  if (error.constructor.name === 'DOMException') {\n                                    // @todo - every time the mseWrapper is destroyed, there is a\n                                    // sourceBuffer error.  No need to log that, but you should fix it\n                                    return;\n                                  } // observed this fail during a memry snapshot in chrome\n                                  // otherwise no observed failure, so ignore exception.\n\n\n                                  _this3._onError('sourceBuffer.remove', 'Error while removing segments from sourceBuffer', error);\n                                },\n                                onStreamFrozen: function () {\n                                  var _onStreamFrozen = _asyncToGenerator(\n                                  /*#__PURE__*/\n                                  regeneratorRuntime.mark(function _callee3() {\n                                    return regeneratorRuntime.wrap(function _callee3$(_context3) {\n                                      while (1) {\n                                        switch (_context3.prev = _context3.next) {\n                                          case 0:\n                                            _this3.logger.debug('stream appears to be frozen - reinitializing...');\n\n                                            _context3.next = 3;\n                                            return _this3.reinitializeMseWrapper(mimeCodec);\n\n                                          case 3:\n                                          case \"end\":\n                                            return _context3.stop();\n                                        }\n                                      }\n                                    }, _callee3);\n                                  }));\n\n                                  function onStreamFrozen() {\n                                    return _onStreamFrozen.apply(this, arguments);\n                                  }\n\n                                  return onStreamFrozen;\n                                }(),\n                                onError: function () {\n                                  var _onError2 = _asyncToGenerator(\n                                  /*#__PURE__*/\n                                  regeneratorRuntime.mark(function _callee4(error) {\n                                    return regeneratorRuntime.wrap(function _callee4$(_context4) {\n                                      while (1) {\n                                        switch (_context4.prev = _context4.next) {\n                                          case 0:\n                                            _this3._onError('mediaSource.sourceBuffer.generic', 'mediaSource sourceBuffer error', error);\n\n                                            _context4.next = 3;\n                                            return _this3.reinitializeMseWrapper(mimeCodec);\n\n                                          case 3:\n                                          case \"end\":\n                                            return _context4.stop();\n                                        }\n                                      }\n                                    }, _callee4);\n                                  }));\n\n                                  function onError(_x3) {\n                                    return _onError2.apply(this, arguments);\n                                  }\n\n                                  return onError;\n                                }()\n                              });\n\n                            case 3:\n                              _this3.trigger('videoInfoReceived');\n\n                              _this3.mseWrapper.appendMoov(_this3.moov);\n\n                            case 5:\n                            case \"end\":\n                              return _context5.stop();\n                          }\n                        }\n                      }, _callee5);\n                    }));\n\n                    function onSourceOpen() {\n                      return _onSourceOpen.apply(this, arguments);\n                    }\n\n                    return onSourceOpen;\n                  }(),\n                  onSourceEnded: function () {\n                    var _onSourceEnded = _asyncToGenerator(\n                    /*#__PURE__*/\n                    regeneratorRuntime.mark(function _callee6() {\n                      return regeneratorRuntime.wrap(function _callee6$(_context6) {\n                        while (1) {\n                          switch (_context6.prev = _context6.next) {\n                            case 0:\n                              _this3.logger.debug('on mediaSource sourceended');\n\n                              _context6.next = 3;\n                              return _this3.stop();\n\n                            case 3:\n                            case \"end\":\n                              return _context6.stop();\n                          }\n                        }\n                      }, _callee6);\n                    }));\n\n                    function onSourceEnded() {\n                      return _onSourceEnded.apply(this, arguments);\n                    }\n\n                    return onSourceEnded;\n                  }(),\n                  onError: function onError(error) {\n                    _this3._onError('mediaSource.generic', 'mediaSource error', // @todo - sometimes, this error is an event rather than an error!\n                    // If different onError calls use different method signatures, that\n                    // needs to be accounted for in the MSEWrapper, and the actual error\n                    // that was thrown must ALWAYS be the first argument here.  As a\n                    // shortcut, we can log `...args` here instead.\n                    error);\n                  }\n                });\n\n                if (!(!this.mseWrapper.mediaSource || !this.videoElement)) {\n                  _context7.next = 8;\n                  break;\n                }\n\n                throw new Error('The video element or mediaSource is not ready!');\n\n              case 8:\n                this.mseWrapper.reinitializeVideoElementSrc();\n\n              case 9:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function reinitializeMseWrapper(_x) {\n        return _reinitializeMseWrapper.apply(this, arguments);\n      }\n\n      return reinitializeMseWrapper;\n    }()\n  }, {\n    key: \"restart\",\n    value: function () {\n      var _restart = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee8() {\n        var needToReinitialize, playError;\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                this.logger.debug('restart'); // @todo - this has not yet been tested for memory leaks\n                // If the src attribute is missing, it means we must reinitialize.  This can\n                // happen if the video was loaded while the page was not visible, e.g.\n                // document.hidden === true, which can happen when switching tabs.\n                // @todo - is there a more \"proper\" way to do this?\n\n                needToReinitialize = !this.videoElement.src;\n                _context8.next = 4;\n                return this.stop();\n\n              case 4:\n                if (!needToReinitialize) {\n                  _context8.next = 8;\n                  break;\n                }\n\n                if (this.conduit) {\n                  _conduit_ConduitCollection__WEBPACK_IMPORTED_MODULE_1__[\"default\"].asSingleton().remove(this.clientId);\n                }\n\n                _context8.next = 8;\n                return this.initialize();\n\n              case 8:\n                _context8.next = 10;\n                return this.play();\n\n              case 10:\n                playError = _context8.sent;\n\n                if (!playError) {\n                  _context8.next = 13;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", playError);\n\n              case 13:\n                if (needToReinitialize) {\n                  this._html5Play();\n                }\n\n              case 14:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function restart() {\n        return _restart.apply(this, arguments);\n      }\n\n      return restart;\n    }()\n  }, {\n    key: \"play\",\n\n    /**\n     * Note that if an error is thrown during play, the IovPlayer instance should\n     * be destroyed to free resources.\n     */\n    value: function () {\n      var _play = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee9() {\n        var _this4 = this;\n\n        var mimeCodec, moov, _ref2;\n\n        return regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                this.logger.debug('play');\n                this.stopped = false;\n\n                if (this.streamConfiguration) {\n                  _context9.next = 5;\n                  break;\n                }\n\n                this.logger.error('Cannot play a stream without a stream configuration');\n                return _context9.abrupt(\"return\");\n\n              case 5:\n                _context9.prev = 5;\n                _context9.next = 8;\n                return this.conduit.play(this.onMoof);\n\n              case 8:\n                _ref2 = _context9.sent;\n                mimeCodec = _ref2.mimeCodec;\n                moov = _ref2.moov;\n                _context9.next = 17;\n                break;\n\n              case 13:\n                _context9.prev = 13;\n                _context9.t0 = _context9[\"catch\"](5);\n                this.onPlayerError(_context9.t0); // Don't throw here, since the error was handled.  Return the error to the\n                // caller.\n\n                return _context9.abrupt(\"return\", _context9.t0);\n\n              case 17:\n                if (_MSEWrapper__WEBPACK_IMPORTED_MODULE_2__[\"default\"].isMimeCodecSupported(mimeCodec)) {\n                  _context9.next = 20;\n                  break;\n                }\n\n                this.trigger('unsupportedMimeCodec', \"Unsupported mime codec: \".concat(mimeCodec));\n                throw new Error(\"Unsupported mime codec: \".concat(mimeCodec));\n\n              case 20:\n                this.moov = moov;\n                _context9.next = 23;\n                return this.reinitializeMseWrapper(mimeCodec);\n\n              case 23:\n                this.conduit.resyncStream(function () {\n                  // console.log('sync received re-initialize media source buffer');\n                  _this4.reinitializeMseWrapper(mimeCodec);\n                });\n\n              case 24:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this, [[5, 13]]);\n      }));\n\n      function play() {\n        return _play.apply(this, arguments);\n      }\n\n      return play;\n    }()\n    /**\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      var _this5 = this;\n\n      this.logger.debug('stop...');\n\n      if (this.stopped) {\n        return Promise.resolve();\n      }\n\n      this.stopped = true;\n      this.moov = null;\n      this.logger.debug('stop about to finish synchronous operations and return promise...'); // The logic above MUST be run synchronously when called, therefore,\n      // we cannot use async to define the stop method, and must return a\n      // promise here rather than using await.  We return this promise so\n      // that the caller has the option of waiting, but is not forced to\n      // wait.\n\n      return new Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref3 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee10(resolve, reject) {\n          return regeneratorRuntime.wrap(function _callee10$(_context10) {\n            while (1) {\n              switch (_context10.prev = _context10.next) {\n                case 0:\n                  _context10.prev = 0;\n                  _context10.prev = 1;\n                  _context10.next = 4;\n                  return _this5.conduit.stop();\n\n                case 4:\n                  _context10.next = 10;\n                  break;\n\n                case 6:\n                  _context10.prev = 6;\n                  _context10.t0 = _context10[\"catch\"](1);\n\n                  _this5.logger.error('failed to stop the conduit');\n\n                  _this5.logger.error(_context10.t0);\n\n                case 10:\n                  if (_this5.mseWrapper) {\n                    _context10.next = 13;\n                    break;\n                  }\n\n                  _this5.logger.debug('stop succeeded asynchronously...');\n\n                  return _context10.abrupt(\"return\", resolve());\n\n                case 13:\n                  _context10.next = 15;\n                  return _this5.mseWrapper.destroy();\n\n                case 15:\n                  _this5.mseWrapper = null;\n\n                  _this5.logger.debug('stop succeeded asynchronously...');\n\n                  resolve();\n                  _context10.next = 24;\n                  break;\n\n                case 20:\n                  _context10.prev = 20;\n                  _context10.t1 = _context10[\"catch\"](0);\n\n                  _this5.logger.error('stop failed asynchronously...');\n\n                  reject(_context10.t1);\n\n                case 24:\n                case \"end\":\n                  return _context10.stop();\n              }\n            }\n          }, _callee10, null, [[0, 20], [1, 6]]);\n        }));\n\n        return function (_x4, _x5) {\n          return _ref3.apply(this, arguments);\n        };\n      }());\n    }\n  }, {\n    key: \"getSegmentIntervalMetrics\",\n    value: function getSegmentIntervalMetrics() {\n      var previousSegmentReceived = this.latestSegmentReceived;\n      this.latestSegmentReceived = Date.now();\n\n      if (previousSegmentReceived) {\n        this.segmentInterval = this.latestSegmentReceived - previousSegmentReceived;\n      }\n\n      if (this.segmentInterval) {\n        if (this.segmentIntervals.length >= this.SEGMENT_INTERVAL_SAMPLE_SIZE) {\n          this.segmentIntervals.shift();\n        }\n\n        this.segmentIntervals.push(this.segmentInterval);\n        var segmentIntervalSum = 0;\n\n        for (var i = 0; i < this.segmentIntervals.length; i++) {\n          segmentIntervalSum += this.segmentIntervals[i];\n        }\n\n        this.segmentIntervalAverage = segmentIntervalSum / this.segmentIntervals.length;\n        this.metric('video.segmentInterval', this.segmentInterval);\n        this.metric('video.segmentIntervalAverage', this.segmentIntervalAverage);\n      }\n    }\n  }, {\n    key: \"enterFullscreen\",\n    value: function enterFullscreen() {\n      if (!window.document.fullscreenElement) {\n        // Since the iov and player take control of the video element and its\n        // parent, ask the parent for fullscreen since the video elements will be\n        // destroyed and recreated when changing sources\n        this.videoElement.parentNode.requestFullscreen();\n      }\n    }\n  }, {\n    key: \"exitFullscreen\",\n    value: function exitFullscreen() {\n      if (window.document.exitFullscreen) {\n        window.document.exitFullscreen();\n      }\n    }\n  }, {\n    key: \"toggleFullscreen\",\n    value: function toggleFullscreen() {\n      if (!window.document.fullscreenElement) {\n        this.enterFullscreen();\n      } else {\n        this.exitFullscreen();\n      }\n    }\n  }, {\n    key: \"_freeAllResources\",\n    value: function _freeAllResources() {\n      this.logger.debug('_freeAllResources...');\n      _conduit_ConduitCollection__WEBPACK_IMPORTED_MODULE_1__[\"default\"].asSingleton().remove(this.clientId);\n      this.conduit = null; // The caller must destroy the streamConfiguration\n\n      this.streamConfiguration = null;\n      this.firstFrameShown = null;\n      this.events = null;\n      this.metrics = null;\n      this.LogSourceBuffer = null;\n      this.LogSourceBufferTopic = null;\n      this.latestSegmentReceived = null;\n      this.segmentIntervalAverage = null;\n      this.segmentInterval = null;\n      this.segmentIntervals = null;\n      this.moov = null;\n      this.logger.debug('_freeAllResources finished...');\n    }\n    /**\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var _this6 = this;\n\n      this.logger.debug('destroy...');\n\n      if (this.destroyed) {\n        return;\n      }\n\n      this.destroyed = true; // Note that we DO NOT wait for the stop command to finish execution,\n      // because this destroy method MUST be treated as a synchronous operation\n      // to ensure that the caller is not forced to wait on destruction.  This\n      // allows us to properly support client side libraries and frameworks that\n      // do not support asynchronous destruction.  See the comments in the destroy\n      // method on the MSEWrapper for a more detailed explanation.\n\n      this.logger.debug('about to stop...');\n      var stopPromise = this.stop(); // Setting the src of the video element to an empty string is\n      // the only reliable way we have found to ensure that MediaSource,\n      // SourceBuffer, and various Video elements are properly dereferenced\n      // to avoid memory leaks\n      // @todo - should these occur after stop? is there a reason they're done\n      // in this order?\n\n      this.videoElement.src = '';\n      this.videoElement.parentNode.removeChild(this.videoElement);\n      this.videoElement.remove();\n      this.videoElement = null;\n      this.logger.debug('exiting destroy, asynchronous destroy logic in progress...');\n      return stopPromise.then(function () {\n        _this6.logger.debug('stopped successfully...');\n\n        _this6._freeAllResources();\n\n        _this6.logger.debug('destroy successfully finished...');\n      })[\"catch\"](function (error) {\n        _this6.logger.debug('stopped unsuccessfully...');\n\n        _this6.logger.error('Error while destroying the iov player!');\n\n        _this6.logger.error(error);\n\n        _this6._freeAllResources();\n\n        _this6.logger.debug('destroy unsuccessfully finished...');\n      });\n    }\n  }]);\n\n  return IovPlayer;\n}();\n\n_defineProperty(IovPlayer, \"EVENT_NAMES\", ['metric', 'firstFrameShown', 'videoReceived', 'videoInfoReceived']);\n\n_defineProperty(IovPlayer, \"METRIC_TYPES\", ['sourceBuffer.bufferTimeEnd', 'video.currentTime', 'video.drift', 'video.driftCorrection', 'video.segmentInterval', 'video.segmentIntervalAverage']);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/iov/IovPlayer.js\n");

/***/ }),

/***/ "./src/js/iov/MSEWrapper.js":
/*!**********************************!*\
  !*** ./src/js/iov/MSEWrapper.js ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return MSEWrapper; });\n/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\");\n/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(debug__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var lodash_defaults__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/defaults */ \"./node_modules/lodash/defaults.js\");\n/* harmony import */ var lodash_defaults__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_defaults__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var lodash_noop__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/noop */ \"./node_modules/lodash/noop.js\");\n/* harmony import */ var lodash_noop__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_noop__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _utils___WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/ */ \"./src/js/utils/index.js\");\n\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n // import { mp4toJSON } from './mp4-inspect';\n\nvar DEBUG_PREFIX = 'skyline:clsp:iov';\nvar debug = debug__WEBPACK_IMPORTED_MODULE_0___default()(\"\".concat(DEBUG_PREFIX, \":MSEWrapper\"));\nvar silly = debug__WEBPACK_IMPORTED_MODULE_0___default()(\"silly:\".concat(DEBUG_PREFIX, \":MSEWrapper\")); // This is the original error text, but it is subject to change by chrome,\n// and we are only checking the part of the error text that contains no\n// punctuation (and is all lower case).\n// \"Failed to execute 'appendBuffer' on 'SourceBuffer': The SourceBuffer is full, and cannot free space to append additional buffers.\";\n\nvar FULL_BUFFER_ERROR = 'and cannot free space to append additional buffers';\n\nvar MSEWrapper =\n/*#__PURE__*/\nfunction () {\n  _createClass(MSEWrapper, null, [{\n    key: \"isMimeCodecSupported\",\n    value: function isMimeCodecSupported(mimeCodec) {\n      return window.MediaSource && window.MediaSource.isTypeSupported(mimeCodec);\n    }\n  }, {\n    key: \"factory\",\n    value: function factory(videoElement) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return new MSEWrapper(videoElement, options);\n    }\n  }]);\n\n  function MSEWrapper(videoElement) {\n    var _this = this;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, MSEWrapper);\n\n    _defineProperty(this, \"onSourceBufferUpdateEnd\", function () {\n      silly('onUpdateEnd');\n\n      _this.metric('sourceBuffer.updateEnd', 1);\n\n      if (_this.shouldAbort) {\n        _this.sourceBufferAbort();\n      }\n\n      try {\n        // Sometimes the mediaSource is removed while an update is being\n        // processed, resulting in an error when trying to read the\n        // \"buffered\" property.\n        if (_this.sourceBuffer.buffered.length <= 0) {\n          _this.metric('sourceBuffer.updateEnd.bufferLength.empty', 1);\n\n          debug('After updating, the sourceBuffer has no length!');\n          return;\n        }\n      } catch (error) {\n        // @todo - do we need to handle this?\n        _this.metric('sourceBuffer.updateEnd.bufferLength.error', 1);\n\n        debug('The mediaSource was removed while an update operation was occurring.');\n        return;\n      }\n\n      var info = _this.getBufferTimes();\n\n      _this.timeBuffered = info.currentBufferSize;\n\n      if (info.previousBufferSize !== null && info.previousBufferSize > _this.timeBuffered) {\n        _this.onRemoveFinish(info);\n      } else {\n        _this.onAppendFinish(info);\n      }\n\n      _this.processNextInQueue();\n    });\n\n    debug('Constructing...');\n\n    if (!videoElement) {\n      throw new Error('videoElement is required to construct an MSEWrapper.');\n    }\n\n    this.destroyed = false;\n    this.videoElement = videoElement;\n    this.options = lodash_defaults__WEBPACK_IMPORTED_MODULE_1___default()({}, options, {\n      // These default buffer values provide the best results in my testing.\n      // It keeps the memory usage as low as is practical, and rarely causes\n      // the video to stutter\n      bufferSizeLimit: 90 + Math.floor(Math.random() * 200),\n      bufferTruncateFactor: 2,\n      bufferTruncateValue: null,\n      driftThreshold: 2000,\n      duration: 10,\n      enableMetrics: false,\n      appendsWithSameTimeEndThreshold: 1\n    });\n    this.segmentQueue = [];\n    this.sequenceNumber = 0;\n    this.mediaSource = null;\n    this.sourceBuffer = null;\n    this.objectURL = null;\n    this.timeBuffered = null;\n    this.appendsSinceTimeEndUpdated = 0;\n\n    if (!this.options.bufferTruncateValue) {\n      this.options.bufferTruncateValue = parseInt(this.options.bufferSizeLimit / this.options.bufferTruncateFactor);\n    }\n\n    this.metrics = {}; // @todo - there must be a more proper way to do events than this...\n\n    this.events = {};\n\n    for (var i = 0; i < MSEWrapper.EVENT_NAMES.length; i++) {\n      this.events[MSEWrapper.EVENT_NAMES[i]] = [];\n    }\n\n    this.eventListeners = {\n      mediaSource: {},\n      sourceBuffer: {}\n    };\n  }\n\n  _createClass(MSEWrapper, [{\n    key: \"on\",\n    value: function on(name, action) {\n      debug(\"Registering Listener for \".concat(name, \" event...\"));\n\n      if (!MSEWrapper.EVENT_NAMES.includes(name)) {\n        throw new Error(\"\\\"\".concat(name, \"\\\" is not a valid event.\\\"\"));\n      }\n\n      this.events[name].push(action);\n    }\n  }, {\n    key: \"trigger\",\n    value: function trigger(name, value) {\n      if (name === 'metric') {\n        silly(\"Triggering \".concat(name, \" event...\"));\n      } else {\n        debug(\"Triggering \".concat(name, \" event...\"));\n      }\n\n      if (!MSEWrapper.EVENT_NAMES.includes(name)) {\n        throw new Error(\"\\\"\".concat(name, \"\\\" is not a valid event.\\\"\"));\n      }\n\n      for (var i = 0; i < this.events[name].length; i++) {\n        this.events[name][i](value, this);\n      }\n    }\n  }, {\n    key: \"metric\",\n    value: function metric(type, value) {\n      if (!this.options || !this.options.enableMetrics) {\n        return;\n      }\n\n      if (!MSEWrapper.METRIC_TYPES.includes(type)) {\n        // @todo - should this throw?\n        return;\n      }\n\n      switch (type) {\n        case 'sourceBuffer.lastKnownBufferSize':\n        case 'sourceBuffer.lastMoofSize':\n          {\n            this.metrics[type] = value;\n            break;\n          }\n\n        default:\n          {\n            if (!Object.prototype.hasOwnProperty.call(this.metrics, type)) {\n              this.metrics[type] = 0;\n            }\n\n            this.metrics[type] += value;\n          }\n      }\n\n      this.trigger('metric', {\n        type: type,\n        value: this.metrics[type]\n      });\n    }\n  }, {\n    key: \"initializeMediaSource\",\n    value: function initializeMediaSource() {\n      var _this2 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      debug('Initializing mediaSource...');\n      options = lodash_defaults__WEBPACK_IMPORTED_MODULE_1___default()({}, options, {\n        onSourceOpen: lodash_noop__WEBPACK_IMPORTED_MODULE_2___default.a,\n        onSourceEnded: lodash_noop__WEBPACK_IMPORTED_MODULE_2___default.a,\n        onError: lodash_noop__WEBPACK_IMPORTED_MODULE_2___default.a\n      });\n      this.metric('mediaSource.created', 1); // Kill the existing media source\n\n      this.destroyMediaSource();\n      this.mediaSource = new window.MediaSource();\n\n      this.eventListeners.mediaSource.sourceopen = function () {\n        // This can only be set when the media source is open.\n        // @todo - does this do memory management for us so we don't have\n        // to call remove on the buffer, which is expensive?  It seems\n        // like it...\n        _this2.mediaSource.duration = _this2.options.duration;\n        options.onSourceOpen();\n      };\n\n      this.eventListeners.mediaSource.sourceended = options.onSourceEnded;\n      this.eventListeners.mediaSource.error = options.onError;\n      this.mediaSource.addEventListener('sourceopen', this.eventListeners.mediaSource.sourceopen);\n      this.mediaSource.addEventListener('sourceended', this.eventListeners.mediaSource.sourceended);\n      this.mediaSource.addEventListener('error', this.eventListeners.mediaSource.error);\n    }\n  }, {\n    key: \"getVideoElementSrc\",\n    value: function getVideoElementSrc() {\n      debug('getVideoElementSrc...');\n\n      if (!this.mediaSource) {\n        // @todo - should this throw?\n        return;\n      } // @todo - should multiple calls to this method with the same mediaSource\n      // result in multiple objectURLs being created?  The docs for this say that\n      // it creates something on the document, which lives until revokeObjectURL\n      // is called on it.  Does that mean we should only ever have one per\n      // this.mediaSource?  It seems like it, but I do not know.  Having only one\n      // seems more predictable, and more memory efficient.\n      // Ensure only a single objectURL exists at one time\n\n\n      if (!this.objectURL) {\n        this.metric('objectURL.created', 1);\n        this.objectURL = window.URL.createObjectURL(this.mediaSource);\n      }\n\n      this.videoElement.src = this.objectURL;\n    }\n  }, {\n    key: \"destroyVideoElementSrc\",\n    value: function destroyVideoElementSrc() {\n      debug('destroyVideoElementSrc...');\n\n      if (!this.mediaSource) {\n        // @todo - should this throw?\n        return;\n      }\n\n      if (!this.objectURL) {\n        // @todo - should this throw?\n        return;\n      } // this.metric('objectURL.revoked', 1);\n\n\n      this.objectURL = null;\n\n      if (this.sourceBuffer) {\n        this.shouldAbort = true;\n      } // free the resource\n\n\n      return window.URL.revokeObjectURL(this.videoElement.src);\n    }\n  }, {\n    key: \"reinitializeVideoElementSrc\",\n    value: function reinitializeVideoElementSrc() {\n      this.metric('mediaSource.reinitialized', 1);\n      this.destroyVideoElementSrc(); // reallocate, this will call media source open which will\n      // append the MOOV atom.\n\n      return this.getVideoElementSrc();\n    }\n  }, {\n    key: \"isMediaSourceReady\",\n    value: function isMediaSourceReady() {\n      // found when stress testing many videos, it is possible for the\n      // media source ready state not to be open even though\n      // source open callback is being called.\n      return this.mediaSource && this.mediaSource.readyState === 'open';\n    }\n  }, {\n    key: \"isSourceBufferReady\",\n    value: function isSourceBufferReady() {\n      return this.sourceBuffer && this.sourceBuffer.updating === false;\n    }\n  }, {\n    key: \"initializeSourceBuffer\",\n    value: function () {\n      var _initializeSourceBuffer = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(mimeCodec) {\n        var options,\n            _args = arguments;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n                debug('initializeSourceBuffer...');\n                options = lodash_defaults__WEBPACK_IMPORTED_MODULE_1___default()({}, options, {\n                  onAppendStart: lodash_noop__WEBPACK_IMPORTED_MODULE_2___default.a,\n                  onAppendFinish: lodash_noop__WEBPACK_IMPORTED_MODULE_2___default.a,\n                  onRemoveFinish: lodash_noop__WEBPACK_IMPORTED_MODULE_2___default.a,\n                  onAppendError: lodash_noop__WEBPACK_IMPORTED_MODULE_2___default.a,\n                  onRemoveError: lodash_noop__WEBPACK_IMPORTED_MODULE_2___default.a,\n                  onStreamFrozen: lodash_noop__WEBPACK_IMPORTED_MODULE_2___default.a,\n                  onError: lodash_noop__WEBPACK_IMPORTED_MODULE_2___default.a,\n                  retry: true\n                });\n\n                if (this.isMediaSourceReady()) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error('Cannot create the sourceBuffer if the mediaSource is not ready.');\n\n              case 5:\n                _context.next = 7;\n                return this.destroySourceBuffer();\n\n              case 7:\n                this.metric('sourceBuffer.created', 1);\n                this.sourceBuffer = this.mediaSource.addSourceBuffer(mimeCodec);\n                this.sourceBuffer.mode = 'sequence'; // Custom Events\n\n                this.eventListeners.sourceBuffer.onAppendStart = options.onAppendStart;\n                this.eventListeners.sourceBuffer.onAppendError = options.onAppendError;\n                this.eventListeners.sourceBuffer.onRemoveFinish = options.onRemoveFinish;\n                this.eventListeners.sourceBuffer.onAppendFinish = options.onAppendFinish;\n                this.eventListeners.sourceBuffer.onRemoveError = options.onRemoveError;\n                this.eventListeners.sourceBuffer.onStreamFrozen = options.onStreamFrozen;\n                this.eventListeners.sourceBuffer.onError = options.onError; // Supported Events\n\n                this.sourceBuffer.addEventListener('updateend', this.onSourceBufferUpdateEnd);\n                this.sourceBuffer.addEventListener('error', this.eventListeners.sourceBuffer.onError);\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function initializeSourceBuffer(_x) {\n        return _initializeSourceBuffer.apply(this, arguments);\n      }\n\n      return initializeSourceBuffer;\n    }()\n  }, {\n    key: \"queueSegment\",\n    value: function queueSegment(segment) {\n      if (this.segmentQueue.length) {\n        debug(\"Queueing segment.  The queue currently has \".concat(this.segmentQueue.length, \" segments.\"));\n      } else {\n        silly('Queueing segment.  The queue is currently empty.');\n      }\n\n      this.metric('queue.added', 1);\n      this.segmentQueue.push({\n        timestamp: Date.now(),\n        byteArray: segment\n      });\n    }\n  }, {\n    key: \"sourceBufferAbort\",\n    value: function sourceBufferAbort() {\n      debug('Aborting current sourceBuffer operation');\n\n      try {\n        this.metric('sourceBuffer.abort', 1);\n\n        if (this.sourceBuffer) {\n          this.sourceBuffer.abort();\n          this.shouldAbort = false;\n        }\n      } catch (error) {\n        this.metric('error.sourceBuffer.abort', 1); // Somehow, this can be become undefined...\n\n        if (this.eventListeners.sourceBuffer.onAbortError) {\n          this.eventListeners.sourceBuffer.onAbortError(error);\n        }\n      }\n    }\n  }, {\n    key: \"_append\",\n    value: function _append(_ref) {\n      var timestamp = _ref.timestamp,\n          byteArray = _ref.byteArray;\n      silly('Appending to the sourceBuffer...');\n\n      try {\n        var estimatedDrift = Date.now() - timestamp;\n\n        if (estimatedDrift > this.options.driftThreshold) {\n          debug(\"Estimated drift of \".concat(estimatedDrift, \" is above the \").concat(this.options.driftThreshold, \" threshold.  Flushing queue...\")); // @todo - perhaps we should re-add the last segment to the queue with a fresh\n          // timestamp?  I think one cause of stream freezing is the sourceBuffer getting\n          // starved, but I don't know if that's correct\n\n          this.metric('queue.removed', this.segmentQueue.length + 1);\n          this.segmentQueue = [];\n          return;\n        }\n\n        silly(\"Appending to the buffer with an estimated drift of \".concat(estimatedDrift));\n        this.metric('sourceBuffer.append', 1);\n        this.sourceBuffer.appendBuffer(byteArray);\n      } catch (error) {\n        if (error.message && error.message.toLowerCase().includes(FULL_BUFFER_ERROR)) {\n          // @todo - make this a valid metric\n          // this.metric('error.sourceBuffer.filled', 1);\n          // If the buffer is full, we will flush it\n          console.warn('source buffer is full, about to flush it...');\n          this.trimBuffer(undefined, true);\n        } else {\n          this.metric('error.sourceBuffer.append', 1);\n          this.eventListeners.sourceBuffer.onAppendError(error, byteArray);\n        }\n      }\n    }\n  }, {\n    key: \"processNextInQueue\",\n    value: function processNextInQueue() {\n      silly('processNextInQueue');\n\n      if (this.destroyed) {\n        return;\n      }\n\n      if (document[_utils___WEBPACK_IMPORTED_MODULE_3__[\"default\"].windowStateNames.hiddenStateName]) {\n        debug('Tab not in focus - dropping frame...');\n        this.metric('frameDrop.hiddenTab', 1);\n        this.metric('queue.cannotProcessNext', 1);\n        return;\n      }\n\n      if (!this.isMediaSourceReady()) {\n        debug('The mediaSource is not ready');\n        this.metric('queue.mediaSourceNotReady', 1);\n        this.metric('queue.cannotProcessNext', 1);\n        return;\n      }\n\n      if (!this.isSourceBufferReady()) {\n        debug('The sourceBuffer is busy');\n        this.metric('queue.sourceBufferNotReady', 1);\n        this.metric('queue.cannotProcessNext', 1);\n        return;\n      }\n\n      if (this.segmentQueue.length > 0) {\n        this.metric('queue.shift', 1);\n        this.metric('queue.canProcessNext', 1);\n\n        this._append(this.segmentQueue.shift());\n      }\n    }\n  }, {\n    key: \"formatMoof\",\n    value: function formatMoof(moof) {\n      // We must overwrite the sequence number locally, because it\n      // the sequence that comes from the server will not necessarily\n      // start at zero.  It should start from zero locally.  This\n      // requirement may have changed with more recent versions of the\n      // browser, but it appears to make the video play a little more\n      // smoothly\n      moof[20] = (this.sequenceNumber & 0xFF000000) >> 24;\n      moof[21] = (this.sequenceNumber & 0x00FF0000) >> 16;\n      moof[22] = (this.sequenceNumber & 0x0000FF00) >> 8;\n      moof[23] = this.sequenceNumber & 0xFF;\n      return moof;\n    }\n  }, {\n    key: \"appendMoov\",\n    value: function appendMoov(moov) {\n      debug('appendMoov');\n\n      if (!moov) {\n        // @todo - do we need to throw here or something?  Under what\n        // circumstance would this be called with no moov?\n        return;\n      }\n\n      this.metric('sourceBuffer.lastMoovSize', moov.length); // Sometimes this can get hit after destroy is called\n\n      if (!this.eventListeners.sourceBuffer.onAppendStart) {\n        return;\n      }\n\n      debug('appending moov...');\n      this.queueSegment(moov);\n      this.processNextInQueue();\n    }\n  }, {\n    key: \"append\",\n    value: function append(byteArray) {\n      silly('Append');\n\n      if (this.destroyed) {\n        return;\n      }\n\n      this.metric('sourceBuffer.lastMoofSize', byteArray.length); // console.log(mp4toJSON(byteArray));\n      // Sometimes this can get hit after destroy is called\n\n      if (!this.eventListeners.sourceBuffer.onAppendStart) {\n        return;\n      }\n\n      this.eventListeners.sourceBuffer.onAppendStart(byteArray);\n      this.metric('queue.append', 1);\n      this.queueSegment(this.formatMoof(byteArray));\n      this.sequenceNumber++;\n      this.processNextInQueue();\n    }\n  }, {\n    key: \"getBufferTimes\",\n    value: function getBufferTimes() {\n      silly('getBufferTimes...');\n\n      try {\n        var previousBufferSize = this.timeBuffered;\n        var bufferTimeStart = this.sourceBuffer.buffered.start(0);\n        var bufferTimeEnd = this.sourceBuffer.buffered.end(0);\n        var currentBufferSize = bufferTimeEnd - bufferTimeStart;\n        silly('getBufferTimes finished successfully...');\n        return {\n          previousBufferSize: previousBufferSize,\n          currentBufferSize: currentBufferSize,\n          bufferTimeStart: bufferTimeStart,\n          bufferTimeEnd: bufferTimeEnd\n        };\n      } catch (error) {\n        debug('getBufferTimes finished unsuccessfully...');\n        return null;\n      }\n    }\n  }, {\n    key: \"trimBuffer\",\n    value: function trimBuffer() {\n      var info = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getBufferTimes();\n      var clearBuffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      silly('trimBuffer...');\n      this.metric('sourceBuffer.lastKnownBufferSize', this.timeBuffered);\n\n      try {\n        if (info && (clearBuffer || this.timeBuffered > this.options.bufferSizeLimit) && this.isSourceBufferReady()) {\n          debug('Removing old stuff from sourceBuffer...'); // @todo - this is the biggest performance problem we have with this player.\n          // Can you figure out how to manage the memory usage without causing the streams\n          // to stutter?\n\n          this.metric('sourceBuffer.trim', this.options.bufferTruncateValue);\n          var trimEndTime = clearBuffer ? Infinity : info.bufferTimeStart + this.options.bufferTruncateValue;\n          debug('trimming buffer...');\n          this.sourceBuffer.remove(info.bufferTimeStart, trimEndTime);\n          debug('finished trimming buffer...');\n        }\n      } catch (error) {\n        debug('trimBuffer failure!');\n        this.metric('sourceBuffer.trim.error', 1);\n        this.eventListeners.sourceBuffer.onRemoveError(error);\n        console.error(error);\n      }\n\n      silly('trimBuffer finished...');\n    }\n  }, {\n    key: \"onRemoveFinish\",\n    value: function onRemoveFinish() {\n      var info = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getBufferTimes();\n      debug('On remove finish...');\n      this.metric('sourceBuffer.updateEnd.removeEvent', 1);\n      this.eventListeners.sourceBuffer.onRemoveFinish(info);\n    }\n  }, {\n    key: \"onAppendFinish\",\n    value: function onAppendFinish() {\n      var info = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getBufferTimes();\n      silly('On append finish...');\n      this.metric('sourceBuffer.updateEnd.appendEvent', 1); // The current buffer size should always be bigger.If it isn't, there is a problem,\n      // and we need to reinitialize or something.  Sometimes the buffer is the same.  This is\n      // allowed for consecutive appends, but only a configurable number of times.  The default\n      // is 1\n\n      debug('Appends with same time end: ' + this.appendsSinceTimeEndUpdated);\n\n      if (this.previousTimeEnd && info.bufferTimeEnd <= this.previousTimeEnd) {\n        this.appendsSinceTimeEndUpdated += 1;\n        this.metric('sourceBuffer.updateEnd.bufferFrozen', 1); // append threshold with same time end has been crossed.  Reinitialize frozen stream.\n\n        if (this.appendsSinceTimeEndUpdated > this.options.appendsWithSameTimeEndThreshold) {\n          debug('stream frozen!');\n          this.eventListeners.sourceBuffer.onStreamFrozen();\n          return;\n        }\n      }\n\n      this.appendsSinceTimeEndUpdated = 0;\n      this.previousTimeEnd = info.bufferTimeEnd;\n      this.eventListeners.sourceBuffer.onAppendFinish(info);\n      this.trimBuffer(info);\n    }\n  }, {\n    key: \"destroySourceBuffer\",\n    value: function destroySourceBuffer() {\n      var _this3 = this;\n\n      debug('destroySourceBuffer...');\n      return new Promise(function (resolve, reject) {\n        var finish = function finish() {\n          if (_this3.sourceBuffer) {\n            _this3.sourceBuffer.removeEventListener('updateend', finish);\n          } // We must abort in the final updateend listener to ensure that\n          // any operations, especially the remove operation, finish first,\n          // as aborting while removing is deprecated.\n\n\n          _this3.sourceBufferAbort();\n\n          debug('destroySourceBuffer finished...');\n          resolve();\n        };\n\n        if (!_this3.sourceBuffer) {\n          return finish();\n        }\n\n        _this3.sourceBuffer.removeEventListener('updateend', _this3.onSourceBufferUpdateEnd);\n\n        _this3.sourceBuffer.removeEventListener('error', _this3.eventListeners.sourceBuffer.onError);\n\n        _this3.sourceBuffer.addEventListener('updateend', finish); // @todo - this is a hack - sometimes, the trimBuffer operation does not cause an update\n        // on the sourceBuffer.  This acts as a timeout to ensure the destruction of this mseWrapper\n        // instance can complete.\n\n\n        debug('giving sourceBuffer some time to finish updating itself...');\n        setTimeout(finish, 1000);\n      });\n    }\n  }, {\n    key: \"destroyMediaSource\",\n    value: function destroyMediaSource() {\n      this.metric('sourceBuffer.destroyed', 1);\n      debug('Destroying mediaSource...');\n\n      if (!this.mediaSource) {\n        return;\n      } // We must do this PRIOR to the sourceBuffer being destroyed, to ensure that the\n      // 'buffered' property is still available, which is necessary for completely\n      // emptying the sourceBuffer.\n\n\n      this.trimBuffer(undefined, true);\n      this.mediaSource.removeEventListener('sourceopen', this.eventListeners.mediaSource.sourceopen);\n      this.mediaSource.removeEventListener('sourceended', this.eventListeners.mediaSource.sourceended);\n      this.mediaSource.removeEventListener('error', this.eventListeners.mediaSource.error); // let sourceBuffers = this.mediaSource.sourceBuffers;\n      // if (sourceBuffers.SourceBuffers) {\n      //   // @see - https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/sourceBuffers\n      //   sourceBuffers = sourceBuffers.SourceBuffers();\n      // }\n      // for (let i = 0; i < sourceBuffers.length; i++) {\n      // this.mediaSource.removeSourceBuffer(sourceBuffers[i]);\n      // }\n\n      if (this.isMediaSourceReady() && this.isSourceBufferReady()) {\n        debug('media source was ready for endOfStream and removeSourceBuffer');\n        this.mediaSource.endOfStream();\n        this.mediaSource.removeSourceBuffer(this.sourceBuffer);\n      } // @todo - is this happening at the right time, or should it happen\n      // prior to removing the source buffers?\n\n\n      this.destroyVideoElementSrc();\n      this.metric('mediaSource.destroyed', 1);\n    }\n  }, {\n    key: \"_freeAllResources\",\n    value: function _freeAllResources() {\n      debug('_freeAllResources...'); // We make NO assumptions here about what instance properties are\n      // needed during the asynchronous destruction of the source buffer,\n      // therefore we wait until it is finished to free all of these\n      // resources.\n\n      this.mediaSource = null;\n      this.sourceBuffer = null;\n      this.videoElement = null;\n      this.timeBuffered = null;\n      this.previousTimeEnd = null;\n      this.segmentQueue = null;\n      this.options = null;\n      this.metrics = null;\n      this.events = null;\n      this.eventListeners = null;\n      debug('_freeAllResources finished...');\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var _this4 = this;\n\n      debug('destroy...');\n\n      if (this.destroyed) {\n        return Promise.resolve();\n      }\n\n      this.destroyed = true;\n      this.destroyMediaSource(); // We MUST not force the destroy method here to be asynchronous, even\n      // though it \"should\" be.  This is because we cannot assume that the\n      // caller has control over whether or not its destroy method can be\n      // properly run asynchronously.  The specific use case here is that\n      // many client side libraries (angular, marionette, react, etc.) do\n      // not all give pre-destruction methods or events that can wait for\n      // an asynchronous operation.  If angular decides it is going to\n      // destroy a DOM element when a user navigates, we have no way of\n      // ensuring that it supports asynchronous operations, or that the\n      // caller is properly using them, if they exist.  Therefore, this\n      // destroy method will clean up the source buffer later, allowing the\n      // rest of the clsp destruction logic to continue.  The use case for\n      // needing that functionality is that the conduit needs to use the its\n      // iframe to contact the server, and if the iframe is destroyed before\n      // the conduit talks to the server, errors will be thrown during\n      // destruction, which will lead to resources not being free / memory\n      // leaks, which may cause the browser to crash after extended periods\n      // of time, such as 24 hours.\n      // Note that we still return the promise, so that the caller has the\n      // option of waiting if they choose.\n\n      var destroyPromise = this.destroySourceBuffer().then(function () {\n        debug('destroySourceBuffer successfully finished...');\n\n        _this4._freeAllResources();\n\n        debug('destroy successfully finished...');\n      })[\"catch\"](function (error) {\n        debug('destroySourceBuffer failed...');\n        console.error('Error while destroying the source buffer!');\n        console.error(error); // Do our best at memory management, even on failure\n\n        _this4._freeAllResources();\n\n        debug('destroy unsuccessfully finished...');\n      });\n      debug('exiting destroy, asynchronous destroy logic in progress...');\n      return destroyPromise;\n    }\n  }]);\n\n  return MSEWrapper;\n}();\n\n_defineProperty(MSEWrapper, \"EVENT_NAMES\", ['metric']);\n\n_defineProperty(MSEWrapper, \"METRIC_TYPES\", ['mediaSource.created', 'mediaSource.destroyed', 'objectURL.created', 'objectURL.revoked', 'mediaSource.reinitialized', 'sourceBuffer.created', 'sourceBuffer.destroyed', 'queue.added', 'queue.removed', 'sourceBuffer.append', 'error.sourceBuffer.append', 'frameDrop.hiddenTab', 'queue.mediaSourceNotReady', 'queue.sourceBufferNotReady', 'queue.shift', 'queue.append', 'sourceBuffer.lastKnownBufferSize', 'sourceBuffer.trim', 'sourceBuffer.trim.error', 'sourceBuffer.updateEnd', 'sourceBuffer.updateEnd.bufferLength.empty', 'sourceBuffer.updateEnd.bufferLength.error', 'sourceBuffer.updateEnd.removeEvent', 'sourceBuffer.updateEnd.appendEvent', 'sourceBuffer.updateEnd.bufferFrozen', 'sourceBuffer.abort', 'error.sourceBuffer.abort', 'sourceBuffer.lastMoofSize']);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/iov/MSEWrapper.js\n");

/***/ }),

/***/ "./src/js/iov/StreamConfiguration.js":
/*!*******************************************!*\
  !*** ./src/js/iov/StreamConfiguration.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return StreamConfiguration; });\n\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar StreamConfiguration =\n/*#__PURE__*/\nfunction () {\n  _createClass(StreamConfiguration, null, [{\n    key: \"factory\",\n    value: function factory(streamName, host, port, useSSL, tokenConfig) {\n      return new StreamConfiguration(streamName, host, port, useSSL, tokenConfig);\n    }\n  }, {\n    key: \"fromObject\",\n    value: function fromObject(config) {\n      if (!config || !typeof config === 'object') {\n        throw new Error('config must be an object to create a streamConfiguration');\n      }\n\n      return StreamConfiguration.factory(config.streamName, config.host, config.port, config.useSSL, _objectSpread({}, config.tokenConfig));\n    }\n  }, {\n    key: \"isStreamConfiguration\",\n    value: function isStreamConfiguration(target) {\n      return target && target.constructor && target.constructor.name === 'StreamConfiguration';\n    }\n  }, {\n    key: \"generateConfigFromUrl\",\n    value: function generateConfigFromUrl(url) {\n      if (!url) {\n        throw new Error('No source was given to be parsed!');\n      } // We use an anchor tag here beacuse, when an href is added to\n      // an anchor dom Element, the parsing is done for you by the\n      // browser.\n\n\n      var parser = document.createElement('a');\n      var useSSL;\n      var default_port;\n      var jwtUrl;\n      var hashUrl;\n      var b64_jwt_access_url = '';\n      var jwt = '';\n      var b64_hash_access_url = '';\n      var hash = ''; // Chrome is the only browser that allows non-http protocols in\n      // the anchor tag's href, so change them all to http here so we\n      // get the benefits of the anchor tag's parsing\n\n      if (url.substring(0, 9).toLowerCase() === 'clsps-jwt') {\n        useSSL = true;\n        parser.href = url.replace('clsps-jwt', 'https');\n        default_port = 443;\n        jwtUrl = true;\n        hashUrl = false;\n      } else if (url.substring(0, 8).toLowerCase() === 'clsp-jwt') {\n        useSSL = false;\n        parser.href = url.replace('clsp-jwt', 'http');\n        default_port = 9001;\n        jwtUrl = true;\n        hashUrl = false;\n      } else if (url.substring(0, 10).toLowerCase() === 'clsps-hash') {\n        useSSL = true;\n        parser.href = url.replace('clsps-hash', 'https');\n        default_port = 443;\n        jwtUrl = false;\n        hashUrl = true;\n      } else if (url.substring(0, 9).toLowerCase() === 'clsp-hash') {\n        useSSL = false;\n        parser.href = url.replace('clsp-hash', 'http');\n        default_port = 9001;\n        jwtUrl = false;\n        hashUrl = true;\n      } else if (url.substring(0, 5).toLowerCase() === 'clsps') {\n        useSSL = true;\n        parser.href = url.replace('clsps', 'https');\n        default_port = 443;\n        jwtUrl = false;\n        hashUrl = false;\n      } else if (url.substring(0, 4).toLowerCase() === 'clsp') {\n        useSSL = false;\n        parser.href = url.replace('clsp', 'http');\n        default_port = 9001;\n        jwtUrl = false;\n        hashUrl = false;\n      } else {\n        throw new Error('The given source is not a clsp url, and therefore cannot be parsed.');\n      }\n\n      var paths = parser.pathname.split('/');\n      var streamName = paths[paths.length - 1];\n      var host = parser.hostname;\n      var port = parser.port;\n\n      if (port.length === 0) {\n        port = default_port;\n      }\n\n      port = parseInt(port); // @ is a special address meaning the server that loaded the web page.\n\n      if (host === '@') {\n        host = window.location.hostname;\n      } // if jwt extract required url parameters.\n\n\n      if (jwtUrl === true) {\n        // Url: clsp[s]-jwt://<sfs addr>[:9001]/<jwt>?Start=...&End=...\n        var qp_offset = url.indexOf(parser.pathname) + parser.pathname.length;\n        var qr_args = url.substr(qp_offset).split('?')[1];\n        var query = {};\n        var pairs = qr_args.split('&');\n\n        for (var i = 0; i < pairs.length; i++) {\n          var pair = pairs[i].split('=');\n          query[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1] || '');\n        }\n\n        if (typeof query.Start === 'undefined') {\n          throw new Error(\"Required 'Start' query parameter not defined for a clsp[s]-jwt\");\n        }\n\n        if (typeof query.End === 'undefined') {\n          throw new Error(\"Required 'End' query parameter not defined for a clsp[s]-jwt\");\n        }\n\n        if (typeof query.token === 'undefined') {\n          throw new Error(\"Required 'token' query parameter not defined for a clsp[s]-jwt\");\n        }\n\n        var protocol = useSSL ? 'clsps-jwt' : 'clsp-jwt';\n\n        var _jwtUrl = \"\".concat(protocol, \"://\").concat(host, \":\").concat(port, \"/jwt?Start=\").concat(query.Start, \"&End=\").concat(query.End);\n\n        b64_jwt_access_url = window.btoa(_jwtUrl);\n        jwt = query.token;\n      } else if (hashUrl === true) {\n        // URL: clsp[s]-hash://<sfs-addr>[:9001]/<stream>?start=...&end=...&token=...\n        var _qp_offset = url.indexOf(parser.pathname) + parser.pathname.length;\n\n        var _qr_args = url.substr(_qp_offset).split('?')[1];\n        var _query = {};\n\n        var _pairs = _qr_args.split('&');\n\n        for (var _i = 0; _i < _pairs.length; _i++) {\n          var _pair = _pairs[_i].split('=');\n\n          _query[decodeURIComponent(_pair[0])] = decodeURIComponent(_pair[1] || '');\n        }\n\n        if (typeof _query.start === 'undefined') {\n          throw new Error(\"Required 'start' query parameter not defined for a clsp[s]-hash\");\n        }\n\n        if (typeof _query.end === 'undefined') {\n          throw new Error(\"Required 'end' query parameter not defined for a clsp[s]-hash\");\n        }\n\n        if (typeof _query.token === 'undefined') {\n          throw new Error(\"Required 'token' query parameter not defined for a clsp[s]-hash\");\n        }\n\n        var _protocol = useSSL ? 'clsps-hash' : 'clsp-hash';\n\n        var _hashUrl = \"\".concat(_protocol, \"://\").concat(host, \":\").concat(port, \"/\").concat(streamName, \"?start=\").concat(_query.start, \"&end=\").concat(_query.end, \"&token=\").concat(_query.token);\n\n        b64_hash_access_url = window.btoa(_hashUrl);\n        hash = _query.token;\n      }\n\n      return {\n        streamName: streamName,\n        host: host,\n        port: port,\n        useSSL: useSSL,\n        tokenConfig: {\n          b64_jwt_access_url: b64_jwt_access_url,\n          jwt: jwt,\n          b64_hash_access_url: b64_hash_access_url,\n          hash: hash\n        }\n      };\n    }\n  }, {\n    key: \"fromUrl\",\n    value: function fromUrl(url) {\n      var config = StreamConfiguration.generateConfigFromUrl(url);\n      return StreamConfiguration.fromObject(config);\n    }\n  }]);\n\n  function StreamConfiguration(streamName, host, port, useSSL) {\n    var tokenConfig = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n\n    _classCallCheck(this, StreamConfiguration);\n\n    if (!streamName) {\n      throw new Error('streamName is required to create a stream configuration.');\n    }\n\n    if (!host) {\n      throw new Error('host is required to create a stream configuration.');\n    }\n\n    if (!port) {\n      throw new Error('port is required to create a stream configuration.');\n    }\n\n    if (!useSSL && useSSL !== false) {\n      throw new Error('useSSL is required to create a stream configuration.');\n    }\n\n    if (!tokenConfig || typeof tokenConfig !== 'object') {\n      throw new Error('tokenConfig is required to create a stream configuration.');\n    }\n\n    this.streamName = streamName;\n    this.host = host;\n    this.port = port;\n    this.useSSL = useSSL;\n    this.tokenConfig = tokenConfig;\n    this.destroyed = false;\n  }\n\n  _createClass(StreamConfiguration, [{\n    key: \"clone\",\n    value: function clone(streamConfiguration) {\n      if (!StreamConfiguration.isStreamConfiguration(streamConfiguration)) {\n        throw new Error('Cannot clone with invalid streamConfiguration');\n      }\n\n      var clone = StreamConfiguration.factory.apply(StreamConfiguration, _toConsumableArray(streamConfiguration.toObject()));\n      return clone;\n    }\n  }, {\n    key: \"toObject\",\n    value: function toObject() {\n      return {\n        streamName: this.streamName,\n        host: this.host,\n        port: this.port,\n        useSSL: this.useSSL,\n        tokenConfig: _objectSpread({}, this.tokenConfig)\n      };\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.destroyed) {\n        return;\n      }\n\n      this.destroyed = true;\n      this.streamName = null;\n      this.host = null;\n      this.port = null;\n      this.useSSL = null;\n      this.tokenConfig = null;\n    }\n  }, {\n    key: \"protocol\",\n    get: function get() {\n      return this.useSSL ? 'clsps' : 'clsp';\n    }\n  }, {\n    key: \"url\",\n    get: function get() {\n      return \"\".concat(this.protocol, \"://\").concat(this.host, \":\").concat(this.port, \"/\").concat(this.streamName);\n    }\n  }]);\n\n  return StreamConfiguration;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/iov/StreamConfiguration.js\n");

/***/ }),

/***/ "./src/js/utils/index.js":
/*!*******************************!*\
  !*** ./src/js/utils/index.js ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ \"./src/js/utils/utils.js\");\n\n\n\n\nif (!window.clspUtils) {\n  window.clspUtils = _utils__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (_utils__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvdXRpbHMvaW5kZXguanM/ZTJjMiJdLCJuYW1lcyI6WyJ3aW5kb3ciLCJjbHNwVXRpbHMiLCJ1dGlscyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFhOztBQUViOztBQUVBLElBQUksQ0FBQ0EsTUFBTSxDQUFDQyxTQUFaLEVBQXVCO0FBQ3JCRCxRQUFNLENBQUNDLFNBQVAsR0FBbUJDLDhDQUFuQjtBQUNEOztBQUVjQSw2R0FBZiIsImZpbGUiOiIuL3NyYy9qcy91dGlscy9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vdXRpbHMnO1xuXG5pZiAoIXdpbmRvdy5jbHNwVXRpbHMpIHtcbiAgd2luZG93LmNsc3BVdGlscyA9IHV0aWxzO1xufVxuXG5leHBvcnQgZGVmYXVsdCB1dGlscztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/js/utils/index.js\n");

/***/ }),

/***/ "./src/js/utils/logger.js":
/*!********************************!*\
  !*** ./src/js/utils/logger.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n/* eslint no-console: off */\n\n/**\n * We use this in the router as well, so keep it light and ES5!\n */\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (function (logLevel) {\n  function Logger(prefix) {\n    if (logLevel === undefined) {\n      // The logLevel may be set in localstorage\n      // e.g. localStorage.setItem('skyline.clspPlugin.logLevel', 3), then refresh\n      logLevel = isNaN(Number(window.localStorage.getItem('skyline.clspPlugin.logLevel'))) ? 1 : Number(window.localStorage.getItem('skyline.clspPlugin.logLevel'));\n      window.localStorage.setItem('skyline.clspPlugin.logLevel', logLevel);\n    }\n\n    this.logLevel = logLevel;\n    this.prefix = prefix;\n  }\n\n  Logger.factory = function (prefix) {\n    return new Logger(prefix || '');\n  };\n\n  Logger.prototype._constructMessage = function (type, message) {\n    if (!this.prefix) {\n      return message;\n    }\n\n    return this.prefix + ' (' + type + ')' + ' --> ' + message;\n  };\n\n  Logger.prototype.silly = function (message) {\n    if (this.logLevel >= 4) {\n      console.log(this._constructMessage('silly', message));\n    }\n  };\n\n  Logger.prototype.debug = function (message) {\n    if (this.logLevel >= 3) {\n      console.log(this._constructMessage('debug', message));\n    }\n  };\n\n  Logger.prototype.info = function (message) {\n    if (this.logLevel >= 2) {\n      console.log(this._constructMessage('info', message));\n    }\n  };\n\n  Logger.prototype.warn = function (message) {\n    if (this.logLevel >= 1) {\n      console.warn(this._constructMessage('warn', message));\n    }\n  };\n\n  Logger.prototype.error = function (message) {\n    console.error(this._constructMessage('error', message));\n  };\n\n  return Logger;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvdXRpbHMvbG9nZ2VyLmpzPzkzNzEiXSwibmFtZXMiOlsibG9nTGV2ZWwiLCJMb2dnZXIiLCJwcmVmaXgiLCJ1bmRlZmluZWQiLCJpc05hTiIsIk51bWJlciIsIndpbmRvdyIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJzZXRJdGVtIiwiZmFjdG9yeSIsInByb3RvdHlwZSIsIl9jb25zdHJ1Y3RNZXNzYWdlIiwidHlwZSIsIm1lc3NhZ2UiLCJzaWxseSIsImNvbnNvbGUiLCJsb2ciLCJkZWJ1ZyIsImluZm8iLCJ3YXJuIiwiZXJyb3IiXSwibWFwcGluZ3MiOiJBQUFBO0FBQWE7QUFFYjs7QUFFQTs7OztBQUllLHlFQUFVQSxRQUFWLEVBQW9CO0FBQ2pDLFdBQVNDLE1BQVQsQ0FBaUJDLE1BQWpCLEVBQXlCO0FBQ3ZCLFFBQUlGLFFBQVEsS0FBS0csU0FBakIsRUFBNEI7QUFDMUI7QUFDQTtBQUNBSCxjQUFRLEdBQUdJLEtBQUssQ0FBQ0MsTUFBTSxDQUFDQyxNQUFNLENBQUNDLFlBQVAsQ0FBb0JDLE9BQXBCLENBQTRCLDZCQUE1QixDQUFELENBQVAsQ0FBTCxHQUNQLENBRE8sR0FFUEgsTUFBTSxDQUFDQyxNQUFNLENBQUNDLFlBQVAsQ0FBb0JDLE9BQXBCLENBQTRCLDZCQUE1QixDQUFELENBRlY7QUFJQUYsWUFBTSxDQUFDQyxZQUFQLENBQW9CRSxPQUFwQixDQUE0Qiw2QkFBNUIsRUFBMkRULFFBQTNEO0FBQ0Q7O0FBRUQsU0FBS0EsUUFBTCxHQUFnQkEsUUFBaEI7QUFDQSxTQUFLRSxNQUFMLEdBQWNBLE1BQWQ7QUFDRDs7QUFFREQsUUFBTSxDQUFDUyxPQUFQLEdBQWlCLFVBQVVSLE1BQVYsRUFBa0I7QUFDakMsV0FBTyxJQUFJRCxNQUFKLENBQVdDLE1BQU0sSUFBSSxFQUFyQixDQUFQO0FBQ0QsR0FGRDs7QUFJQUQsUUFBTSxDQUFDVSxTQUFQLENBQWlCQyxpQkFBakIsR0FBcUMsVUFBVUMsSUFBVixFQUFnQkMsT0FBaEIsRUFBeUI7QUFDNUQsUUFBSSxDQUFDLEtBQUtaLE1BQVYsRUFBa0I7QUFDaEIsYUFBT1ksT0FBUDtBQUNEOztBQUVELFdBQU8sS0FBS1osTUFBTCxHQUFjLElBQWQsR0FBcUJXLElBQXJCLEdBQTRCLEdBQTVCLEdBQWtDLE9BQWxDLEdBQTRDQyxPQUFuRDtBQUNELEdBTkQ7O0FBUUFiLFFBQU0sQ0FBQ1UsU0FBUCxDQUFpQkksS0FBakIsR0FBeUIsVUFBVUQsT0FBVixFQUFtQjtBQUMxQyxRQUFJLEtBQUtkLFFBQUwsSUFBaUIsQ0FBckIsRUFBd0I7QUFDdEJnQixhQUFPLENBQUNDLEdBQVIsQ0FBWSxLQUFLTCxpQkFBTCxDQUF1QixPQUF2QixFQUFnQ0UsT0FBaEMsQ0FBWjtBQUNEO0FBQ0YsR0FKRDs7QUFNQWIsUUFBTSxDQUFDVSxTQUFQLENBQWlCTyxLQUFqQixHQUF5QixVQUFVSixPQUFWLEVBQW1CO0FBQzFDLFFBQUksS0FBS2QsUUFBTCxJQUFpQixDQUFyQixFQUF3QjtBQUN0QmdCLGFBQU8sQ0FBQ0MsR0FBUixDQUFZLEtBQUtMLGlCQUFMLENBQXVCLE9BQXZCLEVBQWdDRSxPQUFoQyxDQUFaO0FBQ0Q7QUFDRixHQUpEOztBQU1BYixRQUFNLENBQUNVLFNBQVAsQ0FBaUJRLElBQWpCLEdBQXdCLFVBQVVMLE9BQVYsRUFBbUI7QUFDekMsUUFBSSxLQUFLZCxRQUFMLElBQWlCLENBQXJCLEVBQXdCO0FBQ3RCZ0IsYUFBTyxDQUFDQyxHQUFSLENBQVksS0FBS0wsaUJBQUwsQ0FBdUIsTUFBdkIsRUFBK0JFLE9BQS9CLENBQVo7QUFDRDtBQUNGLEdBSkQ7O0FBTUFiLFFBQU0sQ0FBQ1UsU0FBUCxDQUFpQlMsSUFBakIsR0FBd0IsVUFBVU4sT0FBVixFQUFtQjtBQUN6QyxRQUFJLEtBQUtkLFFBQUwsSUFBaUIsQ0FBckIsRUFBd0I7QUFDdEJnQixhQUFPLENBQUNJLElBQVIsQ0FBYSxLQUFLUixpQkFBTCxDQUF1QixNQUF2QixFQUErQkUsT0FBL0IsQ0FBYjtBQUNEO0FBQ0YsR0FKRDs7QUFNQWIsUUFBTSxDQUFDVSxTQUFQLENBQWlCVSxLQUFqQixHQUF5QixVQUFVUCxPQUFWLEVBQW1CO0FBQzFDRSxXQUFPLENBQUNLLEtBQVIsQ0FBYyxLQUFLVCxpQkFBTCxDQUF1QixPQUF2QixFQUFnQ0UsT0FBaEMsQ0FBZDtBQUNELEdBRkQ7O0FBSUEsU0FBT2IsTUFBUDtBQUNELEMiLCJmaWxlIjoiLi9zcmMvanMvdXRpbHMvbG9nZ2VyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKiBlc2xpbnQgbm8tY29uc29sZTogb2ZmICovXG5cbi8qKlxuICogV2UgdXNlIHRoaXMgaW4gdGhlIHJvdXRlciBhcyB3ZWxsLCBzbyBrZWVwIGl0IGxpZ2h0IGFuZCBFUzUhXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKGxvZ0xldmVsKSB7XG4gIGZ1bmN0aW9uIExvZ2dlciAocHJlZml4KSB7XG4gICAgaWYgKGxvZ0xldmVsID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIFRoZSBsb2dMZXZlbCBtYXkgYmUgc2V0IGluIGxvY2Fsc3RvcmFnZVxuICAgICAgLy8gZS5nLiBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnc2t5bGluZS5jbHNwUGx1Z2luLmxvZ0xldmVsJywgMyksIHRoZW4gcmVmcmVzaFxuICAgICAgbG9nTGV2ZWwgPSBpc05hTihOdW1iZXIod2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCdza3lsaW5lLmNsc3BQbHVnaW4ubG9nTGV2ZWwnKSkpXG4gICAgICAgID8gMVxuICAgICAgICA6IE51bWJlcih3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3NreWxpbmUuY2xzcFBsdWdpbi5sb2dMZXZlbCcpKTtcblxuICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKCdza3lsaW5lLmNsc3BQbHVnaW4ubG9nTGV2ZWwnLCBsb2dMZXZlbCk7XG4gICAgfVxuXG4gICAgdGhpcy5sb2dMZXZlbCA9IGxvZ0xldmVsO1xuICAgIHRoaXMucHJlZml4ID0gcHJlZml4O1xuICB9XG5cbiAgTG9nZ2VyLmZhY3RvcnkgPSBmdW5jdGlvbiAocHJlZml4KSB7XG4gICAgcmV0dXJuIG5ldyBMb2dnZXIocHJlZml4IHx8ICcnKTtcbiAgfTtcblxuICBMb2dnZXIucHJvdG90eXBlLl9jb25zdHJ1Y3RNZXNzYWdlID0gZnVuY3Rpb24gKHR5cGUsIG1lc3NhZ2UpIHtcbiAgICBpZiAoIXRoaXMucHJlZml4KSB7XG4gICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5wcmVmaXggKyAnICgnICsgdHlwZSArICcpJyArICcgLS0+ICcgKyBtZXNzYWdlO1xuICB9O1xuXG4gIExvZ2dlci5wcm90b3R5cGUuc2lsbHkgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgIGlmICh0aGlzLmxvZ0xldmVsID49IDQpIHtcbiAgICAgIGNvbnNvbGUubG9nKHRoaXMuX2NvbnN0cnVjdE1lc3NhZ2UoJ3NpbGx5JywgbWVzc2FnZSkpO1xuICAgIH1cbiAgfTtcblxuICBMb2dnZXIucHJvdG90eXBlLmRlYnVnID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICBpZiAodGhpcy5sb2dMZXZlbCA+PSAzKSB7XG4gICAgICBjb25zb2xlLmxvZyh0aGlzLl9jb25zdHJ1Y3RNZXNzYWdlKCdkZWJ1ZycsIG1lc3NhZ2UpKTtcbiAgICB9XG4gIH07XG5cbiAgTG9nZ2VyLnByb3RvdHlwZS5pbmZvID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICBpZiAodGhpcy5sb2dMZXZlbCA+PSAyKSB7XG4gICAgICBjb25zb2xlLmxvZyh0aGlzLl9jb25zdHJ1Y3RNZXNzYWdlKCdpbmZvJywgbWVzc2FnZSkpO1xuICAgIH1cbiAgfTtcblxuICBMb2dnZXIucHJvdG90eXBlLndhcm4gPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgIGlmICh0aGlzLmxvZ0xldmVsID49IDEpIHtcbiAgICAgIGNvbnNvbGUud2Fybih0aGlzLl9jb25zdHJ1Y3RNZXNzYWdlKCd3YXJuJywgbWVzc2FnZSkpO1xuICAgIH1cbiAgfTtcblxuICBMb2dnZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICBjb25zb2xlLmVycm9yKHRoaXMuX2NvbnN0cnVjdE1lc3NhZ2UoJ2Vycm9yJywgbWVzc2FnZSkpO1xuICB9O1xuXG4gIHJldHVybiBMb2dnZXI7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/js/utils/logger.js\n");

/***/ }),

/***/ "./src/js/utils/utils.js":
/*!*******************************!*\
  !*** ./src/js/utils/utils.js ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _package_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../package.json */ \"./package.json\");\nvar _package_json__WEBPACK_IMPORTED_MODULE_0___namespace = /*#__PURE__*/__webpack_require__.t(/*! ../../../package.json */ \"./package.json\", 1);\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/logger */ \"./src/js/utils/logger.js\");\n\n\n\n\nvar PLUGIN_NAME = 'clsp';\nvar MINIMUM_CHROME_VERSION = 52; // @todo - this mime type, though used in the videojs plugin, and\n// seemingly enforced, is not actually enforced.  The only enforcement\n// done is requiring the user provide this string on the video element\n// in the DOM.  The codecs that are supplied by the SFS's vary.  Here\n// are some \"valid\", though not enforced mimeCodec values I have come\n// across:\n// video/mp4; codecs=\"avc1.4DE016\"\n// video/mp4; codecs=\"avc1.42E00C\"\n// video/mp4; codecs=\"avc1.42E00D\"\n\nvar SUPPORTED_MIME_TYPE = \"video/mp4; codecs='avc1.42E01E'\"; // The streams must not timeout earlier than this to be able to support Vero\n// tours and high-quality streams.\n\nvar DEFAULT_STREAM_TIMEOUT = 20;\nvar logger = Object(_utils_logger__WEBPACK_IMPORTED_MODULE_1__[\"default\"])().factory();\n\nfunction browserIsCompatable() {\n  try {\n    mediaSourceExtensionsCheck();\n  } catch (error) {\n    logger.error(error);\n    return false;\n  } // We don't support Internet Explorer\n\n\n  var isInternetExplorer = navigator.userAgent.toLowerCase().indexOf('trident') > -1;\n\n  if (isInternetExplorer) {\n    logger.debug('Detected Internet Explorer browser');\n    return false;\n  } // We don't support Edge (yet)\n\n\n  var isEdge = navigator.userAgent.toLowerCase().indexOf('edge') > -1;\n\n  if (isEdge) {\n    logger.debug('Detected Edge browser');\n    return false;\n  } // We support a limited number of streams in Firefox\n  // no specific version of firefox required for now.\n\n\n  var isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1;\n\n  if (isFirefox) {\n    logger.debug('Detected Firefox browser');\n    return true;\n  } // Most browsers have \"Chrome\" in their user agent.  The above filters rule\n  // out Internet Explorer and Edge, so we are going to assume that if we're at\n  // this point, we're really dealing with Chrome.\n\n\n  var isChrome = Boolean(window.chrome);\n\n  if (!isChrome) {\n    return false;\n  }\n\n  try {\n    // Rather than accounting for match returning null, we'll catch the error\n    var chromeVersion = parseInt(navigator.userAgent.match(/Chrom(e|ium)\\/([0-9]+)\\./)[2], 10);\n    logger.debug(\"Detected Chrome version \".concat(chromeVersion));\n    return chromeVersion >= MINIMUM_CHROME_VERSION;\n  } catch (error) {\n    logger.error(error);\n    return false;\n  }\n}\n\nfunction mediaSourceExtensionsCheck() {\n  // For the MAC\n  window.MediaSource = window.MediaSource || window.WebKitMediaSource;\n\n  if (!window.MediaSource) {\n    throw new Error('Media Source Extensions not supported in your browser: Claris Live Streaming will not work!');\n  }\n}\n\nfunction isSupportedMimeType(mimeType) {\n  return mimeType === SUPPORTED_MIME_TYPE;\n}\n\nfunction _getWindowStateNames() {\n  logger.debug('Determining Page_Visibility_API property names.'); // @see - https://developer.mozilla.org/en-US/docs/Web/API/Page_Visibility_API\n\n  if (typeof document.hidden !== 'undefined') {\n    logger.debug('Using standard Page_Visibility_API property names.');\n    return {\n      hiddenStateName: 'hidden',\n      visibilityChangeEventName: 'visibilitychange'\n    };\n  }\n\n  if (typeof document.msHidden !== 'undefined') {\n    logger.debug('Using Microsoft Page_Visibility_API property names.');\n    return {\n      hiddenStateName: 'msHidden',\n      visibilityChangeEventName: 'msvisibilitychange'\n    };\n  }\n\n  if (typeof document.webkitHidden !== 'undefined') {\n    logger.debug('Using Webkit Page_Visibility_API property names.');\n    return {\n      hiddenStateName: 'webkitHidden',\n      visibilityChangeEventName: 'webkitvisibilitychange'\n    };\n  }\n\n  logger.error('Unable to use the page visibility api - switching tabs and minimizing the page may result in slow downs and page crashes.');\n  return {\n    hiddenStateName: '',\n    visibilityChangeEventName: ''\n  };\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  version: _package_json__WEBPACK_IMPORTED_MODULE_0__[\"version\"],\n  name: PLUGIN_NAME,\n  supported: browserIsCompatable,\n  mediaSourceExtensionsCheck: mediaSourceExtensionsCheck,\n  isSupportedMimeType: isSupportedMimeType,\n  windowStateNames: _getWindowStateNames(),\n  DEFAULT_STREAM_TIMEOUT: DEFAULT_STREAM_TIMEOUT\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/utils/utils.js\n");

/***/ }),

/***/ "./src/js/video-js-plugin/MqttHandler.js":
/*!***********************************************!*\
  !*** ./src/js/video-js-plugin/MqttHandler.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return MqttHandler; });\n/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! video.js */ \"video.js\");\n/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(video_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var uuid_v4__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uuid/v4 */ \"./node_modules/uuid/v4.js\");\n/* harmony import */ var uuid_v4__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(uuid_v4__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _iov_IovCollection__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../iov/IovCollection */ \"./src/js/iov/IovCollection.js\");\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/logger */ \"./src/js/utils/logger.js\");\n // This is configured as an external library by webpack, so the caller must\n// provide videojs on `window`\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\nvar Component = video_js__WEBPACK_IMPORTED_MODULE_0___default.a.getComponent('Component');\nvar DEFAULT_CHANGE_SOURCE_MAX_WAIT = 5000;\n\nvar MqttHandler =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MqttHandler, _Component);\n\n  function MqttHandler(source, tech, options) {\n    var _this;\n\n    _classCallCheck(this, MqttHandler);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MqttHandler).call(this, tech, options.mqtt));\n\n    _defineProperty(_assertThisInitialized(_this), \"onChangeSource\", function (event, _ref) {\n      var url = _ref.url;\n\n      _this.logger.debug(\"changeSource on player \\\"\".concat(_this.id, \"\\\"\\\"\"));\n\n      if (!url) {\n        throw new Error('Unable to change source because there is no url!');\n      }\n\n      var clone = _this.iov.clone(url);\n\n      clone.initialize(); // When the tab is not in focus, chrome doesn't handle things the same\n      // way as when the tab is in focus, and it seems that the result of that\n      // is that the \"firstFrameShown\" event never fires.  Having the Iov be\n      // updated on a delay in case the \"firstFrameShown\" takes too long will\n      // ensure that the old Iovs are destroyed, ensuring that unnecessary\n      // socket connections, etc. are not being used, as this can cause the\n      // browser to crash.\n      // Note that if there is a better way to do this, it would likely reduce\n      // the number of try/catch blocks and null checks in the IovPlayer and\n      // MSEWrapper, but I don't think that is likely to happen until the MSE\n      // is standardized, and even then, we may be subject to non-intuitive\n      // behavior based on tab switching, etc.\n\n      setTimeout(function () {\n        _this.updateIov(clone);\n      }, _this.changeSourceMaxWait); // Under normal circumstances, meaning when the tab is in focus, we want\n      // to respond by switching the Iov when the new Iov Player has something\n      // to display\n\n      clone.player.on('firstFrameShown', function () {\n        _this.updateIov(clone);\n      });\n    });\n\n    _this.logger = Object(_utils_logger__WEBPACK_IMPORTED_MODULE_3__[\"default\"])().factory('MqttHandler');\n\n    _this.logger.debug('constructor');\n\n    _this.tech_ = tech;\n    _this.source_ = source; // @todo - is there a better way to do this where we don't pollute the\n    // top level namespace?\n\n    _this.changeSourceMaxWait = options.changeSourceMaxWait || DEFAULT_CHANGE_SOURCE_MAX_WAIT;\n    _this.iov = null;\n    _this.player = null;\n    return _this;\n  }\n\n  _createClass(MqttHandler, [{\n    key: \"createIov\",\n    value: function () {\n      var _createIov = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(player) {\n        var _this2 = this;\n\n        var videoId, videoJsVideoElement, videoElementParent, videoElement, iov;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.logger.debug('createIov');\n                this.player = player;\n                videoId = \"clsp-video-\".concat(uuid_v4__WEBPACK_IMPORTED_MODULE_1___default()());\n                videoJsVideoElement = this.player.el().firstChild;\n                videoElementParent = videoJsVideoElement.parentNode; // when videojs initializes the video element (or something like that),\n                // it creates events and listeners on that element that it uses, however\n                // these events interfere with our ability to play clsp streams.  Cloning\n                // the element like this and reinserting it is a blunt instrument to remove\n                // all of the videojs events so that we are in control of the player.\n\n                videoElement = videoJsVideoElement.cloneNode();\n                videoElement.setAttribute('id', videoId);\n                videoElementParent.insertBefore(videoElement, videoJsVideoElement);\n                _context.next = 10;\n                return _iov_IovCollection__WEBPACK_IMPORTED_MODULE_2__[\"default\"].asSingleton().create(videoId, this.source_.src);\n\n              case 10:\n                iov = _context.sent;\n                this.player.on('ready', function () {\n                  if (_this2.onReadyAlreadyCalled) {\n                    _this2.logger.warn('tried to use this player more than once...');\n\n                    return;\n                  }\n\n                  _this2.onReadyAlreadyCalled = true;\n\n                  var videoTag = _this2.player.children()[0]; // @todo - there must be a better way to determine autoplay...\n\n\n                  if (videoTag.getAttribute('autoplay') !== null) {\n                    // playButton.trigger('click');\n                    _this2.player.trigger('play', videoTag);\n                  }\n\n                  iov.on('firstFrameShown', function () {\n                    _this2.player.trigger('firstFrameShown');\n\n                    videoTag.style.display = 'none';\n                  });\n                  iov.on('videoReceived', function () {\n                    // reset the timeout monitor from videojs-errors\n                    _this2.player.trigger('timeupdate');\n                  });\n                  iov.on('videoInfoReceived', function () {\n                    // reset the timeout monitor from videojs-errors\n                    _this2.player.trigger('timeupdate');\n                  });\n\n                  _this2.player.on('changesrc', _this2.onChangeSource);\n                });\n                this.updateIov(iov); // this.iov.on('unsupportedMimeCodec', (error) => {\n                //   this.videoPlayer.errors.extend({\n                //     PLAYER_ERR_Iov: {\n                //       headline: 'Error Playing Stream',\n                //       message: error,\n                //     },\n                //   });\n                //   this.videoPlayer.error({\n                //     code: 'PLAYER_ERR_Iov',\n                //   });\n                // });\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function createIov(_x) {\n        return _createIov.apply(this, arguments);\n      }\n\n      return createIov;\n    }()\n  }, {\n    key: \"updateIov\",\n    value: function updateIov(iov) {\n      this.logger.debug('updateIov');\n\n      if (this.iov) {\n        // If the Iov is the same, do nothing\n        if (this.iov.id === iov.id) {\n          return;\n        }\n\n        _iov_IovCollection__WEBPACK_IMPORTED_MODULE_2__[\"default\"].asSingleton().remove(this.iov.id).add(iov.id, iov);\n      }\n\n      this.iov = iov;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.logger.debug('destroy');\n\n      if (this.destroyed) {\n        return;\n      }\n\n      this.destroyed = true;\n\n      if (this.onReadyAlreadyCalled) {\n        this.player.off('changesrc', this.onChangeSource);\n      }\n\n      _iov_IovCollection__WEBPACK_IMPORTED_MODULE_2__[\"default\"].asSingleton().remove(this.iov.id);\n      this.iov = null;\n      this.player = null;\n    }\n  }]);\n\n  return MqttHandler;\n}(Component);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/video-js-plugin/MqttHandler.js\n");

/***/ }),

/***/ "./src/js/video-js-plugin/MqttSourceHandler.js":
/*!*****************************************************!*\
  !*** ./src/js/video-js-plugin/MqttSourceHandler.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! video.js */ \"video.js\");\n/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(video_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/logger */ \"./src/js/utils/logger.js\");\n/* harmony import */ var _MqttHandler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./MqttHandler */ \"./src/js/video-js-plugin/MqttHandler.js\");\n // This is configured as an external library by webpack, so the caller must\n// provide videojs on `window`\n\n\n\n\nvar SUPPORTED_MIME_TYPE = \"video/mp4; codecs='avc1.42E01E'\";\n/* harmony default export */ __webpack_exports__[\"default\"] = (function () {\n  var logger = Object(_utils_logger__WEBPACK_IMPORTED_MODULE_1__[\"default\"])().factory('MqttSourceHandler');\n  return function (mode) {\n    var obj = {\n      canHandleSource: function canHandleSource(srcObj) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        logger.debug('canHandleSource');\n\n        if (!srcObj.src) {\n          logger.debug(\"srcObj doesn't contain src\");\n          return false;\n        }\n\n        if (!srcObj.src.startsWith('clsp')) {\n          logger.debug('srcObj.src is not clsp protocol');\n          return false;\n        } // Note that we used to do a browser compatibility check here, but if\n        // we return false when the browser does not support CLSP, videojs's\n        // failover mechanisms do not continue.  Meaning, if we return false\n        // here, and a second HLS source is supplied in the video tag (for\n        // example), videojs will never try to play the HLS url with the HLS\n        // tech.\n\n\n        return obj.canPlayType(srcObj.type);\n      },\n      handleSource: function handleSource(source, tech) {\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        logger.debug('handleSource');\n        var localOptions = video_js__WEBPACK_IMPORTED_MODULE_0___default.a.mergeOptions(video_js__WEBPACK_IMPORTED_MODULE_0___default.a.options, options, {\n          mqtt: {\n            mode: mode\n          }\n        });\n        tech.mqtt = new _MqttHandler__WEBPACK_IMPORTED_MODULE_2__[\"default\"](source, tech, localOptions);\n        return tech.mqtt;\n      },\n      canPlayType: function canPlayType(type) {\n        logger.debug('canPlayType');\n\n        if (type === SUPPORTED_MIME_TYPE) {\n          return 'maybe';\n        } // eslint-disable-next-line no-console\n\n\n        console.error(\"clsp type='\".concat(type, \"' rejected\"));\n        return '';\n      }\n    };\n    return obj;\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvdmlkZW8tanMtcGx1Z2luL01xdHRTb3VyY2VIYW5kbGVyLmpzPzkwMGYiXSwibmFtZXMiOlsiU1VQUE9SVEVEX01JTUVfVFlQRSIsImxvZ2dlciIsIkxvZ2dlciIsImZhY3RvcnkiLCJtb2RlIiwib2JqIiwiY2FuSGFuZGxlU291cmNlIiwic3JjT2JqIiwib3B0aW9ucyIsImRlYnVnIiwic3JjIiwic3RhcnRzV2l0aCIsImNhblBsYXlUeXBlIiwidHlwZSIsImhhbmRsZVNvdXJjZSIsInNvdXJjZSIsInRlY2giLCJsb2NhbE9wdGlvbnMiLCJ2aWRlb2pzIiwibWVyZ2VPcHRpb25zIiwibXF0dCIsIk1xdHRIYW5kbGVyIiwiY29uc29sZSIsImVycm9yIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0NBRUE7QUFDQTs7QUFDQTtBQUVBO0FBQ0E7QUFFQSxJQUFNQSxtQkFBbUIsR0FBRyxpQ0FBNUI7QUFFZSwyRUFBWTtBQUN6QixNQUFNQyxNQUFNLEdBQUdDLDZEQUFNLEdBQUdDLE9BQVQsQ0FBaUIsbUJBQWpCLENBQWY7QUFFQSxTQUFPLFVBQVVDLElBQVYsRUFBZ0I7QUFDckIsUUFBTUMsR0FBRyxHQUFHO0FBQ1ZDLHFCQUFlLEVBQUUseUJBQVVDLE1BQVYsRUFBZ0M7QUFBQSxZQUFkQyxPQUFjLHVFQUFKLEVBQUk7QUFDL0NQLGNBQU0sQ0FBQ1EsS0FBUCxDQUFhLGlCQUFiOztBQUVBLFlBQUksQ0FBQ0YsTUFBTSxDQUFDRyxHQUFaLEVBQWlCO0FBQ2ZULGdCQUFNLENBQUNRLEtBQVAsQ0FBYSw0QkFBYjtBQUNBLGlCQUFPLEtBQVA7QUFDRDs7QUFFRCxZQUFJLENBQUNGLE1BQU0sQ0FBQ0csR0FBUCxDQUFXQyxVQUFYLENBQXNCLE1BQXRCLENBQUwsRUFBb0M7QUFDbENWLGdCQUFNLENBQUNRLEtBQVAsQ0FBYSxpQ0FBYjtBQUNBLGlCQUFPLEtBQVA7QUFDRCxTQVg4QyxDQWEvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBLGVBQU9KLEdBQUcsQ0FBQ08sV0FBSixDQUFnQkwsTUFBTSxDQUFDTSxJQUF2QixDQUFQO0FBQ0QsT0F0QlM7QUF1QlZDLGtCQUFZLEVBQUUsc0JBQ1pDLE1BRFksRUFFWkMsSUFGWSxFQUlaO0FBQUEsWUFEQVIsT0FDQSx1RUFEVSxFQUNWO0FBQ0FQLGNBQU0sQ0FBQ1EsS0FBUCxDQUFhLGNBQWI7QUFFQSxZQUFNUSxZQUFZLEdBQUdDLCtDQUFPLENBQUNDLFlBQVIsQ0FDbkJELCtDQUFPLENBQUNWLE9BRFcsRUFFbkJBLE9BRm1CLEVBR25CO0FBQ0VZLGNBQUksRUFBRTtBQUNKaEIsZ0JBQUksRUFBSkE7QUFESTtBQURSLFNBSG1CLENBQXJCO0FBVUFZLFlBQUksQ0FBQ0ksSUFBTCxHQUFZLElBQUlDLG9EQUFKLENBQ1ZOLE1BRFUsRUFFVkMsSUFGVSxFQUdWQyxZQUhVLENBQVo7QUFNQSxlQUFPRCxJQUFJLENBQUNJLElBQVo7QUFDRCxPQS9DUztBQWdEVlIsaUJBQVcsRUFBRSxxQkFBVUMsSUFBVixFQUFnQjtBQUMzQlosY0FBTSxDQUFDUSxLQUFQLENBQWEsYUFBYjs7QUFFQSxZQUFJSSxJQUFJLEtBQUtiLG1CQUFiLEVBQWtDO0FBQ2hDLGlCQUFPLE9BQVA7QUFDRCxTQUwwQixDQU8zQjs7O0FBQ0FzQixlQUFPLENBQUNDLEtBQVIsc0JBQTRCVixJQUE1QjtBQUVBLGVBQU8sRUFBUDtBQUNEO0FBM0RTLEtBQVo7QUE4REEsV0FBT1IsR0FBUDtBQUNELEdBaEVEO0FBaUVELEMiLCJmaWxlIjoiLi9zcmMvanMvdmlkZW8tanMtcGx1Z2luL01xdHRTb3VyY2VIYW5kbGVyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vLyBUaGlzIGlzIGNvbmZpZ3VyZWQgYXMgYW4gZXh0ZXJuYWwgbGlicmFyeSBieSB3ZWJwYWNrLCBzbyB0aGUgY2FsbGVyIG11c3Rcbi8vIHByb3ZpZGUgdmlkZW9qcyBvbiBgd2luZG93YFxuaW1wb3J0IHZpZGVvanMgZnJvbSAndmlkZW8uanMnO1xuXG5pbXBvcnQgTG9nZ2VyIGZyb20gJy4uL3V0aWxzL2xvZ2dlcic7XG5pbXBvcnQgTXF0dEhhbmRsZXIgZnJvbSAnLi9NcXR0SGFuZGxlcic7XG5cbmNvbnN0IFNVUFBPUlRFRF9NSU1FX1RZUEUgPSBcInZpZGVvL21wNDsgY29kZWNzPSdhdmMxLjQyRTAxRSdcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKCkge1xuICBjb25zdCBsb2dnZXIgPSBMb2dnZXIoKS5mYWN0b3J5KCdNcXR0U291cmNlSGFuZGxlcicpO1xuXG4gIHJldHVybiBmdW5jdGlvbiAobW9kZSkge1xuICAgIGNvbnN0IG9iaiA9IHtcbiAgICAgIGNhbkhhbmRsZVNvdXJjZTogZnVuY3Rpb24gKHNyY09iaiwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZygnY2FuSGFuZGxlU291cmNlJyk7XG5cbiAgICAgICAgaWYgKCFzcmNPYmouc3JjKSB7XG4gICAgICAgICAgbG9nZ2VyLmRlYnVnKFwic3JjT2JqIGRvZXNuJ3QgY29udGFpbiBzcmNcIik7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFzcmNPYmouc3JjLnN0YXJ0c1dpdGgoJ2Nsc3AnKSkge1xuICAgICAgICAgIGxvZ2dlci5kZWJ1Zygnc3JjT2JqLnNyYyBpcyBub3QgY2xzcCBwcm90b2NvbCcpO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE5vdGUgdGhhdCB3ZSB1c2VkIHRvIGRvIGEgYnJvd3NlciBjb21wYXRpYmlsaXR5IGNoZWNrIGhlcmUsIGJ1dCBpZlxuICAgICAgICAvLyB3ZSByZXR1cm4gZmFsc2Ugd2hlbiB0aGUgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IENMU1AsIHZpZGVvanMnc1xuICAgICAgICAvLyBmYWlsb3ZlciBtZWNoYW5pc21zIGRvIG5vdCBjb250aW51ZS4gIE1lYW5pbmcsIGlmIHdlIHJldHVybiBmYWxzZVxuICAgICAgICAvLyBoZXJlLCBhbmQgYSBzZWNvbmQgSExTIHNvdXJjZSBpcyBzdXBwbGllZCBpbiB0aGUgdmlkZW8gdGFnIChmb3JcbiAgICAgICAgLy8gZXhhbXBsZSksIHZpZGVvanMgd2lsbCBuZXZlciB0cnkgdG8gcGxheSB0aGUgSExTIHVybCB3aXRoIHRoZSBITFNcbiAgICAgICAgLy8gdGVjaC5cblxuICAgICAgICByZXR1cm4gb2JqLmNhblBsYXlUeXBlKHNyY09iai50eXBlKTtcbiAgICAgIH0sXG4gICAgICBoYW5kbGVTb3VyY2U6IGZ1bmN0aW9uIChcbiAgICAgICAgc291cmNlLFxuICAgICAgICB0ZWNoLFxuICAgICAgICBvcHRpb25zID0ge30sXG4gICAgICApIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKCdoYW5kbGVTb3VyY2UnKTtcblxuICAgICAgICBjb25zdCBsb2NhbE9wdGlvbnMgPSB2aWRlb2pzLm1lcmdlT3B0aW9ucyhcbiAgICAgICAgICB2aWRlb2pzLm9wdGlvbnMsXG4gICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBtcXR0OiB7XG4gICAgICAgICAgICAgIG1vZGUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgICk7XG5cbiAgICAgICAgdGVjaC5tcXR0ID0gbmV3IE1xdHRIYW5kbGVyKFxuICAgICAgICAgIHNvdXJjZSxcbiAgICAgICAgICB0ZWNoLFxuICAgICAgICAgIGxvY2FsT3B0aW9ucyxcbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm4gdGVjaC5tcXR0O1xuICAgICAgfSxcbiAgICAgIGNhblBsYXlUeXBlOiBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICBsb2dnZXIuZGVidWcoJ2NhblBsYXlUeXBlJyk7XG5cbiAgICAgICAgaWYgKHR5cGUgPT09IFNVUFBPUlRFRF9NSU1FX1RZUEUpIHtcbiAgICAgICAgICByZXR1cm4gJ21heWJlJztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYGNsc3AgdHlwZT0nJHt0eXBlfScgcmVqZWN0ZWRgKTtcblxuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9LFxuICAgIH07XG5cbiAgICByZXR1cm4gb2JqO1xuICB9O1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/js/video-js-plugin/MqttSourceHandler.js\n");

/***/ }),

/***/ "./src/js/video-js-plugin/index.js":
/*!*****************************************!*\
  !*** ./src/js/video-js-plugin/index.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var srcdoc_polyfill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! srcdoc-polyfill */ \"./node_modules/srcdoc-polyfill/srcdoc-polyfill.js\");\n/* harmony import */ var srcdoc_polyfill__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(srcdoc_polyfill__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/ */ \"./src/js/utils/index.js\");\n/* harmony import */ var _plugin__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./plugin */ \"./src/js/video-js-plugin/plugin.js\");\n/* harmony import */ var _styles_videojs_mse_over_clsp_scss__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../styles/videojs-mse-over-clsp.scss */ \"./src/styles/videojs-mse-over-clsp.scss\");\n/* harmony import */ var _styles_videojs_mse_over_clsp_scss__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_styles_videojs_mse_over_clsp_scss__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\n\n\nvar clspPlugin = Object(_plugin__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(); // @todo - do not initialize the plugin by default, since that is a side\n// effect.  make the caller call the initialize function.  also, is it\n// possible to unregister the plugin?\n\nclspPlugin.register();\n/* harmony default export */ __webpack_exports__[\"default\"] = (clspPlugin);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvdmlkZW8tanMtcGx1Z2luL2luZGV4LmpzPzE2MGQiXSwibmFtZXMiOlsiY2xzcFBsdWdpbiIsInBsdWdpbiIsInJlZ2lzdGVyIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFhOztBQUViO0FBRUE7QUFDQTtBQUNBO0FBRUEsSUFBTUEsVUFBVSxHQUFHQyx1REFBTSxFQUF6QixDLENBRUE7QUFDQTtBQUNBOztBQUNBRCxVQUFVLENBQUNFLFFBQVg7QUFFZUYseUVBQWYiLCJmaWxlIjoiLi9zcmMvanMvdmlkZW8tanMtcGx1Z2luL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgJ3NyY2RvYy1wb2x5ZmlsbCc7XG5cbmltcG9ydCAnLi4vdXRpbHMvJztcbmltcG9ydCBwbHVnaW4gZnJvbSAnLi9wbHVnaW4nO1xuaW1wb3J0ICcuLi8uLi9zdHlsZXMvdmlkZW9qcy1tc2Utb3Zlci1jbHNwLnNjc3MnO1xuXG5jb25zdCBjbHNwUGx1Z2luID0gcGx1Z2luKCk7XG5cbi8vIEB0b2RvIC0gZG8gbm90IGluaXRpYWxpemUgdGhlIHBsdWdpbiBieSBkZWZhdWx0LCBzaW5jZSB0aGF0IGlzIGEgc2lkZVxuLy8gZWZmZWN0LiAgbWFrZSB0aGUgY2FsbGVyIGNhbGwgdGhlIGluaXRpYWxpemUgZnVuY3Rpb24uICBhbHNvLCBpcyBpdFxuLy8gcG9zc2libGUgdG8gdW5yZWdpc3RlciB0aGUgcGx1Z2luP1xuY2xzcFBsdWdpbi5yZWdpc3RlcigpO1xuXG5leHBvcnQgZGVmYXVsdCBjbHNwUGx1Z2luO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/js/video-js-plugin/index.js\n");

/***/ }),

/***/ "./src/js/video-js-plugin/plugin.js":
/*!******************************************!*\
  !*** ./src/js/video-js-plugin/plugin.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! video.js */ \"video.js\");\n/* harmony import */ var video_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(video_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _MqttSourceHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MqttSourceHandler */ \"./src/js/video-js-plugin/MqttSourceHandler.js\");\n/* harmony import */ var _utils___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/ */ \"./src/js/utils/index.js\");\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/logger */ \"./src/js/utils/logger.js\");\n // This is configured as an external library by webpack, so the caller must\n// provide videojs on `window`\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\nvar Plugin = video_js__WEBPACK_IMPORTED_MODULE_0___default.a.getPlugin('plugin'); // Note that the value can never be zero!\n\nvar VIDEOJS_ERRORS_PLAYER_CURRENT_TIME_MIN = 1;\nvar VIDEOJS_ERRORS_PLAYER_CURRENT_TIME_MAX = 20;\nvar logger = Object(_utils_logger__WEBPACK_IMPORTED_MODULE_3__[\"default\"])().factory('clsp-videojs-plugin');\nvar totalPluginCount = 0;\n/* harmony default export */ __webpack_exports__[\"default\"] = (function () {\n  var _class, _temp;\n\n  var defaultOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return _temp = _class =\n  /*#__PURE__*/\n  function (_Plugin) {\n    _inherits(ClspPlugin, _Plugin);\n\n    _createClass(ClspPlugin, null, [{\n      key: \"register\",\n      value: function register() {\n        if (video_js__WEBPACK_IMPORTED_MODULE_0___default.a.getPlugin(_utils___WEBPACK_IMPORTED_MODULE_2__[\"default\"].name)) {\n          throw new Error('You can only register the clsp plugin once, and it has already been registered.');\n        }\n\n        var sourceHandler = Object(_MqttSourceHandler__WEBPACK_IMPORTED_MODULE_1__[\"default\"])()('html5');\n        video_js__WEBPACK_IMPORTED_MODULE_0___default.a.getTech('Html5').registerSourceHandler(sourceHandler, 0);\n        video_js__WEBPACK_IMPORTED_MODULE_0___default.a.registerPlugin(_utils___WEBPACK_IMPORTED_MODULE_2__[\"default\"].name, ClspPlugin);\n        logger.debug('plugin registered');\n        return ClspPlugin;\n      }\n    }, {\n      key: \"getDefaultOptions\",\n      value: function getDefaultOptions() {\n        return {\n          /**\n           * The number of times to retry playing the video when there is an error\n           * that we know we can recover from.\n           *\n           * If a negative number is passed, retry indefinitely\n           * If 0 is passed, never retry\n           * If a positive number is passed, retry that many times\n           */\n          maxRetriesOnError: -1,\n          tourDuration: 10 * 1000,\n          enableMetrics: false,\n          videojsErrorsOptions: {}\n        };\n      }\n    }]);\n\n    function ClspPlugin(player, options) {\n      var _this;\n\n      _classCallCheck(this, ClspPlugin);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(ClspPlugin).call(this, player, options));\n\n      _defineProperty(_assertThisInitialized(_this), \"onVisibilityChange\", function () {\n        _this.logger.debug('tab visibility changed...');\n\n        if (document[_utils___WEBPACK_IMPORTED_MODULE_2__[\"default\"].windowStateNames.hiddenStateName]) {\n          // Continue to update the time, which will prevent videojs-errors from\n          // issuing a timeout error\n          _this.visibilityChangeInterval = setInterval(\n          /*#__PURE__*/\n          _asyncToGenerator(\n          /*#__PURE__*/\n          regeneratorRuntime.mark(function _callee() {\n            return regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _this.logger.debug('updating time...');\n\n                    _this.player.trigger('timeupdate');\n\n                  case 2:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee);\n          })), 2000);\n          return;\n        }\n\n        if (_this.visibilityChangeInterval) {\n          clearInterval(_this.visibilityChangeInterval);\n        }\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"onMqttHandlerError\", function () {\n        _this.logger.debug('handling mqtt error...');\n\n        var mqttHandler = _this.getMqttHandler();\n\n        mqttHandler.destroy();\n\n        _this.player.error({\n          // @todo - change the code to 'INSUFFICIENT_RESOURCES'\n          code: 0,\n          type: 'INSUFFICIENT_RESOURCES',\n          headline: 'Insufficient Resources',\n          message: 'The current hardware cannot support the current number of playing streams.'\n        });\n      });\n\n      _this.id = ++totalPluginCount;\n      _this.logger = Object(_utils_logger__WEBPACK_IMPORTED_MODULE_3__[\"default\"])().factory(\"CLSP Plugin \".concat(_this.id));\n\n      _this.logger.debug('creating plugin instance');\n\n      var playerOptions = player.options_;\n      _this.options = video_js__WEBPACK_IMPORTED_MODULE_0___default.a.mergeOptions(_objectSpread({}, _this.constructor.getDefaultOptions(), {}, defaultOptions, {}, playerOptions.clsp || {}), options);\n      _this._playerOptions = playerOptions;\n      _this.currentSourceIndex = 0;\n      player.addClass('vjs-mse-over-mqtt');\n\n      if (_this.options.customClass) {\n        player.addClass(_this.options.customClass);\n      }\n\n      _this.resetErrors(player); // @todo - this error doesn't work or display the way it's intended to\n\n\n      if (!_utils___WEBPACK_IMPORTED_MODULE_2__[\"default\"].supported()) {\n        return _possibleConstructorReturn(_this, player.error({\n          code: 'PLAYER_ERR_NOT_COMPAT',\n          type: 'PLAYER_ERR_NOT_COMPAT',\n          dismiss: false\n        }));\n      }\n\n      _this.autoplayEnabled = playerOptions.autoplay || player.getAttribute('autoplay') === 'true'; // for debugging...\n      // const oldTrigger = player.trigger.bind(player);\n      // player.trigger = (eventName, ...args) => {\n      //   console.log(eventName);\n      //   console.log(...args);\n      //   oldTrigger(eventName, ...args);\n      // };\n      // Track the number of times we've retried on error\n\n      player._errorRetriesCount = 0; // Needed to make videojs-errors think that the video is progressing.\n      // If we do not do this, videojs-errors will give us a timeout error.\n      // The number just needs to change, it doesn't need to continually increment\n\n      player._currentTime = VIDEOJS_ERRORS_PLAYER_CURRENT_TIME_MIN;\n\n      player.currentTime = function () {\n        // Don't let this number get over 2 billion!\n        if (player._currentTime > VIDEOJS_ERRORS_PLAYER_CURRENT_TIME_MAX) {\n          player._currentTime = VIDEOJS_ERRORS_PLAYER_CURRENT_TIME_MIN;\n        } else {\n          player._currentTime++;\n        }\n\n        return player._currentTime;\n      }; // @todo - are we not using videojs properly?\n      // @see - https://github.com/videojs/video.js/issues/5233\n      // @see - https://jsfiddle.net/karstenlh/96hrzp5w/\n      // This is currently needed for autoplay.\n\n\n      player.on('ready', function () {\n        _this.logger.debug('the player is ready');\n\n        if (_this.autoplayEnabled) {\n          // Even though the \"ready\" event has fired, it's not actually ready\n          // until the \"next tick\"...\n          setTimeout(function () {\n            player.play();\n          });\n        }\n      }); // @todo - this seems like we aren't using videojs properly\n\n      player.on('error',\n      /*#__PURE__*/\n      function () {\n        var _ref2 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee3(event) {\n          var retry, error;\n          return regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _this.logger.debug('the player encountered an error');\n\n                  retry =\n                  /*#__PURE__*/\n                  function () {\n                    var _ref3 = _asyncToGenerator(\n                    /*#__PURE__*/\n                    regeneratorRuntime.mark(function _callee2() {\n                      var iov;\n                      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n                        while (1) {\n                          switch (_context2.prev = _context2.next) {\n                            case 0:\n                              _this.logger.debug('retrying due to error');\n\n                              if (!(_this.options.maxRetriesOnError === 0)) {\n                                _context2.next = 3;\n                                break;\n                              }\n\n                              return _context2.abrupt(\"return\");\n\n                            case 3:\n                              if (!(_this.options.maxRetriesOnError < 0 || player._errorRetriesCount <= _this.options.maxRetriesOnError)) {\n                                _context2.next = 14;\n                                break;\n                              }\n\n                              // @todo - when can we reset this to zero?\n                              player._errorRetriesCount++;\n\n                              _this.resetErrors(player);\n\n                              iov = _this.getIov(); // @todo - investigate how this can be called when the iov has been destroyed\n\n                              if (!(!iov || iov.destroyed)) {\n                                _context2.next = 12;\n                                break;\n                              }\n\n                              _context2.next = 10;\n                              return _this.initializeIov(player);\n\n                            case 10:\n                              _context2.next = 14;\n                              break;\n\n                            case 12:\n                              _context2.next = 14;\n                              return iov.restart();\n\n                            case 14:\n                            case \"end\":\n                              return _context2.stop();\n                          }\n                        }\n                      }, _callee2);\n                    }));\n\n                    return function retry() {\n                      return _ref3.apply(this, arguments);\n                    };\n                  }();\n\n                  error = player.error();\n                  _context3.t0 = error.code;\n                  _context3.next = _context3.t0 === -2 ? 6 : _context3.t0 === 0 ? 7 : _context3.t0 === 4 ? 7 : _context3.t0 === 5 ? 7 : _context3.t0 === 'PLAYER_ERR_Iov' ? 7 : 8;\n                  break;\n\n                case 6:\n                  return _context3.abrupt(\"return\", retry());\n\n                case 7:\n                  return _context3.abrupt(\"break\", 9);\n\n                case 8:\n                  return _context3.abrupt(\"return\", retry());\n\n                case 9:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n\n        return function (_x) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n      player.on('play',\n      /*#__PURE__*/\n      _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4() {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _this.logger.debug('on player play event'); // @todo - it is probably unnecessary to have to completely tear down the\n                // existing iov and create a new one.  But for now, this works\n\n\n                _context4.next = 3;\n                return _this.initializeIov(player);\n\n              case 3:\n                // @todo - this hides it permanently.  it should be re-enabled when the\n                // player stops or pauses.  This will likely involve using some videojs\n                // classes rather than using the .hide method\n                _this.player.loadingSpinner.hide();\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }))); // the \"pause\" event gets triggered for some reason in scenarios where I do\n      // not expect it to be triggered.  Therefore, we will create our own \"stop\"\n      // event to be able to better control the player to stop.\n\n      player.on('stop', function () {\n        _this.logger.debug('on player stop event');\n\n        _this.player.pause();\n\n        _this.getIov().stop();\n      });\n      player.on('dispose', function () {\n        _this.logger.debug('on dispose stop event');\n\n        _this.destroy(player);\n      });\n      var visibilityChangeEventName = _utils___WEBPACK_IMPORTED_MODULE_2__[\"default\"].windowStateNames.visibilityChangeEventName;\n\n      if (visibilityChangeEventName) {\n        document.addEventListener(visibilityChangeEventName, _this.onVisibilityChange, false);\n      }\n\n      return _this;\n    }\n\n    _createClass(ClspPlugin, [{\n      key: \"getVideojsErrorsOptions\",\n      value: function getVideojsErrorsOptions() {\n        this.logger.debug('getting videojs errors options...');\n        return _objectSpread({\n          timeout: 120 * 1000,\n          errors: {\n            PLAYER_ERR_NOT_COMPAT: {\n              type: 'PLAYER_ERR_NOT_COMPAT',\n              headline: 'This browser is unsupported.',\n              message: 'Chrome 52+ is required.'\n            }\n          }\n        }, this.options.videojsErrorsOptions);\n      }\n    }, {\n      key: \"resetErrors\",\n      value: function resetErrors(player) {\n        this.logger.debug('resetting errors...'); // @see - https://github.com/videojs/video.js/issues/4401\n\n        player.error(null);\n        player.errorDisplay.close(); // Support for the videojs-errors library\n        // After an error occurs, and then we clear the error and its message\n        // above, we must re-enable videojs-errors on the player\n\n        if (player.errors) {\n          player.errors(this.getVideojsErrorsOptions());\n        }\n      }\n    }, {\n      key: \"getMqttHandler\",\n      value: function getMqttHandler() {\n        var player = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.player;\n        this.logger.debug('getting mqtt handler Iov...');\n        return player.tech(true).mqtt;\n      }\n    }, {\n      key: \"getIov\",\n      value: function getIov() {\n        this.logger.debug('getting Iov...');\n        return this.getMqttHandler().iov;\n      }\n    }, {\n      key: \"initializeIov\",\n      value: function () {\n        var _initializeIov = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee5(player) {\n          var _this2 = this;\n\n          var mqttHandler, iov;\n          return regeneratorRuntime.wrap(function _callee5$(_context5) {\n            while (1) {\n              switch (_context5.prev = _context5.next) {\n                case 0:\n                  this.logger.debug('initializing Iov...');\n                  mqttHandler = this.getMqttHandler();\n\n                  if (mqttHandler) {\n                    _context5.next = 4;\n                    break;\n                  }\n\n                  throw new Error(\"VideoJS Player \".concat(player.id(), \" does not have mqtt tech!\"));\n\n                case 4:\n                  mqttHandler.off('error', this.onMqttHandlerError);\n                  mqttHandler.on('error', this.onMqttHandlerError);\n                  _context5.next = 8;\n                  return mqttHandler.createIov(player);\n\n                case 8:\n                  iov = this.getIov();\n                  iov.ENABLE_METRICS = this.options.enableMetrics;\n                  this.logger.debug('resgistering \"firstFrameShown\" event'); // @todo - is this still the correct way to track this?  we may want to use\n                  // the onShown handler in the iov instead\n\n                  iov.on('firstFrameShown', function () {\n                    _this2.logger.debug('about to trigger \"firstFrameShown\" event on videojs player');\n\n                    player.trigger('firstFrameShown');\n                  });\n                  _context5.next = 14;\n                  return iov.stop();\n\n                case 14:\n                  _context5.next = 16;\n                  return iov.changeSrc(mqttHandler.source_.src);\n\n                case 16:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }\n          }, _callee5, this);\n        }));\n\n        function initializeIov(_x2) {\n          return _initializeIov.apply(this, arguments);\n        }\n\n        return initializeIov;\n      }()\n    }, {\n      key: \"destroy\",\n      value: function destroy() {\n        var player = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.player;\n        this.logger.debug('destroying...'); // Note that when the 'dispose' event is fired, this.player no longer exists\n\n        if (!player) {\n          this.logger.warn('Unable to destroy CLSP Plugin without the player!');\n          return;\n        }\n\n        if (this.destroyed) {\n          this.logger.debug('Tried to destroy when already destroyed');\n          return;\n        }\n\n        this.destroyed = true; // @todo - destroy the tech, since it is a player-specific instance\n\n        try {\n          var mqttHandler = this.getMqttHandler(player);\n          mqttHandler.destroy();\n          mqttHandler.off('error', this.onMqttHandlerError);\n          var visibilityChangeEventName = _utils___WEBPACK_IMPORTED_MODULE_2__[\"default\"].windowStateNames.visibilityChangeEventName;\n\n          if (visibilityChangeEventName) {\n            this.logger.debug('removing onVisibilityChange listener...');\n            document.removeEventListener(visibilityChangeEventName, this.onVisibilityChange);\n          }\n\n          if (this.visibilityChangeInterval) {\n            this.logger.debug('removing visibilityChangeInterval...');\n            clearInterval(this.visibilityChangeInterval);\n          }\n\n          this._playerOptions = null;\n          this.currentSourceIndex = null;\n        } catch (error) {\n          // @todo - need to improve iov destroy logic...\n          this.logger.error('Error while destroying clsp plugin instance!');\n          this.logger.error(error);\n        }\n      }\n    }]);\n\n    return ClspPlugin;\n  }(Plugin), _defineProperty(_class, \"VERSION\", _utils___WEBPACK_IMPORTED_MODULE_2__[\"default\"].version), _defineProperty(_class, \"utils\", _utils___WEBPACK_IMPORTED_MODULE_2__[\"default\"]), _defineProperty(_class, \"METRIC_TYPES\", ['videojs.errorRetriesCount']), _temp;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/js/video-js-plugin/plugin.js\n");

/***/ }),

/***/ "./src/styles/videojs-mse-over-clsp.scss":
/*!***********************************************!*\
  !*** ./src/styles/videojs-mse-over-clsp.scss ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGVzL3ZpZGVvanMtbXNlLW92ZXItY2xzcC5zY3NzPzQyODIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiLi9zcmMvc3R5bGVzL3ZpZGVvanMtbXNlLW92ZXItY2xzcC5zY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/styles/videojs-mse-over-clsp.scss\n");

/***/ }),

/***/ 0:
/*!***********************************************!*\
  !*** multi ./src/js/video-js-plugin/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /home/user/projects/clsp/clsp-videojs-plugin/src/js/video-js-plugin/index.js */"./src/js/video-js-plugin/index.js");


/***/ }),

/***/ "video.js":
/*!**************************!*\
  !*** external "videojs" ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = videojs;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJ2aWRlb2pzXCI/YTY1NSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiJ2aWRlby5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gdmlkZW9qczsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///video.js\n");

/***/ })

/******/ });